var searchIndex = JSON.parse('{\
"errcov":{"doc":"","t":"F","n":["main"],"q":[[0,"errcov"]],"d":[""],"i":[0],"f":[[[],1]],"c":[],"p":[[15,"tuple"]]},\
"leo":{"doc":"","t":"FF","n":["main","set_panic_hook"],"q":[[0,"leo"]],"d":["",""],"i":[0,0],"f":[[[],1],[[],1]],"c":[],"p":[[15,"tuple"]]},\
"leo_abnf":{"doc":"","t":"NNNDELLLLLLLLLLLLLLMLLMFLMFLMMLLLLLLLL","n":["Code","Definition","Free","Processor","Scope","append_str","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","enter_scope","fmt","fmt","from","from","grammar","into","into","line","main","new","out","parse_abnf_node","process","rules","scope","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"leo_abnf"],[38,"core::fmt"],[39,"core::fmt"],[40,"abnf::types"],[41,"alloc::vec"],[42,"abnf::types"],[43,"core::result"],[44,"core::any"]],"d":["","","","Transforms abnf file into Markdown.","Processor’s scope. Used when code block or definition …","Append new line into output, add newline character.","","","","","","","","","Enter new scope (definition or code block). Allows …","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Recursively parse ABNF Node and fill sum vec with found …","Main function for this struct. Goes through each line and …","","","","","","","","","",""],"i":[4,4,4,0,0,1,4,1,4,1,4,1,4,1,1,4,1,4,1,1,4,1,1,0,1,1,0,1,1,1,4,1,4,1,4,1,4,1],"f":[0,0,0,0,0,[[1,2],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[4,4],[1,1],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[1,4],3],[[4,5],6],[[1,5],6],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,[[],[[7,[3]]]],[[2,[9,[8]]],1],0,[[10,[9,[11]]],3],[1,3],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]]],"c":[],"p":[[3,"Processor",0],[15,"str"],[15,"tuple"],[4,"Scope",0],[3,"Formatter",38],[6,"Result",38],[6,"Result",39],[3,"Rule",40],[3,"Vec",41],[4,"Node",40],[3,"String",42],[4,"Result",43],[3,"TypeId",44]]},\
"leo_ast":{"doc":"The abstract syntax tree (ast) for a Leo program.","t":"DALLMLLLLALLLLLLLLLALLLLAALALLALFAAFOAALLLLLLLLAADDDDDMMAAAMMMMMMMMAMMMMMMMMMAMMDMLLLLLLLLLLLLLLLLLMMLLLLLLMLLLLLDLLLLLLLLLLLLLLLLLMLLMLLLLMLLLLMLDMLLLLLLLLLLLLLLLLLMLLMLLLLMLLLLMLDLLLLLLLLLLLLLLLLLMLMLMLLLLMLLLLLDLLLLLLLLLLLLLLLLLMMLLLLLLMLLLLMLAAAAAADLLLLLLLLLLLLLLLLLLMLLLMLLLLLMLLLLLFFIGKKKKDDLLLLLLLLLLLLLLLLLLLLLMLLLLMLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLMDLLLLLLLLLLLLLLLLLLLLLLLLLLNNNENNNNNNDNNNDENNNNDNDNNNNNDENNNNNNNENNNNNNNNNNNNNNNNNNNNNNNNNNDDNNNDNNNNDNDENDNAMAALLAALLMLLLLMMLLLLLAMMMLLLMLMMMMMMMMMMMMMMLLMAMMMMMMLLLLMMMMMMMMMMMAALLLLAMLAAENNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLMLLLLLLLLLMLLLLLLMLLLLLNNNDENNNNNNNNNNNNNNNNNNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMMMLLLLLMLLLLLLLLLLDMLLLLLLLLLLLLLMLLLMLMLLLLLLMLLLLLDLLLLLLLLLLLLLMLLLLMLLLLLLMLLLLMLDLLLLLLLLLLLLLLLLLMLLLLLLMLLLLLNNNNNENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLMMMLLLLMMLLLLLLLLMMLLLLLLLLLLLDLLLLMLLLLLLLLLLLLLMMMLLLLLLMLLLLLDLLLLLLLLMLLLLLLLLLMLLLLLLMLLLLLNNNNNNNNNNDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMMLLLLLMLLLLLLLLLDLLLLLLLLLLLLLLLLLMLLLLLLMLLLLLDAMMLLLLALLLLLLLLLAAMLLLLLMMLAMLLALLAMMLLLLMLLLLLAMDLLLLLLLLLLLLLLLLLMMLLLLLLMLLLLLNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLMMLLMMLLLLMLLLLLLDMLLLLLLLLLLLLLLLLLMMLMLLMMLLLLMLLLLLNDENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLMLLLLLLLLMLLLLLLLLLMLLNENNNLLLLLLLLLLLLLLLLLLLLLLLLNDNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLMLLLLLLLLMLLLLLLLLLMLLNNNELLLLLLLLLLLLLLLLLLLLLLAAENNNNLLLLLLLLLLLLLLLLLLLLLLLLEDNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLMLLLLLLLLLMMGMAMAAAADLLLLLLLLLLLLLLLLLMMLMLLLMLMDDLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLNNNNENLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLMLLLLLLDLLLLMLLLLLLLLLMLMLLLLDLLLLLLLLLLLLLLLLLMMLLMLLLLMLLLLLMAAAIIIIQQQQQQQQIIIIKKKKKKKKKKKKLLKKKKKKKKKKLKKKKKKQIIILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLQIQIILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLMLLAAMLLLLLLDLLLLLLLLLLLLLLLLLLLMMLLLLLLDLLLLMLLLLLLLLLLLLMLLMMLMMLLLLLNNNNNNNNNNEAAALLLLAAAALLLLLLLLLLALLLLLLAALLLLLLLLLNNNDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLMLLLLLLLLLMDLLLLLLLLLLLLLLLLLMLLMLLLLMLLLLLMDLLLLLLLLLLLLLLLLLMLLLLLLMMLLLLLDLLLLMLLLLLLLLLLLLLMLLMLLLLMMLLLLLAANNNELLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLMLMLLLLLLMLLLLLDLLLLLLLLLLLLLLLLLMLLMLLLLMLLLLMLMNEDNLLLLAMLLLLLLLLLLLLLMLLMLLLLMLLLLMLMNENLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLMLLLLMLLLLLLMLLLLLDMLLLLLLLLLLLLLLLLLMMLLLLLLMMMMMLLLLMLMDLLLLLLLLLLLLLMMLLLLMLLLLLLMLLLLLDLLLLLLLLLLLLLLLLLMMLLMAMLLLLLMLLLLLDLLLLLLLLLLLLLLLLLMMLLMLLLLLMLLLLMLAAAAAADLLLLLLLLLLMLLLLLLLLLLLLMLLLLLLLENLLLLLLLLLLLLLLLLLLLLLNNNNNENNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLMLLLLLLMDLLLLLLLLLMLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNENLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNNNELLLLLLLLLLLLLLLLLLLLLLLLLLLOOLLLLLLLLLLLLLLLLLLLLLLLL","n":["Ast","access","as_ref","as_repr","ast","borrow","borrow_mut","clone","clone_into","common","default","deref","deref_mut","drop","eq","equivalent","equivalent","equivalent","equivalent","expressions","fmt","from","from_json_file","from_json_string","functions","groups","init","input","into","into_repr","mapping","new","normalize_json_value","passes","program","remove_key_from_json","simple_node_impl","statement","struct","to_json_file","to_json_file_without_keys","to_json_string","to_json_value","to_owned","try_from","try_into","type_id","types","value","ArrayAccess","AssociatedConstant","AssociatedFunction","MemberAccess","TupleAccess","arguments","array","array_access","associated_constant_access","associated_function_access","id","id","id","id","id","index","index","inner","member_access","name","name","name","span","span","span","span","span","tuple","tuple_access","ty","ty","ArrayAccess","array","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","id","id","index","init","into","serialize","set_id","set_span","span","span","to_owned","to_string","try_from","try_into","type_id","AssociatedConstant","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","id","id","init","into","name","serialize","set_id","set_span","span","span","to_owned","to_string","try_from","try_into","ty","type_id","AssociatedFunction","arguments","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","id","id","init","into","name","serialize","set_id","set_span","span","span","to_owned","to_string","try_from","try_into","ty","type_id","MemberAccess","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","id","id","init","inner","into","name","serialize","set_id","set_span","span","span","to_owned","to_string","try_from","try_into","type_id","TupleAccess","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","id","id","index","init","into","serialize","set_id","set_span","span","span","to_owned","to_string","try_from","try_into","tuple","type_id","identifier","imported_modules","node","node_builder","positive_number","static_string","Identifier","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","hash","id","id","init","into","matches","name","new","serialize","set_id","set_span","span","span","to_owned","to_string","try_from","try_into","type_id","deserialize","serialize","Node","NodeID","id","set_id","set_span","span","NodeBuilder","NodeBuilderInner","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","init","init","inner","into","into","new","new","next","next_id","next_id","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","NonNegativeNumber","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","from","hash","init","into","is_zero","serialize","string","string","to_owned","to_string","try_from","try_into","type_id","value","value","StaticString","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","init","into","new","serialize","to_owned","to_string","try_from","try_into","type_id","Abs","AbsWrapped","Access","AccessExpression","Add","AddWrapped","Address","And","Array","Array","ArrayExpression","AssociatedConstant","AssociatedFunction","Binary","BinaryExpression","BinaryOperation","BitwiseAnd","BitwiseOr","Boolean","Call","CallExpression","Cast","CastExpression","Div","DivWrapped","Double","Eq","Err","ErrExpression","Expression","Field","Group","Gt","Gte","Identifier","Integer","Inverse","Literal","Literal","Lt","Lte","Member","Mod","Mul","MulWrapped","Nand","Negate","Neq","Nor","Not","Or","Pow","PowWrapped","Rem","RemWrapped","Scalar","Shl","ShlWrapped","Shr","ShrWrapped","Square","SquareRoot","String","Struct","StructExpression","StructVariableInitializer","Sub","SubWrapped","Ternary","TernaryExpression","ToXCoordinate","ToYCoordinate","Tuple","Tuple","TupleExpression","Unary","UnaryExpression","UnaryOperation","Unit","UnitExpression","Xor","access","arguments","array","binary","borrow","borrow_mut","call","cast","clone","clone_into","condition","deref","deref_mut","deserialize","drop","elements","elements","eq","equivalent","equivalent","equivalent","equivalent","err","expression","expression","external","fmt","fmt","from","function","id","id","id","id","id","id","id","id","id","id","id","id","identifier","if_false","if_true","init","into","left","literal","members","name","op","op","receiver","right","serialize","set_id","set_span","span","span","span","span","span","span","span","span","span","span","span","span","struct_init","ternary","to_owned","to_string","try_from","try_into","tuple","type_","type_id","unary","unit","AccessExpression","Array","AssociatedConstant","AssociatedFunction","Member","Tuple","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","id","init","into","serialize","set_id","set_span","span","to_owned","to_string","try_from","try_into","type_id","ArrayExpression","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","elements","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","id","id","init","into","serialize","set_id","set_span","span","span","to_owned","to_string","try_from","try_into","type_id","Add","AddWrapped","And","BinaryExpression","BinaryOperation","BitwiseAnd","BitwiseOr","Div","DivWrapped","Eq","Gt","Gte","Lt","Lte","Mod","Mul","MulWrapped","Nand","Neq","Nor","Or","Pow","PowWrapped","Rem","RemWrapped","Shl","ShlWrapped","Shr","ShrWrapped","Sub","SubWrapped","Xor","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from_symbol","id","id","init","init","into","into","left","op","right","serialize","serialize","set_id","set_span","span","span","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","CallExpression","arguments","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","external","fmt","fmt","from","function","id","id","init","into","serialize","set_id","set_span","span","span","to_owned","to_string","try_from","try_into","type_id","CastExpression","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","expression","fmt","fmt","from","id","id","init","into","serialize","set_id","set_span","span","span","to_owned","to_string","try_from","try_into","type_","type_id","ErrExpression","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","id","id","init","into","serialize","set_id","set_span","span","span","to_owned","to_string","try_from","try_into","type_id","Address","Boolean","Field","Group","Integer","Literal","Scalar","String","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from_value","id","init","into","serialize","set_id","set_span","span","to_owned","to_string","try_from","try_into","type_id","StructExpression","StructVariableInitializer","borrow","borrow","borrow_mut","borrow_mut","check_record","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","expression","fmt","fmt","fmt","fmt","from","from","id","id","id","id","identifier","init","init","into","into","members","name","serialize","serialize","set_id","set_id","set_span","set_span","span","span","span","span","to_owned","to_owned","to_record_string","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","TernaryExpression","borrow","borrow_mut","clone","clone_into","condition","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","id","id","if_false","if_true","init","into","serialize","set_id","set_span","span","span","to_owned","to_string","try_from","try_into","type_id","TupleExpression","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","elements","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","id","id","init","into","serialize","set_id","set_span","span","span","to_owned","to_string","try_from","try_into","type_id","Abs","AbsWrapped","Double","Inverse","Negate","Not","Square","SquareRoot","ToXCoordinate","ToYCoordinate","UnaryExpression","UnaryOperation","as_str","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from_symbol","id","id","init","init","into","into","op","receiver","serialize","serialize","set_id","set_span","span","span","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","UnitExpression","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","id","id","init","into","serialize","set_id","set_span","span","span","to_owned","to_string","try_from","try_into","type_id","Function","annotation","annotations","block","borrow","borrow_mut","clone","clone_into","core_function","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","external","finalize","finalize","fmt","fmt","format","from","id","id","identifier","init","input","input","into","is_main","mode","name","new","output","output","output_type","serialize","set_id","set_span","span","span","to_owned","to_string","try_from","try_into","type_id","variant","variant","Annotation","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","id","id","identifier","init","into","serialize","set_id","set_span","span","span","to_owned","to_string","try_from","try_into","type_id","BHP1024CommitToAddress","BHP1024CommitToField","BHP1024CommitToGroup","BHP1024HashToAddress","BHP1024HashToField","BHP1024HashToGroup","BHP1024HashToI128","BHP1024HashToI16","BHP1024HashToI32","BHP1024HashToI64","BHP1024HashToI8","BHP1024HashToScalar","BHP1024HashToU128","BHP1024HashToU16","BHP1024HashToU32","BHP1024HashToU64","BHP1024HashToU8","BHP256CommitToAddress","BHP256CommitToField","BHP256CommitToGroup","BHP256HashToAddress","BHP256HashToField","BHP256HashToGroup","BHP256HashToI128","BHP256HashToI16","BHP256HashToI32","BHP256HashToI64","BHP256HashToI8","BHP256HashToScalar","BHP256HashToU128","BHP256HashToU16","BHP256HashToU32","BHP256HashToU64","BHP256HashToU8","BHP512CommitToAddress","BHP512CommitToField","BHP512CommitToGroup","BHP512HashToAddress","BHP512HashToField","BHP512HashToGroup","BHP512HashToI128","BHP512HashToI16","BHP512HashToI32","BHP512HashToI64","BHP512HashToI8","BHP512HashToScalar","BHP512HashToU128","BHP512HashToU16","BHP512HashToU32","BHP512HashToU64","BHP512HashToU8","BHP768CommitToAddress","BHP768CommitToField","BHP768CommitToGroup","BHP768HashToAddress","BHP768HashToField","BHP768HashToGroup","BHP768HashToI128","BHP768HashToI16","BHP768HashToI32","BHP768HashToI64","BHP768HashToI8","BHP768HashToScalar","BHP768HashToU128","BHP768HashToU16","BHP768HashToU32","BHP768HashToU64","BHP768HashToU8","ChaChaRandAddress","ChaChaRandBool","ChaChaRandField","ChaChaRandGroup","ChaChaRandI128","ChaChaRandI16","ChaChaRandI32","ChaChaRandI64","ChaChaRandI8","ChaChaRandScalar","ChaChaRandU128","ChaChaRandU16","ChaChaRandU32","ChaChaRandU64","ChaChaRandU8","CoreFunction","GroupToXCoordinate","GroupToYCoordinate","Keccak256HashToAddress","Keccak256HashToField","Keccak256HashToGroup","Keccak256HashToI128","Keccak256HashToI16","Keccak256HashToI32","Keccak256HashToI64","Keccak256HashToI8","Keccak256HashToScalar","Keccak256HashToU128","Keccak256HashToU16","Keccak256HashToU32","Keccak256HashToU64","Keccak256HashToU8","Keccak384HashToAddress","Keccak384HashToField","Keccak384HashToGroup","Keccak384HashToI128","Keccak384HashToI16","Keccak384HashToI32","Keccak384HashToI64","Keccak384HashToI8","Keccak384HashToScalar","Keccak384HashToU128","Keccak384HashToU16","Keccak384HashToU32","Keccak384HashToU64","Keccak384HashToU8","Keccak512HashToAddress","Keccak512HashToField","Keccak512HashToGroup","Keccak512HashToI128","Keccak512HashToI16","Keccak512HashToI32","Keccak512HashToI64","Keccak512HashToI8","Keccak512HashToScalar","Keccak512HashToU128","Keccak512HashToU16","Keccak512HashToU32","Keccak512HashToU64","Keccak512HashToU8","MappingContains","MappingGet","MappingGetOrUse","MappingRemove","MappingSet","Pedersen128CommitToAddress","Pedersen128CommitToField","Pedersen128CommitToGroup","Pedersen128HashToAddress","Pedersen128HashToField","Pedersen128HashToGroup","Pedersen128HashToI128","Pedersen128HashToI16","Pedersen128HashToI32","Pedersen128HashToI64","Pedersen128HashToI8","Pedersen128HashToScalar","Pedersen128HashToU128","Pedersen128HashToU16","Pedersen128HashToU32","Pedersen128HashToU64","Pedersen128HashToU8","Pedersen64CommitToAddress","Pedersen64CommitToField","Pedersen64CommitToGroup","Pedersen64HashToAddress","Pedersen64HashToField","Pedersen64HashToGroup","Pedersen64HashToI128","Pedersen64HashToI16","Pedersen64HashToI32","Pedersen64HashToI64","Pedersen64HashToI8","Pedersen64HashToScalar","Pedersen64HashToU128","Pedersen64HashToU16","Pedersen64HashToU32","Pedersen64HashToU64","Pedersen64HashToU8","Poseidon2HashToAddress","Poseidon2HashToField","Poseidon2HashToGroup","Poseidon2HashToI128","Poseidon2HashToI16","Poseidon2HashToI32","Poseidon2HashToI64","Poseidon2HashToI8","Poseidon2HashToScalar","Poseidon2HashToU128","Poseidon2HashToU16","Poseidon2HashToU32","Poseidon2HashToU64","Poseidon2HashToU8","Poseidon4HashToAddress","Poseidon4HashToField","Poseidon4HashToGroup","Poseidon4HashToI128","Poseidon4HashToI16","Poseidon4HashToI32","Poseidon4HashToI64","Poseidon4HashToI8","Poseidon4HashToScalar","Poseidon4HashToU128","Poseidon4HashToU16","Poseidon4HashToU32","Poseidon4HashToU64","Poseidon4HashToU8","Poseidon8HashToAddress","Poseidon8HashToField","Poseidon8HashToGroup","Poseidon8HashToI128","Poseidon8HashToI16","Poseidon8HashToI32","Poseidon8HashToI64","Poseidon8HashToI8","Poseidon8HashToScalar","Poseidon8HashToU128","Poseidon8HashToU16","Poseidon8HashToU32","Poseidon8HashToU64","Poseidon8HashToU8","SHA3_256HashToAddress","SHA3_256HashToField","SHA3_256HashToGroup","SHA3_256HashToI128","SHA3_256HashToI16","SHA3_256HashToI32","SHA3_256HashToI64","SHA3_256HashToI8","SHA3_256HashToScalar","SHA3_256HashToU128","SHA3_256HashToU16","SHA3_256HashToU32","SHA3_256HashToU64","SHA3_256HashToU8","SHA3_384HashToAddress","SHA3_384HashToField","SHA3_384HashToGroup","SHA3_384HashToI128","SHA3_384HashToI16","SHA3_384HashToI32","SHA3_384HashToI64","SHA3_384HashToI8","SHA3_384HashToScalar","SHA3_384HashToU128","SHA3_384HashToU16","SHA3_384HashToU32","SHA3_384HashToU64","SHA3_384HashToU8","SHA3_512HashToAddress","SHA3_512HashToField","SHA3_512HashToGroup","SHA3_512HashToI128","SHA3_512HashToI16","SHA3_512HashToI32","SHA3_512HashToI64","SHA3_512HashToI8","SHA3_512HashToScalar","SHA3_512HashToU128","SHA3_512HashToU16","SHA3_512HashToU32","SHA3_512HashToU64","SHA3_512HashToU8","SignatureVerify","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","equivalent","equivalent","equivalent","equivalent","from","from_symbols","init","into","is_finalize_command","num_args","to_owned","try_from","try_into","type_id","External","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","id","id","identifier","init","into","program_name","record","serialize","set_id","set_span","span","span","to_owned","to_string","try_from","try_into","type_","type_id","Finalize","block","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","id","id","identifier","init","input","into","new","output","output_type","serialize","set_id","set_span","span","span","to_owned","to_string","try_from","try_into","type_id","External","FunctionInput","Input","Internal","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","format","from","from","id","id","id","identifier","identifier","init","init","into","into","mode","mode","serialize","serialize","set_id","set_id","set_span","set_span","span","span","span","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_","type_","type_id","type_id","Constant","Mode","None","Private","Public","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","init","into","serialize","to_owned","to_string","try_from","try_into","type_id","External","FunctionOutput","Internal","Output","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","id","id","id","init","init","into","into","mode","mode","serialize","serialize","set_id","set_id","set_span","set_span","span","span","span","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_","type_","type_id","type_id","Inline","Standard","Transition","Variant","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","init","into","serialize","to_owned","try_from","try_into","type_id","group_coordinate","group_literal","GroupCoordinate","Inferred","Number","SignHigh","SignLow","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","init","into","serialize","to_owned","to_string","try_from","try_into","type_id","GroupLiteral","GroupTuple","Single","Tuple","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","id","id","init","init","into","into","serialize","serialize","set_id","set_span","span","span","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","x","y","Definitions","core","definition","hash_builder","input_ast","input_value","program_input","section","Definition","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","init","into","mode","name","serialize","span","to_owned","try_from","try_into","type_","type_id","value","InputAst","InputData","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","fmt","fmt","from","from","init","init","into","into","program_input","program_inputs","sections","serialize","serialize","to_json_file","to_json_file_without_keys","to_json_string","to_json_value","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Address","Boolean","Field","Group","InputValue","Integer","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","init","into","serialize","to_owned","to_string","try_from","try_from","try_into","type_id","ProgramInput","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","deserialize","drop","fmt","from","init","into","main","serialize","to_owned","try_from","try_from","try_into","type_id","Section","borrow","borrow_mut","clone","clone_into","definitions","deref","deref_mut","deserialize","drop","fmt","from","init","into","name","name","serialize","span","to_owned","try_from","try_into","type_id","Mapping","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","id","id","identifier","init","into","key_type","serialize","set_id","set_span","span","span","to_owned","to_string","try_from","try_into","type_id","value_type","consumer","reconstructor","visitor","ExpressionConsumer","FunctionConsumer","ImportConsumer","MappingConsumer","Output","Output","Output","Output","Output","Output","Output","Output","ProgramConsumer","ProgramScopeConsumer","StatementConsumer","StructConsumer","consume_access","consume_array","consume_assert","consume_assign","consume_binary","consume_block","consume_call","consume_cast","consume_conditional","consume_console","consume_const","consume_definition","consume_err","consume_expression","consume_expression_statement","consume_function","consume_identifier","consume_import","consume_iteration","consume_literal","consume_mapping","consume_program","consume_program_scope","consume_return","consume_statement","consume_struct","consume_struct_init","consume_ternary","consume_tuple","consume_unary","consume_unit","AdditionalOutput","ExpressionReconstructor","ProgramReconstructor","StatementReconstructor","reconstruct_access","reconstruct_array","reconstruct_array_access","reconstruct_assert","reconstruct_assign","reconstruct_associated_constant","reconstruct_associated_function","reconstruct_binary","reconstruct_block","reconstruct_call","reconstruct_cast","reconstruct_conditional","reconstruct_console","reconstruct_const","reconstruct_definition","reconstruct_err","reconstruct_expression","reconstruct_expression_statement","reconstruct_function","reconstruct_identifier","reconstruct_import","reconstruct_iteration","reconstruct_literal","reconstruct_mapping","reconstruct_member_access","reconstruct_program","reconstruct_program_scope","reconstruct_return","reconstruct_statement","reconstruct_struct","reconstruct_struct_init","reconstruct_ternary","reconstruct_tuple","reconstruct_tuple_access","reconstruct_unary","reconstruct_unit","AdditionalInput","ExpressionVisitor","Output","ProgramVisitor","StatementVisitor","visit_access","visit_array","visit_assert","visit_assign","visit_binary","visit_block","visit_call","visit_cast","visit_conditional","visit_console","visit_const","visit_definition","visit_err","visit_expression","visit_expression_statement","visit_function","visit_identifier","visit_import","visit_iteration","visit_literal","visit_mapping","visit_program","visit_program_scope","visit_return","visit_statement","visit_struct","visit_struct_init","visit_ternary","visit_tuple","visit_unary","visit_unit","Program","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","imports","init","into","program_id","program_scope","program_scopes","serialize","to_owned","to_string","try_from","try_into","type_id","ProgramId","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","hash","init","into","name","network","serialize","to_owned","to_string","try_from","try_into","type_id","ProgramScope","borrow","borrow_mut","clone","clone_into","consts","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","functions","init","into","mappings","program_id","serialize","span","structs","to_owned","to_string","try_from","try_into","type_id","Assert","Assign","Block","Conditional","Console","Const","Definition","Expression","Iteration","Return","Statement","assert","assign","block","borrow","borrow_mut","clone","clone_into","conditional","console","const_","definition","deref","deref_mut","deserialize","drop","dummy","eq","equivalent","equivalent","equivalent","equivalent","expression","fmt","fmt","from","id","init","into","iteration","return_","serialize","set_id","set_span","span","to_owned","to_string","try_from","try_into","type_id","Assert","AssertEq","AssertNeq","AssertStatement","AssertVariant","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","id","id","init","init","into","into","serialize","serialize","set_id","set_span","span","span","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","variant","AssignStatement","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","id","id","init","into","place","serialize","set_id","set_span","span","span","to_owned","to_string","try_from","try_into","type_id","value","Block","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","id","id","init","into","serialize","set_id","set_span","span","span","statements","to_owned","to_string","try_from","try_into","type_id","ConditionalStatement","borrow","borrow_mut","clone","clone_into","condition","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","id","id","init","into","otherwise","serialize","set_id","set_span","span","span","then","to_owned","to_string","try_from","try_into","type_id","console_function","console_statement","Assert","AssertEq","AssertNeq","ConsoleFunction","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","init","into","serialize","to_owned","to_string","try_from","try_into","type_id","ConsoleStatement","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","function","id","id","init","into","serialize","set_id","set_span","span","span","to_owned","to_string","try_from","try_into","type_id","ConstDeclaration","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","id","id","init","into","place","serialize","set_id","set_span","span","span","to_owned","to_string","try_from","try_into","type_","type_id","value","Const","DeclarationType","DefinitionStatement","Let","borrow","borrow_mut","clone","clone_into","declaration_type","declaration_type","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","id","id","init","into","place","serialize","set_id","set_span","span","span","to_owned","to_string","try_from","try_into","type_","type_id","value","Const","DeclarationType","Let","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","init","into","serialize","to_owned","to_string","try_from","try_into","type_id","ExpressionStatement","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","expression","fmt","fmt","from","id","id","init","into","serialize","set_id","set_span","span","span","to_owned","to_string","try_from","try_into","type_id","IterationStatement","block","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","id","id","inclusive","init","into","serialize","set_id","set_span","span","span","start","start_value","stop","stop_value","to_owned","to_string","try_from","try_into","type_","type_id","variable","ReturnStatement","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","expression","finalize_arguments","fmt","fmt","from","id","id","init","into","serialize","set_id","set_span","span","span","to_owned","to_string","try_from","try_into","type_id","Struct","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","id","id","identifier","init","into","is_record","member","members","name","serialize","set_id","set_span","span","span","to_owned","to_string","try_from","try_into","type_id","Member","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","id","id","identifier","init","into","mode","name","serialize","set_id","set_span","span","span","to_owned","to_string","try_from","try_into","type_","type_id","array","core_constant","integer_type","mapping","tuple","type_","ArrayType","base_element_type","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","element_type","element_type","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","hash","init","into","length","length","new","serialize","to_owned","to_string","try_from","try_into","type_id","CoreConstant","GroupGenerator","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","equivalent","equivalent","equivalent","equivalent","from","from_symbols","init","into","to_owned","to_type","try_from","try_into","type_id","I128","I16","I32","I64","I8","IntegerType","U128","U16","U32","U64","U8","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","hash","init","into","is_signed","serialize","symbol","to_owned","to_string","try_from","try_into","type_id","MappingType","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","hash","init","into","key","serialize","to_owned","to_string","try_from","try_into","type_id","value","TupleType","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","elements","elements","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","hash","init","into","length","new","serialize","to_owned","to_string","try_from","try_into","type_id","Address","Array","Boolean","Err","Field","Group","Identifier","Integer","Mapping","Scalar","Signature","String","Tuple","Type","Unit","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","eq_flat","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","from","hash","init","into","serialize","to_owned","to_string","try_from","try_into","type_id","Address","Boolean","Field","Group","I128","I16","I32","I64","I8","Input","Scalar","String","Struct","U128","U16","U32","U64","U8","Value","abs","abs_wrapped","add","add_wrapped","as_ref","bitand","bitor","borrow","borrow_mut","clone","clone_into","deref","deref_mut","div","div_wrapped","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","ge","gt","implement_const_binary","implement_const_unary","init","into","is_supported_const_fold_type","le","lt","mul","mul_wrapped","neg","not","pow","pow_wrapped","shl","shl_wrapped","shr","shr_wrapped","sub","sub_wrapped","to_owned","to_string","try_from","try_from","try_into","type_id","xor"],"q":[[0,"leo_ast"],[49,"leo_ast::access"],[80,"leo_ast::access::array_access"],[113,"leo_ast::access::associated_constant_access"],[146,"leo_ast::access::associated_function_access"],[180,"leo_ast::access::member_access"],[213,"leo_ast::access::tuple_access"],[246,"leo_ast::common"],[252,"leo_ast::common::identifier"],[287,"leo_ast::common::imported_modules"],[289,"leo_ast::common::node"],[295,"leo_ast::common::node_builder"],[334,"leo_ast::common::positive_number"],[367,"leo_ast::common::static_string"],[394,"leo_ast::expressions"],[556,"leo_ast::expressions::access"],[590,"leo_ast::expressions::array"],[622,"leo_ast::expressions::binary"],[712,"leo_ast::expressions::call"],[746,"leo_ast::expressions::cast"],[779,"leo_ast::expressions::err"],[810,"leo_ast::expressions::literal"],[847,"leo_ast::expressions::struct_init"],[915,"leo_ast::expressions::ternary"],[949,"leo_ast::expressions::tuple"],[981,"leo_ast::expressions::unary"],[1049,"leo_ast::expressions::unit"],[1080,"leo_ast::functions"],[1131,"leo_ast::functions::annotation"],[1163,"leo_ast::functions::core_function"],[1437,"leo_ast::functions::external"],[1472,"leo_ast::functions::finalize"],[1509,"leo_ast::functions::input"],[1578,"leo_ast::functions::mode"],[1607,"leo_ast::functions::output"],[1673,"leo_ast::functions::variant"],[1699,"leo_ast::groups"],[1701,"leo_ast::groups::group_coordinate"],[1730,"leo_ast::groups::group_literal"],[1788,"leo_ast::input"],[1796,"leo_ast::input::definition"],[1824,"leo_ast::input::input_ast"],[1868,"leo_ast::input::input_value"],[1899,"leo_ast::input::program_input"],[1920,"leo_ast::input::section"],[1942,"leo_ast::mapping"],[1976,"leo_ast::passes"],[1979,"leo_ast::passes::consumer"],[2026,"leo_ast::passes::reconstructor"],[2066,"leo_ast::passes::visitor"],[2102,"leo_ast::program"],[2132,"leo_ast::program::program_id"],[2160,"leo_ast::program::program_scope"],[2191,"leo_ast::statement"],[2241,"leo_ast::statement::assert"],[2299,"leo_ast::statement::assign"],[2332,"leo_ast::statement::block"],[2364,"leo_ast::statement::conditional"],[2398,"leo_ast::statement::console"],[2400,"leo_ast::statement::console::console_function"],[2428,"leo_ast::statement::console::console_statement"],[2460,"leo_ast::statement::const_"],[2494,"leo_ast::statement::definition"],[2533,"leo_ast::statement::definition::declaration_type"],[2560,"leo_ast::statement::expression"],[2592,"leo_ast::statement::iteration"],[2631,"leo_ast::statement::return_"],[2664,"leo_ast::struct"],[2700,"leo_ast::struct::member"],[2735,"leo_ast::types"],[2741,"leo_ast::types::array"],[2773,"leo_ast::types::core_constant"],[2796,"leo_ast::types::integer_type"],[2834,"leo_ast::types::mapping"],[2862,"leo_ast::types::tuple"],[2892,"leo_ast::types::type_"],[2935,"leo_ast::value"],[3007,"core::fmt"],[3008,"core::fmt"],[3009,"leo_errors::errors"],[3010,"serde_json::value"],[3011,"alloc::string"],[3012,"core::result"],[3013,"core::any"],[3014,"serde::de"],[3015,"serde::ser"],[3016,"leo_span::span"],[3017,"core::hash"],[3018,"leo_span::symbol"],[3019,"alloc::vec"],[3020,"indexmap::map"],[3021,"core::option"]],"d":["The abstract syntax tree (AST) for a Leo program.","","","Returns a reference to the inner program AST …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Deserializes the JSON string into a ast from a file.","Deserializes the JSON string into a ast.","","","","","Calls <code>U::from(self)</code>.","","","Creates a new AST from a given program tree.","Helper function to normalize AST JSON into a form …","This module contains both a Reducer and Visitor design …","A Leo program consists of import statements and program …","Helper function to recursively filter keys from AST JSON","","","","Serializes the ast into a JSON file.","Serializes the ast into a JSON value and removes keys from …","Serializes the ast into a JSON string.","","","","","","","","An array access expression, e.g., <code>foo[index]</code>.","An access expression to an struct constant., e.g. <code>u8::MAX</code>.","An access expression to an associated function in a …","A struct member access expression <code>inner.name</code> to some …","A tuple access expression, e.g., <code>tuple.index</code>.","The arguments passed to the function <code>name</code>.","An expression evaluating to some array type, e.g., …","","","","The ID of the node.","The ID of the node.","The ID of the node.","The ID of the node.","The ID of the node.","The index to access in the array expression. E.g., <code>0</code> for …","The index to access in the tuple expression. E.g., <code>0</code> for …","The inner struct that is being accessed.","","The struct constant that is being accessed.","The static struct member function that is being accessed.","The name of the struct member to access.","The span for the entire expression <code>foo[index]</code>.","The span for the entire expression <code>Foo::bar()</code>.","The span for the entire expression <code>Foo::bar()</code>.","The span covering all of <code>inner.name</code>.","The span for the entire expression <code>tuple.index</code>.","An expression evaluating to some tuple type, e.g., <code>(5, 2)</code>.","","The inner struct type.","The inner struct type.","An array access expression, e.g., <code>foo[index]</code>.","An expression evaluating to some array type, e.g., …","","","","","","","","","","","","","","","","Returns the argument unchanged.","","The ID of the node.","The index to access in the array expression. E.g., <code>0</code> for …","","Calls <code>U::from(self)</code>.","","","","","The span for the entire expression <code>foo[index]</code>.","","","","","","An access expression to an struct constant., e.g. <code>u8::MAX</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","The ID of the node.","","Calls <code>U::from(self)</code>.","The struct constant that is being accessed.","","","","","The span for the entire expression <code>Foo::bar()</code>.","","","","","The inner struct type.","","An access expression to an associated function in a …","The arguments passed to the function <code>name</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","The ID of the node.","","Calls <code>U::from(self)</code>.","The static struct member function that is being accessed.","","","","","The span for the entire expression <code>Foo::bar()</code>.","","","","","The inner struct type.","","A struct member access expression <code>inner.name</code> to some …","","","","","","","","","","","","","","","","Returns the argument unchanged.","","The ID of the node.","","The inner struct that is being accessed.","Calls <code>U::from(self)</code>.","The name of the struct member to access.","","","","","The span covering all of <code>inner.name</code>.","","","","","","A tuple access expression, e.g., <code>tuple.index</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","The ID of the node.","The index to access in the tuple expression. E.g., <code>0</code> for …","","Calls <code>U::from(self)</code>.","","","","","The span for the entire expression <code>tuple.index</code>.","","","","","An expression evaluating to some tuple type, e.g., <code>(5, 2)</code>.","","","","","","","","An identifier in a program.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","The ID of the node.","","Calls <code>U::from(self)</code>.","Check if the Identifier name matches the other name.","The symbol that the user wrote, e.g., <code>foo</code>.","Constructs a new identifier with <code>name</code> and <code>id</code> and a default …","","","","","A span locating where the identifier occurred in the …","","","","","","","","A node in the AST.","A node ID.","Returns the ID of the node.","Sets the ID of the node.","Sets the span of the node.","Returns the span of the node.","A counter that produces sequentially increasing <code>NodeID</code>s.","Contains the actual data for <code>Handler</code>. Modeled this way to …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","The inner counter. <code>RefCell</code> is used here to avoid <code>&amp;mut</code> all …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns a new <code>NodeCounter</code> with the given <code>NodeID</code> as the …","Returns a new <code>NodeCounter</code> with the given <code>NodeID</code> as the …","The next <code>NodeID</code>.","Returns the next <code>NodeID</code> and increments the internal state.","Returns the next <code>NodeID</code> and increments the internal state.","","","","","","","","","A number string guaranteed to be non-negative.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Returns <code>true</code> if this number is zero.","","Returns the string representation of the non-negative …","The string representation of the non-negative number.","","","","","","Returns the numeric value of the non-negative number.","The numeric value of the non-negative number.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","Absolute value checking for overflow, i.e. <code>.abs()</code>.","Absolute value wrapping around at the boundary of the …","A struct access expression, e.g. <code>Foo.bar</code>.","An access expressions, extracting a smaller part out of a …","Addition, i.e. <code>+</code>, <code>.add()</code>.","Wrapping addition, i.e. <code>.add_wrapped()</code>.","An address literal, e.g., …","Logical AND, i.e. <code>&amp;&amp;</code>.","An <code>array[index]</code> expression.","An array expression, e.g., <code>[true, false, true, false]</code>.","An array expression, e.g., <code>[true, false, true, false]</code>.","Access to an associated variable of a struct e.g <code>u8::MAX</code>.","Access to an associated function of a struct e.g …","A binary expression, e.g., <code>42 + 24</code>.","A binary expression <code>left op right</code> of two operands …","A binary operator.","Bitwise AND, i.e. <code>&amp;</code>, <code>.and()</code>.","Bitwise OR, i.e. <code>|</code>, <code>.or()</code>.","A boolean literal, either <code>true</code> or <code>false</code>.","A call expression, e.g., <code>my_fun(args)</code>.","A function call expression, e.g.<code>foo(args)</code> or <code>Foo::bar(args)</code>…","A cast expression, e.g., <code>42u32 as u8</code>.","A cast expression, e.g. <code>42u8 as u16</code>.","Division, i.e. <code>/</code>, <code>.div()</code>.","Wrapping division, i.e. <code>.div_wrapped()</code>.","Double operation, i.e. <code>.double()</code>.","Equality relation, i.e. <code>==</code>, <code>.eq()</code>.","An expression of type “error”. Will result in a …","Represents a syntactically invalid expression.","Expression that evaluates to a value.","A field literal, e.g., <code>42field</code>. A signed number followed …","A group literal, either product or affine. For example, …","Greater-than relation, i.e. <code>&gt;</code>, <code>.gt()</code>.","Greater-or-equal relation, i.e. <code>&gt;=</code>, <code>.gte()</code>.","An identifier.","An integer literal, e.g., <code>42</code>.","Multiplicative inverse, i.e. <code>.inv()</code>.","A literal.","A literal expression.","Lesser-than relation, i.e. <code>&lt;</code>, <code>.lt()</code>.","Lesser-or-equal relation, i.e. <code>&lt;=</code>, <code>.lte()</code>.","An expression accessing a field in a structure, e.g., …","Arithmetic modulo, i.e. <code>.mod()</code>","Multiplication, i.e. <code>*</code>, <code>.mul()</code>.","Wrapping multiplication, i.e. <code>.mul_wrapped()</code>.","Boolean NAND, i.e. <code>.nand()</code>.","Negate operation, i.e. <code>.neg()</code>.","In-equality relation, i.e. <code>!=</code>, <code>.neq()</code>.","Boolean NOR, i.e. <code>.nor()</code>.","Bitwise NOT, i.e. <code>!</code>, <code>.not()</code>.","Logical OR, i.e. <code>||</code>.","Exponentiation, i.e. <code>**</code> in <code>a ** b</code>, <code>.pow()</code>.","Wrapping exponentiation, i.e. <code>.pow_wrapped()</code>.","Remainder, i.e. <code>%</code>, <code>.rem()</code>.","Wrapping remainder, i.e. <code>.rem_wrapped()</code>.","A scalar literal, e.g. <code>1scalar</code>. An unsigned number …","Shift left operation, i.e. <code>&lt;&lt;</code>, <code>.shl()</code>.","Wrapping shift left operation, i.e. <code>.shl_wrapped()</code>.","Shift right operation, i.e. &gt;&gt;, <code>.shr()</code>.","Wrapping shift right operation, i.e. <code>.shr_wrapped()</code>.","Square operation, i.e. <code>.square()</code>.","Square root operation, i.e. <code>.sqrt()</code>.","A string literal, e.g., <code>&quot;foobar&quot;</code>.","An expression constructing a struct like …","A struct initialization expression, e.g., …","An initializer for a single field / variable of a struct …","Subtraction, i.e. <code>-</code>, <code>.sub()</code>.","Wrapped subtraction, i.e. <code>.sub_wrapped()</code>.","A ternary conditional expression <code>cond ? if_expr : else_expr</code>…","A ternary conditional expression, that is, …","Converts a group element to its x-coordinate, i.e. …","Converts a group element to its y-coordinate, i.e. …","Access to a tuple field using its position, e.g., <code>tuple.1</code>.","A tuple expression e.g., <code>(foo, 42, true)</code>.","A tuple expression, e.g., <code>(foo, false, 42)</code>.","An unary expression.","An unary expression applying an operator to an inner …","A unary operator for a unary expression.","A unit expression e.g. <code>()</code>","Represents a unit expression.","Bitwise XOR, i.e. <code>.xor()</code>.","","Expressions for the arguments passed to the functions …","","","","","","","","","The condition determining which branch to pick.","","","","","The elements of the array.","The elements of the tuple. In the example above, it would …","","","","","","","The expression to be casted, e.g.<code>42u8</code> in <code>42u8 as u16</code>.","The expression to initialize the field with. When <code>None</code>, a …","The name of the external program call, e.g.<code>bar</code> in <code>bar.leo</code>.","","","Returns the argument unchanged.","An expression evaluating to a callable function, either a …","","The ID of the node.","The ID of the expression.","The ID of the node.","The ID of the node.","The ID of the node.","The ID of the node.","The ID of the node.","The ID of the node.","The ID of the node.","The ID of the node.","The ID of the node.","The name of the field / variable to be initialized.","The branch the expression evaluates to if <code>condition</code> …","The branch the expression evaluates to if <code>condition</code> …","","Calls <code>U::from(self)</code>.","The left operand of the expression.","","Initializer expressions for each of the fields in the …","The name of the structure type to initialize.","The operand defining the meaning of the resulting binary …","The unary operator to apply to <code>inner</code>.","The inner expression <code>op</code> is applied to.","The right operand of the expression.","","","","","The span from <code>[</code> to <code>]</code>.","The span from <code>left</code> to <code>right</code>.","Span of the entire call <code>function(arguments)</code>.","Span of the entire cast <code>42u8 as u16</code>.","The span of the node.","A span from <code>name</code> to <code>}</code>.","The span of the invalid expression.","The span from <code>condition</code> to <code>if_false</code>.","The span from <code>(</code> to <code>)</code>.","The span covering <code>op inner</code>.","The span of the unit expression.","","","","","","","","The type to be casted to, e.g. <code>u16</code> in <code>42u8 as u16</code>.","","","","An access expressions, extracting a smaller part out of a …","An <code>array[index]</code> expression.","Access to an associated variable of a struct e.g <code>u8::MAX</code>.","Access to an associated function of a struct e.g …","An expression accessing a field in a structure, e.g., …","Access to a tuple field using its position, e.g., <code>tuple.1</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","An array expression, e.g., <code>[true, false, true, false]</code>.","","","","","","","","","The elements of the array.","","","","","","","","Returns the argument unchanged.","","The ID of the node.","","Calls <code>U::from(self)</code>.","","","","","The span from <code>[</code> to <code>]</code>.","","","","","","Addition, i.e. <code>+</code>, <code>.add()</code>.","Wrapping addition, i.e. <code>.add_wrapped()</code>.","Logical AND, i.e. <code>&amp;&amp;</code>.","A binary expression <code>left op right</code> of two operands …","A binary operator.","Bitwise AND, i.e. <code>&amp;</code>, <code>.and()</code>.","Bitwise OR, i.e. <code>|</code>, <code>.or()</code>.","Division, i.e. <code>/</code>, <code>.div()</code>.","Wrapping division, i.e. <code>.div_wrapped()</code>.","Equality relation, i.e. <code>==</code>, <code>.eq()</code>.","Greater-than relation, i.e. <code>&gt;</code>, <code>.gt()</code>.","Greater-or-equal relation, i.e. <code>&gt;=</code>, <code>.gte()</code>.","Lesser-than relation, i.e. <code>&lt;</code>, <code>.lt()</code>.","Lesser-or-equal relation, i.e. <code>&lt;=</code>, <code>.lte()</code>.","Arithmetic modulo, i.e. <code>.mod()</code>","Multiplication, i.e. <code>*</code>, <code>.mul()</code>.","Wrapping multiplication, i.e. <code>.mul_wrapped()</code>.","Boolean NAND, i.e. <code>.nand()</code>.","In-equality relation, i.e. <code>!=</code>, <code>.neq()</code>.","Boolean NOR, i.e. <code>.nor()</code>.","Logical OR, i.e. <code>||</code>.","Exponentiation, i.e. <code>**</code> in <code>a ** b</code>, <code>.pow()</code>.","Wrapping exponentiation, i.e. <code>.pow_wrapped()</code>.","Remainder, i.e. <code>%</code>, <code>.rem()</code>.","Wrapping remainder, i.e. <code>.rem_wrapped()</code>.","Shift left operation, i.e. <code>&lt;&lt;</code>, <code>.shl()</code>.","Wrapping shift left operation, i.e. <code>.shl_wrapped()</code>.","Shift right operation, i.e. &gt;&gt;, <code>.shr()</code>.","Wrapping shift right operation, i.e. <code>.shr_wrapped()</code>.","Subtraction, i.e. <code>-</code>, <code>.sub()</code>.","Wrapped subtraction, i.e. <code>.sub_wrapped()</code>.","Bitwise XOR, i.e. <code>.xor()</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns a <code>BinaryOperation</code> from the given <code>Symbol</code>. This is …","","The ID of the expression.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The left operand of the expression.","The operand defining the meaning of the resulting binary …","The right operand of the expression.","","","","","","The span from <code>left</code> to <code>right</code>.","","","","","","","","","","","A function call expression, e.g.<code>foo(args)</code> or <code>Foo::bar(args)</code>…","Expressions for the arguments passed to the functions …","","","","","","","","","","","","","","The name of the external program call, e.g.<code>bar</code> in <code>bar.leo</code>.","","","Returns the argument unchanged.","An expression evaluating to a callable function, either a …","","The ID of the node.","","Calls <code>U::from(self)</code>.","","","","","Span of the entire call <code>function(arguments)</code>.","","","","","","A cast expression, e.g. <code>42u8 as u16</code>.","","","","","","","","","","","","","","The expression to be casted, e.g.<code>42u8</code> in <code>42u8 as u16</code>.","","","Returns the argument unchanged.","","The ID of the node.","","Calls <code>U::from(self)</code>.","","","","","Span of the entire cast <code>42u8 as u16</code>.","","","","","The type to be casted to, e.g. <code>u16</code> in <code>42u8 as u16</code>.","","Represents a syntactically invalid expression.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","The ID of the node.","","Calls <code>U::from(self)</code>.","","","","","The span of the invalid expression.","","","","","","An address literal, e.g., …","A boolean literal, either <code>true</code> or <code>false</code>.","A field literal, e.g., <code>42field</code>. A signed number followed …","A group literal, either product or affine. For example, …","An integer literal, e.g., <code>42</code>.","A literal.","A scalar literal, e.g. <code>1scalar</code>. An unsigned number …","A string literal, e.g., <code>&quot;foobar&quot;</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","A struct initialization expression, e.g., …","An initializer for a single field / variable of a struct …","","","","","Returns true if the record has all required fields and …","","","","","","","","","","","","","","","","","","","","","","","The expression to initialize the field with. When <code>None</code>, a …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","The ID of the node.","The ID of the node.","The name of the field / variable to be initialized.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Initializer expressions for each of the fields in the …","The name of the structure type to initialize.","","","","","","","","","The span of the node.","A span from <code>name</code> to <code>}</code>.","","","Returns the struct as a record interface with visibility.","","","","","","","","","A ternary conditional expression, that is, …","","","","","The condition determining which branch to pick.","","","","","","","","","","","","Returns the argument unchanged.","","The ID of the node.","The branch the expression evaluates to if <code>condition</code> …","The branch the expression evaluates to if <code>condition</code> …","","Calls <code>U::from(self)</code>.","","","","","The span from <code>condition</code> to <code>if_false</code>.","","","","","","A tuple expression, e.g., <code>(foo, false, 42)</code>.","","","","","","","","","The elements of the tuple. In the example above, it would …","","","","","","","","Returns the argument unchanged.","","The ID of the node.","","Calls <code>U::from(self)</code>.","","","","","The span from <code>(</code> to <code>)</code>.","","","","","","Absolute value checking for overflow, i.e. <code>.abs()</code>.","Absolute value wrapping around at the boundary of the …","Double operation, i.e. <code>.double()</code>.","Multiplicative inverse, i.e. <code>.inv()</code>.","Negate operation, i.e. <code>.neg()</code>.","Bitwise NOT, i.e. <code>!</code>, <code>.not()</code>.","Square operation, i.e. <code>.square()</code>.","Square root operation, i.e. <code>.sqrt()</code>.","Converts a group element to its x-coordinate, i.e. …","Converts a group element to its y-coordinate, i.e. …","An unary expression applying an operator to an inner …","A unary operator for a unary expression.","Represents the opera.tor as a string.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns a <code>UnaryOperation</code> from the given <code>Symbol</code>.","","The ID of the node.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The unary operator to apply to <code>inner</code>.","The inner expression <code>op</code> is applied to.","","","","","","The span covering <code>op inner</code>.","","","","","","","","","","Represents a unit expression.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","The ID of the node.","","Calls <code>U::from(self)</code>.","","","","","The span of the unit expression.","","","","","","A function definition.","","Annotations on the function.","The body of the function.","","","","","","","","","","","","","","","","","An optional finalize block","","","Private formatting method used for optimizing fmt::Debug …","Returns the argument unchanged.","","The ID of the node.","The function identifier, e.g., <code>foo</code> in …","","","The function’s input parameters.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the function name is <code>main</code>.","","Returns function name.","Initialize a new function.","","The function’s output declarations.","The function’s output type.","","","","","The entire span of the function definition.","","","","","","","Is this function a transition, inlined, or a regular …","An annotation, e.g. @program.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","The ID of the node.","The name of the annotation.","","Calls <code>U::from(self)</code>.","","","","","A span locating where the annotation occurred in the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A core instruction that maps directly to an AVM bytecode …eturns the argument unchanged.","Returns a <code>CoreFunction</code> from the given module and method …","","Calls <code>U::from(self)</code>.","Returns whether or not this function is finalize command.","Returns the number of arguments required by the …","","","","","A function output from an external program with type …","","","","","","","","","","","","","","","","Returns the argument unchanged.","","The ID of the node.","The name the parameter is accessible as in the function’…","","Calls <code>U::from(self)</code>.","The name of the external program.","The name of the external record type.","","","","","The parameters span from any annotations to its type.","","","","","","","A finalize block.","The body of the function.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","The ID of the node.","The finalize identifier.","","The finalize block’s input parameters.","Calls <code>U::from(self)</code>.","Create a new finalize block.","The finalize blocks’s output declaration.","The finalize block’s output type.","","","","","The entire span of the finalize block.","","","","","","","A function parameter.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","The ID of the node.","","The name the parameter is accessible as in the function’…","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","The mode of the function parameter.","","","","","","","","","The parameters span from any annotations to its type.","","","","","","","","","","What’s the parameter’s type?","","","","The mode associated with a type.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","A function output.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","The ID of the node.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","The mode of the function output.","","","","","","","","","The parameters span from any annotations to its type.","","","","","","","","","","The type of the function output.","","","","","","Functions are always one of three variants. A transition …","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","A coordinate in a affine group literal.","Recovery with an inferred value.","A number, e.g., <code>42</code>.","A sign high recovery, i.e. <code>+</code>.","A sign low recovery, i.e., <code>-</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","A group literal.","An affine group literal, e.g., <code>(42, 24)group</code>.","Product group literal, e.g., <code>42group</code>.","An affine group literal with (x, y) coordinates.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","The ID of the node.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","The span from <code>(</code> to <code>)</code>.","","","","","","","","","","The left component of the type, e.g., <code>42</code> in the case above.","The right component of the type, e.g., <code>24</code> in the case …","","","","","","","","","A single definition inside a section in a state or an …","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","A raw unprocessed input or state file data. Used for …","Input data which includes <code>ProgramInput</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns all values of the input AST for execution with …","","","","Serializes the input into a JSON file.","Serializes the <code>Input</code> into a JSON value and removes keys …","Serializes the ast into a JSON string.","Serializes the <code>Input</code> into a JSON Value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","Processed Program input.","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","A single section in an input or a state file. An example …","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","A mapping declaration, e.g …","","","","","","","","","","","","","","","","Returns the argument unchanged.","","The ID of the node.","The name of the mapping.","","Calls <code>U::from(self)</code>.","The type of the key.","","","","","The entire span of the mapping declaration.","","","","","","The type of the value.","This module contains a Consumer trait for the AST. …","This module contains a Reconstructor trait for the AST. It …","This module contains Visitor trait implementations for the …","A Consumer trait for expressions in the AST.","A Consumer trait for functions in the AST.","A Consumer trait for imported programs in the AST.","A Consumer trait for mappings in the AST.","","","","","","","","","A Consumer trait for the program represented by the AST.","A Consumer trait for program scopes in the AST.","A Consumer trait for statements in the AST.","A Consumer trait for structs in the AST.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A Reconstructor trait for expressions in the AST.","A Reconstructor trait for the program represented by the …","A Reconstructor trait for statements in the AST.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A Visitor trait for expressions in the AST.","","A Visitor trait for the program represented by the AST.","A Visitor trait for statements in the AST.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Stores the Leo program abstract syntax tree.","","","","","Constructs an empty program node.","","","","","","","","","","","","Returns the argument unchanged.","A map from import names to import definitions.","","Calls <code>U::from(self)</code>.","","A Leo program scope consists of struct, function, and …","A map from program names to program scopes.","","","","","","","An identifier for a program that is eventually deployed to …","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","The name of the program.","The network associated with the program.","","","","","","","Stores the Leo program scope abstract syntax tree.","","","","","A vector of const definitions","","","","","","","","","","","","Returns the argument unchanged.","A vector of function definitions.","","Calls <code>U::from(self)</code>.","A vector of mapping definitions.","The program id of the program scope.","","The span associated with the program scope.","A vector of struct definitions.","","","","","","An assert statement.","An assignment statement.","A block statement.","An <code>if</code> statement.","A console logging statement.","A binding from identifier to constant value.","A binding or set of bindings / variables to declare.","An expression statement","A <code>for</code> statement.","A return statement <code>return expr;</code>.","Program statement that defines some action (or expression) …","","","","","","","","","","","","","","","","Returns a dummy statement made from an empty block <code>{}</code>.","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","A <code>assert(expr)</code> variant, asserting that the expression …","A <code>assert_eq(expr1, expr2)</code> variant, asserting that the …","A <code>assert_neq(expr1, expr2)</code> variant, asserting that the …","An assert statement, <code>assert(&lt;expr&gt;)</code>, <code>assert_eq(&lt;expr&gt;)</code> or …","A variant of an assert statement.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","The ID of the node.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","The span, excluding the semicolon.","","","","","","","","","","The variant of the assert statement.","An assignment statement, <code>assignee = value</code>. Note that there …","","","","","","","","","","","","","","","","Returns the argument unchanged.","","The ID of the node.","","Calls <code>U::from(self)</code>.","The place to assign to. Note that <code>place</code> can either be an …","","","","","The span, excluding the semicolon.","","","","","","The value to assign to the <code>assignee</code>.","A block <code>{ [stmt]* }</code> consisting of a list of statements to …","","","","","","","","","","","","","","","","Returns the argument unchanged.","","The ID of the node.","","Calls <code>U::from(self)</code>.","","","","","The span from <code>{</code> to <code>}</code>.","The list of statements to execute.","","","","","","An <code>if condition block (else next)?</code> statement.","","","","","The <code>bool</code>-typed condition deciding what to evaluate.","","","","","","","","","","","","Returns the argument unchanged.","","The ID of the node.","","Calls <code>U::from(self)</code>.","The statement, if any, to evaluate when <code>condition</code> yields …","","","","","The span from <code>if</code> to <code>next</code> or to <code>block</code>.","The block to evaluate in case <code>condition</code> yields <code>true</code>.","","","","","","","","A <code>console.assert(expr)</code> call to invoke, asserting that the …","A <code>console.assert_eq(expr1, expr2)</code> call to invoke, …","A <code>console.assert_neq(expr1, expr2)</code> call to invoke, …","A console logging function to invoke.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","A console logging statement like <code>console.log(...);</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","The logging function to run.","","The ID of the node.","","Calls <code>U::from(self)</code>.","","","","","The span excluding the semicolon.","","","","","","A constant declaration statement.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","The ID of the node.","","Calls <code>U::from(self)</code>.","The place to assign to. As opposed to <code>DefinitionStatement</code>, …","","","","","The span excluding the semicolon.","","","","","The type of the binding, if specified, or inferred …","","An initializer value for the binding.","This is a <code>const</code> binding.","The sort of bindings to introduce, either <code>let</code> or <code>const</code>.","A <code>let</code> or <code>const</code> declaration statement.","This is a <code>let</code> binding.","","","","","","What sort of declaration is this? <code>let</code> or <code>const</code>?.","","","","","","","","","","","","Returns the argument unchanged.","","The ID of the node.","","Calls <code>U::from(self)</code>.","The bindings / variable names to declare.","","","","","The span excluding the semicolon.","","","","","The types of the bindings, if specified, or inferred …","","An initializer value for the bindings.","This is a <code>const</code> binding.","The sort of bindings to introduce, either <code>let</code> or <code>const</code>.","This is a <code>let</code> binding.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","An expression statement, <code>foo(a);</code>.","","","","","","","","","","","","","","The expression associated with the statement.","","","Returns the argument unchanged.","","The ID of the node.","","Calls <code>U::from(self)</code>.","","","","","The span.","","","","","","A bounded <code>for</code> loop statement …","The block to run on each iteration.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","The ID of the node.","Whether <code>stop</code> is inclusive or not. Signified with <code>=</code> when …","","Calls <code>U::from(self)</code>.","","","","","The span from <code>for</code> to <code>block</code>.","The start of the iteration.","The concrete value of <code>start</code>.","The end of the iteration, possibly <code>inclusive</code>.","The concrete value of <code>stop</code>.","","","","","The type of the iteration.","","The binding / variable to introduce in the body <code>block</code>.","A return statement <code>return expression;</code>.","","","","","","","","","","","","","","The expression to return to the function caller.","Arguments to the finalize block.","","","Returns the argument unchanged.","","The ID of the node.","","Calls <code>U::from(self)</code>.","","","","","The span of <code>return expression</code> excluding the semicolon.","","","","","","A struct type definition, e.g., …","","","","","","","","","","","","","","","","Returns the argument unchanged.","","The ID of the node.","The name of the type in the type system in this module.","","Calls <code>U::from(self)</code>.","Was this a <code>record Foo { ... }</code>? If so, it wasn’t a struct.","","The fields, constant variables, and functions of this …","Returns the struct name as a Symbol.","","","","","The entire span of the struct definition.","","","","","","A member of a structured data type, e.g <code>foobar: u8</code> or …","","","","","","","","","","","","","","","","Returns the argument unchanged.","","The ID of the node.","The identifier of the member.","","Calls <code>U::from(self)</code>.","The mode of the member.","Returns the name of the struct member without span.","","","","","The span of the member.","","","","","The type of the member.","","","","","","","","An array type.","Returns the base element type of the array.","","","","","","","","","Returns the element type of the array.","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Returns the length of the array.","","Creates a new array type.","","","","","","","A core constant that maps directly to an AVM bytecode …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns a <code>CoreConstant</code> from the given type and constant …","","Calls <code>U::from(self)</code>.","","Returns the <code>Type</code> of the <code>CoreConstant</code>.","","","","","","","","","Explicit integer type.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Is the integer type a signed one?","","Returns the symbol for the integer type.","","","","","","A mapping type of a key and value type.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","A type list of at least two types.","","","","","","","","","Returns the elements of the tuple type.","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Returns the length of the tuple type.","Creates a new tuple type.","","","","","","","The <code>address</code> type.","The array type.","The <code>bool</code> type.","Placeholder for a type that could not be resolved or was …","The <code>field</code> type.","The <code>group</code> type.","A reference to a built in type.","An integer type.","A mapping type.","The <code>scalar</code> type.","The <code>signature</code> type.","The <code>string</code> type.","A static tuple of at least one type.","Explicit type used for defining a variable or expression …","The <code>unit</code> type.","","","","","","","","","","Returns <code>true</code> if the self <code>Type</code> is equal to the other <code>Type</code>.","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Converts a literal to a value.","","",""],"i":[0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,0,1,0,1,1,0,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,22,16,0,0,0,16,21,22,23,24,16,24,23,0,21,22,23,16,21,22,23,24,24,0,21,22,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,0,0,0,0,0,0,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,0,0,0,0,97,97,97,97,0,0,30,31,30,31,30,31,30,31,30,30,31,30,31,30,31,30,31,30,31,30,31,30,30,31,30,31,31,30,31,30,31,30,31,30,31,30,31,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,49,49,34,0,37,37,43,37,35,34,0,35,35,34,0,0,37,37,43,34,0,34,0,37,37,49,37,34,0,0,43,43,37,37,34,43,49,0,34,37,37,35,37,37,37,37,49,37,37,49,37,37,37,37,37,43,37,37,37,37,49,49,43,34,0,0,37,37,34,0,49,49,35,34,0,34,0,0,34,0,37,0,40,0,0,34,34,0,0,34,34,47,34,34,34,34,36,48,34,34,34,34,34,0,41,46,40,34,34,34,40,34,36,38,40,41,46,45,42,47,48,50,51,46,47,47,34,34,38,0,45,45,38,50,50,38,34,34,34,34,36,38,40,41,46,45,42,47,48,50,51,0,0,34,34,34,34,0,41,34,0,0,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,37,37,37,0,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,37,37,37,38,38,38,38,37,37,38,38,37,38,37,38,38,37,38,37,38,38,38,38,37,38,38,38,38,38,37,38,37,38,37,38,37,38,37,38,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,43,43,43,43,43,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,0,0,46,45,46,45,45,46,45,46,45,46,45,46,45,46,45,46,45,46,45,46,46,46,46,45,45,45,45,46,46,46,45,45,46,45,46,45,46,45,46,46,45,46,45,45,45,46,45,46,45,46,45,46,45,46,45,46,45,45,46,45,46,45,46,45,46,45,0,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,49,49,49,49,49,49,49,49,49,49,0,0,49,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,50,49,49,49,49,50,50,50,50,49,50,50,49,50,49,50,50,49,50,49,50,50,50,49,50,50,50,50,50,49,50,50,49,50,49,50,49,50,0,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,0,0,52,52,52,52,52,52,0,52,52,52,52,52,52,52,52,52,0,0,52,52,52,52,52,52,52,52,52,0,52,52,52,0,52,52,0,52,52,52,52,52,52,52,52,52,52,52,52,0,52,0,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,0,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,0,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,0,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,55,0,0,55,55,62,55,62,55,62,55,62,55,62,55,62,55,62,55,62,55,62,55,55,55,55,62,62,62,62,55,55,62,62,62,55,62,55,62,62,55,62,55,62,55,62,55,62,55,62,55,62,55,62,55,62,62,55,62,55,62,55,62,55,62,55,62,55,62,63,0,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,56,0,56,0,56,64,56,64,56,64,56,64,56,64,56,64,56,64,56,64,56,64,56,56,56,56,64,64,64,64,56,56,64,64,56,64,56,64,64,56,64,56,64,56,64,56,64,56,64,56,64,56,64,64,56,64,56,64,56,64,56,64,56,64,56,64,54,54,54,0,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,0,0,0,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,0,0,66,66,66,67,66,67,66,67,66,67,66,67,66,67,66,67,66,67,66,67,66,66,66,66,67,67,67,67,66,66,67,66,67,66,67,66,67,66,67,66,67,66,66,66,67,66,67,66,66,67,66,67,66,67,67,67,0,98,0,98,0,0,0,0,0,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,0,0,69,70,69,70,69,70,69,70,69,69,70,69,70,69,70,69,70,69,70,69,70,69,70,69,70,69,70,70,69,70,70,70,69,70,69,70,69,70,69,70,69,70,72,72,72,72,0,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,0,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,0,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,0,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,0,0,0,0,0,0,0,99,100,101,102,103,104,105,106,0,0,0,0,99,99,100,100,99,100,99,99,100,100,100,100,99,99,100,101,99,103,100,99,104,106,105,100,100,102,99,99,99,99,99,107,0,0,0,107,107,107,108,108,107,107,107,108,107,107,108,108,108,108,107,107,108,109,107,109,108,107,109,107,109,109,108,108,109,107,107,107,107,107,107,110,0,110,0,0,110,110,111,111,110,111,110,110,111,111,111,111,110,110,111,112,110,112,111,110,112,112,112,111,111,112,110,110,110,110,110,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,2,2,2,2,2,2,2,0,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,0,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,86,86,86,86,86,86,86,86,86,86,0,0,0,0,86,86,86,86,0,0,0,0,86,86,86,86,86,86,86,86,86,86,0,86,86,86,86,86,86,0,0,86,86,86,86,86,86,86,86,86,88,88,88,0,0,88,76,88,76,88,76,88,76,88,76,88,76,88,76,88,76,88,76,88,88,88,88,76,76,76,76,88,76,76,88,76,76,76,88,76,88,76,88,76,76,76,76,76,88,76,76,88,76,88,76,88,76,76,0,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,0,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,0,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,0,0,89,89,89,0,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,0,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,0,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,90,0,0,90,81,81,81,81,0,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,90,0,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,0,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,0,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,0,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,0,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,0,71,71,71,71,71,71,71,71,71,71,71,71,0,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,0,0,0,0,0,0,0,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,0,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,94,94,94,94,94,0,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,0,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,0,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,61,61,61,61,61,61,61,61,61,61,61,61,61,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44],"f":[0,0,[1,2],[1,2],0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],3,[],[]],0,[[],1],[4,-1,[]],[4,-1,[]],[4,3],[[1,1],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],0,[[1,6],7],[-1,-1,[]],[8,[[9,[1]]]],[10,[[9,[1]]]],0,0,[[],4],0,[-1,-2,[],[]],[1,2],0,[2,1],[11,11],0,0,[[11,10],11],0,0,0,[[1,8,10],[[9,[3]]]],[[1,8,10,[12,[10]]],[[9,[3]]]],[1,[[9,[13]]]],[1,[[9,[11]]]],[-1,-2,[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[16,16],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[16]]],17],[4,3],[[16,16],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[16,6],7],[[16,6],7],[-1,-1,[]],[16,18],0,0,[[],4],[-1,-2,[],[]],[[16,-1],14,19],[[16,18],3],[[16,20],3],[16,20],0,[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[21,21],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[21]]],17],[4,3],[[21,21],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[21,6],7],[[21,6],7],[-1,-1,[]],[21,18],0,[[],4],[-1,-2,[],[]],0,[[21,-1],14,19],[[21,18],3],[[21,20],3],[21,20],0,[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],0,[-1,15,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[22,22],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[22]]],17],[4,3],[[22,22],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[22,6],7],[[22,6],7],[-1,-1,[]],[22,18],0,[[],4],[-1,-2,[],[]],0,[[22,-1],14,19],[[22,18],3],[[22,20],3],[22,20],0,[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],0,[-1,15,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[23,23],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[23]]],17],[4,3],[[23,23],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[23,6],7],[[23,6],7],[-1,-1,[]],[23,18],0,[[],4],0,[-1,-2,[],[]],0,[[23,-1],14,19],[[23,18],3],[[23,20],3],[23,20],0,[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[24,24],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[24]]],17],[4,3],[[24,24],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[24,6],7],[[24,6],7],[-1,-1,[]],[24,18],0,0,[[],4],[-1,-2,[],[]],[[24,-1],14,19],[[24,18],3],[[24,20],3],[24,20],0,[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],0,[-1,15,[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[25,25],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[-1,[[9,[25]]],17],[4,3],[[25,25],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[25,6],7],[[25,6],7],[-1,-1,[]],[[25,-1],3,26],[25,18],0,[[],4],[-1,-2,[],[]],[[25,25],5],0,[[27,18],25],[[25,-1],9,19],[[25,18],3],[[25,20],3],[25,20],0,[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[-1,[[14,[[29,[[28,[27]],2]]]]],17],[[[29,[[28,[27]],2]],-1],14,19],0,0,[-1,18,[]],[[-1,18],3,[]],[[-1,20],3,[]],[-1,20,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[30,30],[31,31],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[],30],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,3],[4,3],[[30,6],7],[[31,6],7],[-1,-1,[]],[-1,-1,[]],[[],4],[[],4],0,[-1,-2,[],[]],[-1,-2,[],[]],[18,30],[18,31],0,[30,18],[31,18],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[32,32],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[32]]],17],[4,3],[[32,32],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[32,6],7],[[32,6],7],[4,32],[13,32],[-1,-1,[]],[[32,-1],3,26],[[],4],[-1,-2,[],[]],[32,5],[[32,-1],14,19],[32,10],0,[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[32,4],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[33,33],[[-1,-2],3,[],[]],[[],33],[4,-1,[]],[4,-1,[]],[-1,[[14,[33]]],17],[4,3],[[33,33],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[33,6],7],[[33,6],7],[-1,-1,[]],[[],4],[-1,-2,[],[]],[13,33],[[33,-1],14,19],[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,[34,34],[[-1,-2],3,[],[]],0,[4,-1,[]],[4,-1,[]],[-1,[[14,[34]]],17],[4,3],0,0,[[34,34],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],0,0,0,0,[[34,6],7],[[34,6],7],[-1,-1,[]],0,[34,18],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],4],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[[34,-1],14,19],[[34,18],3],[[34,20],3],[34,20],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],0,0,[-1,15,[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[35,35],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[35]]],17],[4,3],[[35,35],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[35,6],7],[[35,6],7],[-1,-1,[]],[35,18],[[],4],[-1,-2,[],[]],[[35,-1],14,19],[[35,18],3],[[35,20],3],[35,20],[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[36,36],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[36]]],17],[4,3],0,[[36,36],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[36,6],7],[[36,6],7],[-1,-1,[]],[36,18],0,[[],4],[-1,-2,[],[]],[[36,-1],14,19],[[36,18],3],[[36,20],3],[36,20],0,[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[37,37],[38,38],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[37]]],17],[-1,[[14,[38]]],17],[4,3],[4,3],[[37,37],5],[[38,38],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[37,6],7],[[37,6],7],[[38,6],7],[[38,6],7],[-1,-1,[]],[-1,-1,[]],[27,[[39,[37]]]],[38,18],0,[[],4],[[],4],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[37,-1],14,19],[[38,-1],14,19],[[38,18],3],[[38,20],3],[38,20],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,13,[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[40,40],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[40]]],17],[4,3],[[40,40],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],0,[[40,6],7],[[40,6],7],[-1,-1,[]],0,[40,18],0,[[],4],[-1,-2,[],[]],[[40,-1],14,19],[[40,18],3],[[40,20],3],[40,20],0,[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[41,41],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[41]]],17],[4,3],[[41,41],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],0,[[41,6],7],[[41,6],7],[-1,-1,[]],[41,18],0,[[],4],[-1,-2,[],[]],[[41,-1],14,19],[[41,18],3],[[41,20],3],[41,20],0,[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],0,[-1,15,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[42,42],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[42]]],17],[4,3],[[42,42],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[42,6],7],[[42,6],7],[-1,-1,[]],[42,18],0,[[],4],[-1,-2,[],[]],[[42,-1],14,19],[[42,18],3],[[42,20],3],[42,20],0,[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[43,43],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[43]]],17],[4,3],[[43,43],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[43,6],7],[[43,6],7],[-1,-1,[]],[[44,18],43],[43,18],[[],4],[-1,-2,[],[]],[[43,-1],14,19],[[43,18],3],[[43,20],3],[43,20],[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[45,5],[46,46],[45,45],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[46]]],17],[-1,[[14,[45]]],17],[4,3],[4,3],[[46,46],5],[[45,45],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],0,[[46,6],7],[[46,6],7],[[45,6],7],[[45,6],7],[-1,-1,[]],[-1,-1,[]],[46,18],[45,18],0,0,0,[[],4],[[],4],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[46,-1],14,19],[[45,-1],14,19],[[46,18],3],[[45,18],3],[[46,20],3],[[45,20],3],[46,20],[45,20],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[45,13],[-1,13,[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[47,47],[[-1,-2],3,[],[]],0,[4,-1,[]],[4,-1,[]],[-1,[[14,[47]]],17],[4,3],[[47,47],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[47,6],7],[[47,6],7],[-1,-1,[]],[47,18],0,0,0,[[],4],[-1,-2,[],[]],[[47,-1],14,19],[[47,18],3],[[47,20],3],[47,20],0,[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[48,48],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[48]]],17],[4,3],0,[[48,48],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[48,6],7],[[48,6],7],[-1,-1,[]],[48,18],0,[[],4],[-1,-2,[],[]],[[48,-1],14,19],[[48,18],3],[[48,20],3],[48,20],0,[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,0,0,0,0,0,0,0,0,0,0,0,[49,10],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[49,49],[50,50],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[49]]],17],[-1,[[14,[50]]],17],[4,3],[4,3],[[49,49],5],[[50,50],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[49,6],7],[[50,6],7],[[50,6],7],[-1,-1,[]],[-1,-1,[]],[27,[[39,[49]]]],[50,18],0,[[],4],[[],4],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[49,-1],14,19],[[50,-1],14,19],[[50,18],3],[[50,20],3],[50,20],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[51,51],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[51]]],17],[4,3],[[51,51],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[51,6],7],[[51,6],7],[-1,-1,[]],[51,18],0,[[],4],[-1,-2,[],[]],[[51,-1],14,19],[[51,18],3],[[51,20],3],[51,20],0,[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[52,52],[[-1,-2],3,[],[]],0,[4,-1,[]],[4,-1,[]],[-1,[[14,[52]]],17],[4,3],[[52,52],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],0,0,0,[[52,6],7],[[52,6],7],[[52,6],7],[-1,-1,[]],[52,18],0,0,[[],4],0,0,[-1,-2,[],[]],[52,5],0,[52,27],[[[28,[53]],54,25,[28,[55]],[28,[56]],57,[39,[58]],20,18],52],0,0,0,[[52,-1],14,19],[[52,18],3],[[52,20],3],[52,20],0,[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[53,53],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[53]]],17],[4,3],[[53,53],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[53,6],7],[[53,6],7],[-1,-1,[]],[53,18],0,0,[[],4],[-1,-2,[],[]],[[53,-1],14,19],[[53,18],3],[[53,20],3],[53,20],0,[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[59,59],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[4,3],[[59,59],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[-1,-1,[]],[[27,27],[[39,[59]]]],[[],4],[-1,-2,[],[]],[59,5],[59,4],[-1,-2,[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[60,60],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[60]]],17],[4,3],[[60,60],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[60,6],7],[[60,6],7],[-1,-1,[]],[60,18],0,0,[[],4],[-1,-2,[],[]],0,0,[[60,-1],14,19],[[60,18],3],[[60,20],3],[60,20],0,[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[60,61],[-1,15,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[58,58],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[58]]],17],[4,3],[[58,58],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[58,6],7],[[58,6],7],[-1,-1,[]],[58,18],0,0,[[],4],0,[-1,-2,[],[]],[[25,[28,[55]],[28,[56]],57,20,18],58],0,0,[[58,-1],14,19],[[58,18],3],[[58,20],3],[58,20],0,[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[55,55],[62,62],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[55]]],17],[-1,[[14,[62]]],17],[4,3],[4,3],[[55,55],5],[[62,62],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[55,6],7],[[55,6],7],[[62,6],7],[[62,6],7],[[62,6],7],[-1,-1,[]],[-1,-1,[]],[55,4],[62,18],0,[55,25],0,[[],4],[[],4],[-1,-2,[],[]],[-1,-2,[],[]],[55,63],0,[[55,-1],14,19],[[62,-1],14,19],[[55,4],3],[[62,18],3],[[55,20],3],[[62,20],3],[55,20],[62,20],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,13,[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[55,61],0,[-1,15,[]],[-1,15,[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[63,63],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[63]]],17],[4,3],[[63,63],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[63,6],7],[[63,6],7],[-1,-1,[]],[[],4],[-1,-2,[],[]],[[63,-1],14,19],[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[56,56],[64,64],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[56]]],17],[-1,[[14,[64]]],17],[4,3],[4,3],[[56,56],5],[[64,64],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[56,6],7],[[56,6],7],[[64,6],7],[[64,6],7],[-1,-1,[]],[-1,-1,[]],[56,18],[64,18],0,[[],4],[[],4],[-1,-2,[],[]],[-1,-2,[],[]],[56,63],0,[[56,-1],14,19],[[64,-1],14,19],[[56,18],3],[[64,18],3],[[56,20],3],[[64,20],3],[56,20],[64,20],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,13,[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[56,61],0,[-1,15,[]],[-1,15,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[54,54],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[54]]],17],[4,3],[[54,54],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[54,6],7],[-1,-1,[]],[[],4],[-1,-2,[],[]],[[54,-1],14,19],[-1,-2,[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[65,65],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[65]]],17],[4,3],[[65,65],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[65,6],7],[[65,6],7],[-1,-1,[]],[[],4],[-1,-2,[],[]],[[65,-1],14,19],[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[66,66],[67,67],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[66]]],17],[-1,[[14,[67]]],17],[4,3],[4,3],[[66,66],5],[[67,67],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[66,6],7],[[66,6],7],[[67,6],7],[-1,-1,[]],[-1,-1,[]],[66,18],0,[[],4],[[],4],[-1,-2,[],[]],[-1,-2,[],[]],[[66,-1],14,19],[[67,-1],14,19],[[66,18],3],[[66,20],3],[66,20],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[68,68],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[68]]],17],[4,3],[[68,68],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[68,6],7],[-1,-1,[]],[[],4],[-1,-2,[],[]],0,0,[[68,-1],14,19],0,[-1,-2,[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],0,[-1,15,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[69,69],[70,70],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[],69],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[69]]],17],[-1,[[14,[70]]],17],[4,3],[4,3],[[69,6],7],[[70,6],7],[-1,-1,[]],[-1,-1,[]],[[],4],[[],4],[-1,-2,[],[]],[-1,-2,[],[]],0,[[70,10,[29,[27,71]]],[[28,[13]]]],0,[[69,-1],14,19],[[70,-1],14,19],[[70,8,10],[[9,[3]]]],[[70,8,10,[12,[10]]],[[9,[3]]]],[69,[[9,[13]]]],[70,[[9,[11]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[72,72],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[72]]],17],[4,3],[[72,72],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[72,6],7],[[72,6],7],[-1,-1,[]],[[],4],[-1,-2,[],[]],[[72,-1],14,19],[-1,-2,[],[]],[-1,13,[]],[[[3,[61,34]]],[[9,[72]]]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[73,73],[[-1,-2],3,[],[]],[[],73],[4,-1,[]],[4,-1,[]],[-1,[[14,[73]]],17],[4,3],[[73,6],7],[-1,-1,[]],[[],4],[-1,-2,[],[]],0,[[73,-1],14,19],[-1,-2,[],[]],[70,[[9,[73]]]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[74,74],[[-1,-2],3,[],[]],0,[4,-1,[]],[4,-1,[]],[-1,[[14,[74]]],17],[4,3],[[74,6],7],[-1,-1,[]],[[],4],[-1,-2,[],[]],[74,13],0,[[74,-1],14,19],0,[-1,-2,[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[75,75],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[75]]],17],[4,3],[[75,75],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[75,6],7],[[75,6],7],[-1,-1,[]],[75,18],0,0,[[],4],[-1,-2,[],[]],0,[[75,-1],14,19],[[75,18],3],[[75,20],3],[75,20],0,[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,35],[],[]],[[-1,36],[],[]],[[-1,76],[],[]],[[-1,77],[],[]],[[-1,38],[],[]],[[-1,57],[],[]],[[-1,40],[],[]],[[-1,41],[],[]],[[-1,78],[],[]],[[-1,79],[],[]],[[-1,80],[],[]],[[-1,81],[],[]],[[-1,42],[],[]],[[-1,34],[],[]],[[-1,82],[],[]],[[-1,52],[],[]],[[-1,25],[],[]],[[-1,2],[],[]],[[-1,83],[],[]],[[-1,43],[],[]],[[-1,75],[],[]],[[-1,2],[],[]],[[-1,84],[],[]],[[-1,85],[],[]],[[-1,86],[],[]],[[-1,71],[],[]],[[-1,45],[],[]],[[-1,47],[],[]],[[-1,48],[],[]],[[-1,50],[],[]],[[-1,51],[],[]],0,0,0,0,[[-1,35],[[3,[34]]],[]],[[-1,36],[[3,[34]]],[]],[[-1,16],[[3,[34]]],[]],[[-1,76],[[3,[86]]],[]],[[-1,77],[[3,[86]]],[]],[[-1,21],[[3,[34]]],[]],[[-1,22],[[3,[34]]],[]],[[-1,38],[[3,[34]]],[]],[[-1,57],[[3,[57]]],[]],[[-1,40],[[3,[34]]],[]],[[-1,41],[[3,[34]]],[]],[[-1,78],[[3,[86]]],[]],[[-1,79],[[3,[86]]],[]],[[-1,80],[[3,[86]]],[]],[[-1,81],[[3,[86]]],[]],[[-1,42],[[3,[34]]],[]],[[-1,34],[[3,[34]]],[]],[[-1,82],[[3,[86]]],[]],[[-1,52],52,[]],[[-1,25],[[3,[34]]],[]],[[-1,2],2,[]],[[-1,83],[[3,[86]]],[]],[[-1,43],[[3,[34]]],[]],[[-1,75],75,[]],[[-1,23],[[3,[34]]],[]],[[-1,2],2,[]],[[-1,84],84,[]],[[-1,85],[[3,[86]]],[]],[[-1,86],[[3,[86]]],[]],[[-1,71],71,[]],[[-1,45],[[3,[34]]],[]],[[-1,47],[[3,[34]]],[]],[[-1,48],[[3,[34]]],[]],[[-1,24],[[3,[34]]],[]],[[-1,50],[[3,[34]]],[]],[[-1,51],[[3,[34]]],[]],0,0,0,0,0,[[-1,35],[],[]],[[-1,36],[],[]],[[-1,76],3,[]],[[-1,77],3,[]],[[-1,38],[],[]],[[-1,57],3,[]],[[-1,40],[],[]],[[-1,41],[],[]],[[-1,78],3,[]],[[-1,79],3,[]],[[-1,80],3,[]],[[-1,81],3,[]],[[-1,42],[],[]],[[-1,34],[],[]],[[-1,82],3,[]],[[-1,52],3,[]],[[-1,25],[],[]],[[-1,2],3,[]],[[-1,83],3,[]],[[-1,43],[],[]],[[-1,75],3,[]],[[-1,2],3,[]],[[-1,84],3,[]],[[-1,85],3,[]],[[-1,86],3,[]],[[-1,71],3,[]],[[-1,45],[],[]],[[-1,47],[],[]],[[-1,48],[],[]],[[-1,50],[],[]],[[-1,51],[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[[-1,-2],3,[],[]],[[],2],[4,-1,[]],[4,-1,[]],[-1,[[14,[2]]],17],[4,3],[[2,2],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[2,6],7],[[2,6],7],[-1,-1,[]],0,[[],4],[-1,-2,[],[]],0,0,0,[[2,-1],14,19],[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[87,87],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[87]]],17],[4,3],[[87,87],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[87,6],7],[[87,6],7],[-1,-1,[]],[[87,-1],3,26],[[],4],[-1,-2,[],[]],0,0,[[87,-1],14,19],[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[84,84],[[-1,-2],3,[],[]],0,[4,-1,[]],[4,-1,[]],[-1,[[14,[84]]],17],[4,3],[[84,84],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[84,6],7],[[84,6],7],[-1,-1,[]],0,[[],4],[-1,-2,[],[]],0,0,[[84,-1],14,19],0,0,[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[86,86],[[-1,-2],3,[],[]],0,0,0,0,[4,-1,[]],[4,-1,[]],[-1,[[14,[86]]],17],[4,3],[[20,18],86],[[86,86],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],0,[[86,6],7],[[86,6],7],[-1,-1,[]],[86,18],[[],4],[-1,-2,[],[]],0,0,[[86,-1],14,19],[[86,18],3],[[86,20],3],[86,20],[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[88,88],[76,76],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[88]]],17],[-1,[[14,[76]]],17],[4,3],[4,3],[[88,88],5],[[76,76],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[88,6],7],[[76,6],7],[[76,6],7],[-1,-1,[]],[-1,-1,[]],[76,18],0,[[],4],[[],4],[-1,-2,[],[]],[-1,-2,[],[]],[[88,-1],14,19],[[76,-1],14,19],[[76,18],3],[[76,20],3],[76,20],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[77,77],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[77]]],17],[4,3],[[77,77],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[77,6],7],[[77,6],7],[-1,-1,[]],[77,18],0,[[],4],[-1,-2,[],[]],0,[[77,-1],14,19],[[77,18],3],[[77,20],3],[77,20],0,[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[57,57],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[57]]],17],[4,3],[[57,57],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[57,6],7],[[57,6],7],[-1,-1,[]],[57,18],0,[[],4],[-1,-2,[],[]],[[57,-1],14,19],[[57,18],3],[[57,20],3],[57,20],0,0,[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[78,78],[[-1,-2],3,[],[]],0,[4,-1,[]],[4,-1,[]],[-1,[[14,[78]]],17],[4,3],[[78,78],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[78,6],7],[[78,6],7],[-1,-1,[]],[78,18],0,[[],4],[-1,-2,[],[]],0,[[78,-1],14,19],[[78,18],3],[[78,20],3],[78,20],0,0,[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[89,89],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[89]]],17],[4,3],[[89,89],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[89,6],7],[[89,6],7],[-1,-1,[]],[[],4],[-1,-2,[],[]],[[89,-1],14,19],[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[79,79],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[79]]],17],[4,3],[[79,79],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[79,6],7],[[79,6],7],[-1,-1,[]],0,[79,18],0,[[],4],[-1,-2,[],[]],[[79,-1],14,19],[[79,18],3],[[79,20],3],[79,20],0,[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[80,80],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[80]]],17],[4,3],[[80,80],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[80,6],7],[[80,6],7],[-1,-1,[]],[80,18],0,[[],4],[-1,-2,[],[]],0,[[80,-1],14,19],[[80,18],3],[[80,20],3],[80,20],0,[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],0,[-1,15,[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[81,81],[[-1,-2],3,[],[]],0,0,[4,-1,[]],[4,-1,[]],[-1,[[14,[81]]],17],[4,3],[[81,81],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[81,6],7],[[81,6],7],[-1,-1,[]],[81,18],0,[[],4],[-1,-2,[],[]],0,[[81,-1],14,19],[[81,18],3],[[81,20],3],[81,20],0,[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],0,[-1,15,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[90,90],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[90]]],17],[4,3],[[90,90],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[90,6],7],[[90,6],7],[-1,-1,[]],[[],4],[-1,-2,[],[]],[[90,-1],14,19],[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[82,82],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[82]]],17],[4,3],[[82,82],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],0,[[82,6],7],[[82,6],7],[-1,-1,[]],[82,18],0,[[],4],[-1,-2,[],[]],[[82,-1],14,19],[[82,18],3],[[82,20],3],[82,20],0,[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[83,83],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[83]]],17],[4,3],[[83,83],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[83,6],7],[[83,6],7],[-1,-1,[]],[83,18],0,0,[[],4],[-1,-2,[],[]],[[83,-1],14,19],[[83,18],3],[[83,20],3],[83,20],0,0,0,0,0,[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],0,[-1,15,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[85,85],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[85]]],17],[4,3],[[85,85],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],0,0,[[85,6],7],[[85,6],7],[-1,-1,[]],[85,18],0,[[],4],[-1,-2,[],[]],[[85,-1],14,19],[[85,18],3],[[85,20],3],[85,20],0,[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[71,71],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[71]]],17],[4,3],[[71,71],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[71,6],7],[[71,6],7],[-1,-1,[]],[71,18],0,0,[[],4],[-1,-2,[],[]],0,0,0,[71,27],[[71,-1],14,19],[[71,18],3],[[71,20],3],[71,20],0,[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[91,91],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[91]]],17],[4,3],[[91,91],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[91,6],7],[[91,6],7],[-1,-1,[]],[91,18],0,0,[[],4],[-1,-2,[],[]],0,[91,27],[[91,-1],14,19],[[91,18],3],[[91,20],3],[91,20],0,[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],0,[-1,15,[]],0,0,0,0,0,0,0,[92,61],[-1,-2,[],[]],[-1,-2,[],[]],[92,92],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[92]]],17],[4,3],[92,61],0,[[92,92],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[92,6],7],[[92,6],7],[-1,-1,[]],[[92,-1],3,26],[[],4],[-1,-2,[],[]],[92,4],0,[[61,32],92],[[92,-1],14,19],[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[93,93],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[4,3],[[93,93],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[-1,-1,[]],[[27,27],[[39,[93]]]],[[],4],[-1,-2,[],[]],[-1,-2,[],[]],[93,61],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[94,94],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[94]]],17],[4,3],[[94,94],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[94,6],7],[[94,6],7],[-1,-1,[]],[[94,-1],3,26],[[],4],[-1,-2,[],[]],[94,5],[[94,-1],14,19],[94,27],[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[95,95],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[95]]],17],[4,3],[[95,95],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[95,6],7],[[95,6],7],[-1,-1,[]],[[95,-1],3,26],[[],4],[-1,-2,[],[]],0,[[95,-1],14,19],[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[96,96],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[96]]],17],[4,3],[96,[[12,[61]]]],0,[[96,96],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[96,6],7],[[96,6],7],[-1,-1,[]],[[96,-1],3,26],[[],4],[-1,-2,[],[]],[96,4],[[[28,[61]]],96],[[96,-1],14,19],[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[61,61],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[-1,[[14,[61]]],17],[4,3],[[61,61],5],[[61,61],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[61,6],7],[[61,6],7],[44,61],[44,61],[-1,-1,[]],[[61,-1],3,26],[[],4],[-1,-2,[],[]],[[61,-1],14,19],[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[44,20],[[9,[44]]]],[[44,20],[[9,[44]]]],[[44,44,20],[[9,[44]]]],[[44,44,20],[[9,[44]]]],[44,44],[[44,44,20],[[9,[44]]]],[[44,44,20],[[9,[44]]]],[-1,-2,[],[]],[-1,-2,[],[]],[44,44],[[-1,-2],3,[],[]],[4,-1,[]],[4,-1,[]],[[44,44,20],[[9,[44]]]],[[44,44,20],[[9,[44]]]],[4,3],[[44,44],5],[[44,44,20],[[9,[44]]]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[44,6],7],[[44,6],7],[-1,-1,[]],[[44,44,20],[[9,[44]]]],[[44,44,20],[[9,[44]]]],0,0,[[],4],[-1,-2,[],[]],[44,5],[[44,44,20],[[9,[44]]]],[[44,44,20],[[9,[44]]]],[[44,44,20],[[9,[44]]]],[[44,44,20],[[9,[44]]]],[[44,20],[[9,[44]]]],[[44,20],[[9,[44]]]],[[44,44,20],[[9,[44]]]],[[44,44,20],[[9,[44]]]],[[44,44,20],[[9,[44]]]],[[44,44,20],[[9,[44]]]],[[44,44,20],[[9,[44]]]],[[44,44,20],[[9,[44]]]],[[44,44,20],[[9,[44]]]],[[44,44,20],[[9,[44]]]],[-1,-2,[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[43,[[9,[44]]]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[[44,44,20],[[9,[44]]]]],"c":[],"p":[[3,"Ast",0],[3,"Program",2102],[15,"tuple"],[15,"usize"],[15,"bool"],[3,"Formatter",3007],[6,"Result",3007],[3,"PathBuf",3008],[6,"Result",3009],[15,"str"],[4,"Value",3010],[15,"slice"],[3,"String",3011],[4,"Result",3012],[3,"TypeId",3013],[3,"ArrayAccess",80],[8,"Deserializer",3014],[6,"NodeID",289],[8,"Serializer",3015],[3,"Span",3016],[3,"AssociatedConstant",113],[3,"AssociatedFunction",146],[3,"MemberAccess",180],[3,"TupleAccess",213],[3,"Identifier",252],[8,"Hasher",3017],[3,"Symbol",3018],[3,"Vec",3019],[3,"IndexMap",3020],[3,"NodeBuilder",295],[3,"NodeBuilderInner",295],[3,"NonNegativeNumber",334],[3,"StaticString",367],[4,"Expression",394],[4,"AccessExpression",556],[3,"ArrayExpression",590],[4,"BinaryOperation",622],[3,"BinaryExpression",622],[4,"Option",3021],[3,"CallExpression",712],[3,"CastExpression",746],[3,"ErrExpression",779],[4,"Literal",810],[4,"Value",2935],[3,"StructExpression",847],[3,"StructVariableInitializer",847],[3,"TernaryExpression",915],[3,"TupleExpression",949],[4,"UnaryOperation",981],[3,"UnaryExpression",981],[3,"UnitExpression",1049],[3,"Function",1080],[3,"Annotation",1131],[4,"Variant",1673],[4,"Input",1509],[4,"Output",1607],[3,"Block",2332],[3,"Finalize",1472],[4,"CoreFunction",1163],[3,"External",1437],[4,"Type",2892],[3,"FunctionInput",1509],[4,"Mode",1578],[3,"FunctionOutput",1607],[4,"GroupCoordinate",1701],[4,"GroupLiteral",1730],[3,"GroupTuple",1730],[3,"Definition",1796],[3,"InputData",1824],[3,"InputAst",1824],[3,"Struct",2664],[4,"InputValue",1868],[3,"ProgramInput",1899],[3,"Section",1920],[3,"Mapping",1942],[3,"AssertStatement",2241],[3,"AssignStatement",2299],[3,"ConditionalStatement",2364],[3,"ConsoleStatement",2428],[3,"ConstDeclaration",2460],[3,"DefinitionStatement",2494],[3,"ExpressionStatement",2560],[3,"IterationStatement",2592],[3,"ProgramScope",2160],[3,"ReturnStatement",2631],[4,"Statement",2191],[3,"ProgramId",2132],[4,"AssertVariant",2241],[4,"ConsoleFunction",2400],[4,"DeclarationType",2533],[3,"Member",2700],[3,"ArrayType",2741],[4,"CoreConstant",2773],[4,"IntegerType",2796],[3,"MappingType",2834],[3,"TupleType",2862],[8,"Node",289],[6,"Definitions",1788],[8,"ExpressionConsumer",1979],[8,"StatementConsumer",1979],[8,"FunctionConsumer",1979],[8,"StructConsumer",1979],[8,"ImportConsumer",1979],[8,"MappingConsumer",1979],[8,"ProgramScopeConsumer",1979],[8,"ProgramConsumer",1979],[8,"ExpressionReconstructor",2026],[8,"StatementReconstructor",2026],[8,"ProgramReconstructor",2026],[8,"ExpressionVisitor",2066],[8,"StatementVisitor",2066],[8,"ProgramVisitor",2066]]},\
"leo_compiler":{"doc":"leo-compiler","t":"DDDDDDDLLMMMMLLLLLLMLLLLLLLAMMMLLLLLLLLLLMLLLLLLLLMLLLLLLLLLLMMLLLMMMMMLLLLLLLLLLLLLLMMLMAMMMLMLLMMMLLMMMLLLLLLLLLLLLLLLLLLLLLLMLLLMMMLLMLLLDDDDMMMLLLLLLLMLLLLLLLLLMMLMLLMMLMMMLLLMMMMLMLLLLLLMMLLLDDDMLLLLLLMLLLLLLMMLLLLLLLLLMLLLMLLLLLLMMMMLLLMMMLLLLLLLLLMLLLMMLLL","n":["Ast","BuildOptions","Compiler","CompilerOptions","InputAst","OutputOptions","SymbolTable","as_ref","as_repr","assigner","ast","ast","ast_spans_enabled","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","check_shadowing","clone","clone","clone","clone_into","clone_into","clone_into","compiler","compiler_options","dce_ast","dce_enabled","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","destructured_ast","drop","drop","drop","eq","equivalent","equivalent","equivalent","equivalent","flattened_ast","fmt","fmt","fmt","from","from","from","from_json_file","from_json_file","from_json_string","from_json_string","functions","handler","init","init","init","initial_ast","initial_input_ast","initial_symbol_table","inlined_ast","input_ast","insert_block","insert_fn","insert_struct","insert_variable","into","into","into","into_repr","lookup_fn_scope","lookup_fn_symbol","lookup_scope_by_index","lookup_struct","lookup_variable","lookup_variable_mut","main_file_path","network","new","node_builder","options","output","output_directory","parent","program_inputs","program_name","remove_variable_from_current_scope","scope_index","scope_index","scopes","sections","serialize","serialize","ssa_ast","structs","symbol_table_spans_enabled","take_from_value","take_from_value","to_json_file","to_json_file","to_json_file","to_json_file_without_keys","to_json_file_without_keys","to_json_file_without_keys","to_json_string","to_json_string","to_json_value","to_json_value","to_json_value","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_checked_symbol_table","type_id","type_id","type_id","type_table","unrolled_ast","unrolled_symbol_table","variable_in_local_scope","variable_in_parent_scope","variables","vzip","vzip","vzip","Ast","Compiler","InputAst","SymbolTable","assigner","ast","ast","borrow","borrow_mut","checksum","clone","clone_into","code_generation_pass","compile","compiler_options","compiler_stages","dead_code_elimination_pass","deref","deref_mut","destructuring_pass","drop","flattening_pass","from","function_inlining_pass","functions","handler","init","input_ast","into","loop_unrolling_pass","main_file_path","network","new","node_builder","output_directory","parent","parse_input","parse_program","parse_program_from_string","program_name","scope_index","scopes","sections","static_single_assignment_pass","structs","symbol_table_pass","to_owned","try_from","try_into","type_checker_pass","type_id","type_table","variables","vzip","write_ast_to_json","write_symbol_table_to_json","BuildOptions","CompilerOptions","OutputOptions","ast_spans_enabled","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","clone","clone","clone","clone_into","clone_into","clone_into","dce_ast","dce_enabled","default","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","destructured_ast","drop","drop","drop","flattened_ast","from","from","from","init","init","init","initial_ast","initial_input_ast","initial_symbol_table","inlined_ast","into","into","into","output","ssa_ast","symbol_table_spans_enabled","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_checked_symbol_table","type_id","type_id","type_id","unrolled_ast","unrolled_symbol_table","vzip","vzip","vzip"],"q":[[0,"leo_compiler"],[140,"leo_compiler::compiler"],[196,"leo_compiler::options"],[263,"leo_ast::program"],[264,"leo_span::symbol"],[265,"leo_span::span"],[266,"leo_errors::errors"],[267,"core::result"],[268,"serde::de"],[269,"core::fmt"],[270,"core::fmt"],[271,"leo_ast::functions"],[272,"leo_ast::struct"],[273,"leo_passes::common::symbol_table::variable_symbol"],[274,"core::cell"],[275,"core::option"],[276,"leo_passes::common::symbol_table::function_symbol"],[277,"std::collections::hash::map"],[278,"indexmap::map"],[279,"alloc::string"],[280,"alloc::alloc"],[281,"alloc::vec"],[282,"serde::ser"],[283,"serde_json::value"],[284,"core::any"],[285,"leo_errors::errors"],[286,"leo_passes::common::graph"],[287,"leo_span::source_map"]],"d":["The abstract syntax tree (AST) for a Leo program.","","The primary entry point of the Leo compiler.","","A raw unprocessed input or state file data. Used for …","","","","Returns a reference to the inner program AST …","The <code>Assigner</code> is used to construct (unique) assignment …","The AST for the program.","","Whether spans are enabled in the output ASTs.","","","","","","","Build options.","Recursively checks if the symbol table contains an entry …","","","","","","","The compiler for Leo programs.","Options configuring compilation.","If enabled writes the AST after dead code elimination.","Whether to enable dead code elimination.","","","","","","","","","","","If enabled writes the AST after destructuring.","","","","","","","","","If enabled writes the AST after flattening.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Deserializes the JSON string into a symbol table from a …","Deserializes the JSON string into a ast from a file.","Deserializes the JSON string into a symbol table.","Deserializes the JSON string into a ast.","Functions represents the name of each function mapped to …","The handler is used for error and warning emissions.","","","","If enabled writes the AST after parsing.","If enabled writes the input AST after parsing.","","If enabled writes the AST after inlining.","The input ast for the program if it exists.","Creates a new scope for the block and stores it in the …","Inserts a function into the symbol table.","Inserts a struct into the symbol table.","Inserts a variable into the symbol table.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns the scope associated with the function symbol, if …","Attempts to lookup a function in the symbol table.","Returns the scope associated with <code>index</code>, if it exists in …","Attempts to lookup a struct in the symbol table.","Attempts to lookup a variable in the symbol table.","Returns a mutable reference to the <code>VariableSymbol</code> if it …","The path to the main leo file.","The network name,","Creates a new AST from a given program tree.","The <code>NodeCounter</code> used to generate sequentially increasing …","","Output options.","The path to where the compiler outputs all generated files.","","Returns all values of the input AST for execution with …","The program name,","Removes a variable from the symbol table.","Returns the current scope index. Increments the scope …","","","","","","If enabled writes the AST after static single assignment.","Maps struct names to struct definitions. This field is …","","","","","Serializes the input into a JSON file.","Serializes the ast into a JSON file.","Serializes the symbol table into a JSON value and removes …","Serializes the <code>Input</code> into a JSON value and removes keys …","Serializes the ast into a JSON value and removes keys from …","Serializes the symbol table into a JSON string.","Serializes the ast into a JSON string.","Converts the symbol table into a JSON value","Serializes the <code>Input</code> into a JSON Value.","","","","","","","","","","","If enabled writes the symbol table after type checking.","","","","The type table.","If enabled writes the AST after loop unrolling.","If enabled writes the symbol table after loop unrolling.","Returns true if the variable exists in the local scope","Returns true if the variable exists in any parent scope","","","","","The abstract syntax tree (AST) for a Leo program.","The primary entry point of the Leo compiler.","A raw unprocessed input or state file data. Used for …","","The <code>Assigner</code> is used to construct (unique) assignment …","The AST for the program.","","","","Returns a SHA256 checksum of the program file.","","","Runs the code generation pass.","Returns a compiled Leo program.","Options configuring compilation.","Runs the compiler stages.","Runs the dead code elimination pass.","","","Runs the destructuring pass.","","Runs the flattening pass.","Returns the argument unchanged.","Runs the function inlining pass.","Functions represents the name of each function mapped to …","The handler is used for error and warning emissions.","","The input ast for the program if it exists.","Calls <code>U::from(self)</code>.","Runs the loop unrolling pass.","The path to the main leo file.","The network name,","Returns a new Leo compiler.","The <code>NodeCounter</code> used to generate sequentially increasing …","The path to where the compiler outputs all generated files.","","Parses and stores the input file, constructs a syntax …","Parses and stores the main program file, constructs a …","Parses and stores a program file content from a string, …","The program name,","","","","Runs the static single assignment pass.","Maps struct names to struct definitions. This field is …","Runs the symbol table pass.","","","","Runs the type checker pass.","","The type table.","","","Writes the AST to a JSON file.","Writes the Symbol Table to a JSON file.","","","","Whether spans are enabled in the output ASTs.","","","","","","","Build options.","","","","","","","If enabled writes the AST after dead code elimination.","Whether to enable dead code elimination.","","","","","","","","","","If enabled writes the AST after destructuring.","","","","If enabled writes the AST after flattening.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","If enabled writes the AST after parsing.","If enabled writes the input AST after parsing.","","If enabled writes the AST after inlining.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Output options.","If enabled writes the AST after static single assignment.","","","","","","","","","","","If enabled writes the symbol table after type checking.","","","","If enabled writes the AST after loop unrolling.","If enabled writes the symbol table after loop unrolling.","","",""],"i":[0,0,0,0,0,0,0,1,1,32,32,1,40,3,9,1,3,9,1,37,3,3,9,1,3,9,1,0,32,40,39,3,1,3,9,1,3,9,1,3,9,40,3,9,1,1,1,1,1,1,40,3,9,1,3,9,1,3,1,3,1,3,32,3,9,1,40,40,40,40,32,3,3,3,3,3,9,1,1,3,3,3,3,3,3,32,32,1,32,0,37,32,3,9,32,3,3,3,3,9,3,9,40,3,40,3,9,3,9,1,3,9,1,3,1,3,9,1,3,9,1,3,9,1,3,9,1,40,3,9,1,32,40,40,3,3,3,3,9,1,0,0,0,0,32,32,1,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,3,32,32,32,32,32,32,32,32,32,32,3,32,32,32,32,3,3,9,32,3,32,32,32,32,32,32,32,3,32,32,32,0,0,0,40,37,39,40,37,39,40,37,37,39,40,37,39,40,40,39,37,39,40,37,39,40,37,39,40,40,37,39,40,40,37,39,40,37,39,40,40,40,40,40,37,39,40,37,40,40,37,39,40,37,39,40,37,39,40,40,37,39,40,40,40,37,39,40],"f":[0,0,0,0,0,0,0,[1,2],[1,2],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[3,4,5],[[8,[6,7]]]],[3,3],[9,9],[1,1],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],0,0,0,0,[[],3],[[],1],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[-1,[[8,[3]]],11],[-1,[[8,[9]]],11],0,[10,6],[10,6],[10,6],[[1,1],12],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],0,[[3,13],[[8,[6,14]]]],[[9,13],[[8,[6,14]]]],[[1,13],[[8,[6,14]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[15,[[8,[3,7]]]],[15,[[8,[1,7]]]],[16,[[8,[3,7]]]],[16,[[8,[1,7]]]],0,0,[[],10],[[],10],[[],10],0,0,0,0,0,[3,10],[[3,4,17],[[8,[6,7]]]],[[3,4,18],[[8,[6,7]]]],[[3,4,19],[[8,[6,7]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[[3,4],[[21,[[20,[3]]]]]],[[3,4],[[21,[22]]]],[[3,10],[[21,[[20,[3]]]]]],[[3,4],[[21,[18]]]],[[3,4],[[21,[19]]]],[[3,4],[[21,[19]]]],0,0,[2,1],0,0,0,0,0,[[9,16,[24,[4,18,23]]],[[27,[25,26]]]],0,[[3,4],6],[3,10],0,0,0,[[3,-1],8,28],[[9,-1],8,28],0,0,0,[[29,16],[[8,[-1]]],[]],[[29,16],[[8,[-1]]],[]],[[3,15,16],[[8,[6,7]]]],[[9,15,16],[[8,[6,7]]]],[[1,15,16],[[8,[6,7]]]],[[3,15,16,[30,[16]]],[[8,[6,7]]]],[[9,15,16,[30,[16]]],[[8,[6,7]]]],[[1,15,16,[30,[16]]],[[8,[6,7]]]],[3,[[8,[25,7]]]],[1,[[8,[25,7]]]],[3,[[8,[29,7]]]],[9,[[8,[29,7]]]],[1,[[8,[29,7]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],0,[-1,31,[]],[-1,31,[]],[-1,31,[]],0,0,0,[[3,4],12],[[3,4],12],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[32,[[33,[25]]]],[32,32],[[-1,-2],6,[],[]],[[32,3,34,35],[[33,[25]]]],[32,[[33,[[6,[3,25]]]]]],0,[32,[[33,[[6,[3,34,35]]]]]],[32,[[33,[6]]]],[10,-1,[]],[10,-1,[]],[32,[[33,[6]]]],[10,6],[[32,3],[[33,[6]]]],[-1,-1,[]],[[32,35],[[33,[6]]]],0,0,[[],10],0,[-1,-2,[],[]],[[32,3],[[33,[3]]]],0,0,[[25,25,36,15,15,[21,[37]]],32],0,0,0,[[32,15],[[33,[6]]]],[32,[[33,[6]]]],[[32,16,38],[[33,[6]]]],0,0,0,0,[[32,3],[[33,[6]]]],0,[32,[[33,[3]]]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[[32,3],[[33,[[6,[3,34,35]]]]]],[-1,31,[]],0,0,[-1,-2,[],[]],[[32,16],[[33,[6]]]],[[32,16,3],[[33,[6]]]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[37,37],[39,39],[40,40],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],0,0,[[],37],[[],39],[[],40],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],[10,-1,[]],0,[10,6],[10,6],[10,6],0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],10],[[],10],[[],10],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],0,[-1,31,[]],[-1,31,[]],[-1,31,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[3,"Ast",0],[3,"Program",263],[3,"SymbolTable",0],[3,"Symbol",264],[3,"Span",265],[15,"tuple"],[4,"LeoError",266],[4,"Result",267],[3,"InputAst",0],[15,"usize"],[8,"Deserializer",268],[15,"bool"],[3,"Formatter",269],[3,"Error",269],[3,"PathBuf",270],[15,"str"],[3,"Function",271],[3,"Struct",272],[3,"VariableSymbol",273],[3,"RefCell",274],[4,"Option",275],[3,"FunctionSymbol",276],[3,"RandomState",277],[3,"IndexMap",278],[3,"String",279],[3,"Global",280],[3,"Vec",281],[8,"Serializer",282],[4,"Value",283],[15,"slice"],[3,"TypeId",284],[3,"Compiler",140],[6,"Result",266],[6,"StructGraph",285],[6,"CallGraph",285],[3,"Handler",286],[3,"CompilerOptions",196],[4,"FileName",287],[3,"BuildOptions",196],[3,"OutputOptions",196]]},\
"leo_errors":{"doc":"leo-errors","t":"AOAAAAAADRMLLLLMMLLLMLLLLLLMLMLLLLLMLLDMLLLLLLLLLLLLLLLMLLLLLLILKKKKKKDDIGDDDGLLLLLLLLLLLLLLLKLLLLKLLLLMLMLLLLLLLLLLLLMLLLLLLKLLLLLMLLLLLLLLLLLLLLLLLLLLLMLLNNNNNNNNEENNNNNGNALLLLAALLLALLLLLLLLLLLLLLLLLALLAAALLLLLLLLALLAENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLANENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLANENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLANENLLLLLLLLLLLLLLLLLLLLLLLLFLLANNELLLLLLLLLLLLLLLLLLLLLLLLLLANNELLLLLLLLLLLLLLLLLLLLLLLLLANNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAANNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNELLLLLLLLLLLLLLLLLLLLLLLLLANNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["common","create_messages","emitter","errors","backtraced","formatted","macros","traits","Backtraced","INDENT","backtrace","borrow","borrow_mut","clone","clone_into","code","code_identifier","default","description","eq","error","error_code","exit_code","fmt","fmt","from","hash","help","into","message","new_from_backtrace","to_owned","to_string","try_from","try_into","type_","type_id","warning_code","Formatted","backtrace","borrow","borrow_mut","clone","clone_into","default","description","eq","error_code","exit_code","fmt","fmt","from","hash","into","new_from_span","span","to_owned","to_string","try_from","try_into","type_id","warning_code","LeoMessageCode","code_identifier","code_mask","error_code","exit_code","is_error","message_type","warning_code","Buffer","BufferEmitter","Emitter","ErrBuffer","Handler","HandlerInner","StderrEmitter","WarningBuffer","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","default","default","emit_err","emit_err","emit_err","emit_err","emit_err","emit_warning","emit_warning","emit_warning","emit_warning","emit_warning","emitter","err_count","err_count","extend_if_error","extract_errs","extract_warnings","fatal_err","fmt","fmt","from","from","from","from","from","had_errors","inner","into","into","into","into","into","into_inner","last_emitted_err_code","last_emitted_err_code","last_emitted_err_code","last_emitted_err_code","last_entry","last_err","last_error_code","new","new","new_with_buf","push","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","warn_count","warning_count","with","Anyhow","AstError","CliError","CompilerError","Err","FlattenError","InputError","LastErrorCode","LeoError","LeoWarning","LoopUnrollerError","Ok","PackageError","ParserError","ParserWarning","Result","TypeCheckerError","ast","borrow","borrow","borrow_mut","borrow_mut","cli","compiler","error_code","error_code","exit_code","flattener","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","input","into","into","loop_unroller","package","parser","source","source","to_string","to_string","try_from","try_from","try_into","try_into","type_checker","type_id","type_id","ast_errors","AstError","Backtraced","Formatted","borrow","borrow_mut","clone","clone_into","code_mask","error_code","exit_code","failed_to_convert_ast_to_json_string","failed_to_convert_ast_to_json_value","failed_to_convert_symbol_table_to_json_string","failed_to_convert_symbol_table_to_json_value","failed_to_create_ast_json_file","failed_to_create_symbol_table_json_file","failed_to_read_json_file","failed_to_read_json_string_to_ast","failed_to_read_json_string_to_symbol_table","failed_to_write_ast_to_json_file","failed_to_write_symbol_table_to_json_file","fmt","fmt","from","from","from","into","is_error","message_type","num_exit_codes","shadowed_function","shadowed_record","shadowed_struct","shadowed_variable","source","to_owned","to_string","try_from","try_into","type_id","warning_code","cli_errors","Backtraced","CliError","Formatted","borrow","borrow_mut","cli_io_error","clone","clone_into","code_mask","could_not_fetch_versions","error_code","exit_code","failed_to_enable_ansi_support","failed_to_execute_build","failed_to_execute_deploy","failed_to_execute_execute","failed_to_execute_new","failed_to_execute_node","failed_to_execute_run","failed_to_load_instructions","failed_to_parse_deploy","failed_to_parse_execute","failed_to_parse_new","failed_to_parse_node","failed_to_parse_run","failed_to_parse_seed","failed_to_write_file","fmt","fmt","from","from","from","into","is_error","message_type","needs_leo_build","num_exit_codes","old_release_version","self_update_build_error","self_update_error","source","to_owned","to_string","try_from","try_into","type_id","warning_code","compiler_errors","Backtraced","CompilerError","Formatted","borrow","borrow_mut","cannot_open_cwd","clone","clone_into","code_mask","error_code","exit_code","file_read_error","fmt","fmt","from","from","from","illegal_static_member_assignment","import_not_found","into","is_error","message_type","num_exit_codes","program_name_should_match_file_name","program_scope_name_does_not_match","source","to_owned","to_string","try_from","try_into","type_id","warning_code","flattener_errors","Backtraced","FlattenError","Formatted","binary_overflow","borrow","borrow_mut","clone","clone_into","code_mask","error_code","exit_code","fmt","fmt","from","from","from","into","is_error","loop_has_neg_value","message_type","num_exit_codes","source","to_owned","to_string","try_from","try_into","type_id","type_name","unary_overflow","warning_code","input_errors","Backtraced","Formatted","InputError","borrow","borrow_mut","clone","clone_into","code_mask","error_code","exit_code","fmt","fmt","from","from","from","illegal_expression","into","is_error","message_type","num_exit_codes","source","to_owned","to_string","try_from","try_into","type_id","unexpected_section","unexpected_type","warning_code","loop_unroller_errors","Backtraced","Formatted","LoopUnrollerError","borrow","borrow_mut","clone","clone_into","code_mask","error_code","exit_code","fmt","fmt","from","from","from","into","is_error","loop_range_decreasing","message_type","num_exit_codes","source","to_owned","to_string","try_from","try_into","type_id","variable_array_access","warning_code","package_errors","Backtraced","Formatted","PackageError","borrow","borrow_mut","clone","clone_into","code_mask","directory_not_found","empty_source_directory","error_code","exit_code","failed_to_create_aleo_file","failed_to_create_directory","failed_to_create_inputs_directory","failed_to_create_source_directory","failed_to_get_file_name","failed_to_get_input_file_entry","failed_to_get_input_file_type","failed_to_get_leo_file_entry","failed_to_get_leo_file_extension","failed_to_initialize_package","failed_to_open_aleo_file","failed_to_open_manifest","failed_to_read_checksum_file","failed_to_read_circuit_file","failed_to_read_file","failed_to_read_input_file","failed_to_read_inputs_directory","failed_to_read_snapshot_file","failed_to_remove_aleo_file","failed_to_remove_checksum_file","failed_to_remove_circuit_file","failed_to_remove_directory","failed_to_remove_snapshot_file","failed_to_set_cwd","failed_to_write_aleo_file","fmt","fmt","from","from","from","into","invalid_input_file_type","invalid_leo_file_extension","invalid_package_name","io_error_checksum_file","io_error_circuit_file","io_error_env_file","io_error_gitignore_file","io_error_input_file","io_error_main_file","is_error","message_type","num_exit_codes","source","source_directory_can_contain_only_one_file","to_owned","to_string","try_from","try_into","type_id","warning_code","parser_errors","parser_warnings","Backtraced","Formatted","ParserError","array_must_have_at_least_one_element","async_finalize_is_deprecated","borrow","borrow_mut","circuit_is_deprecated","clone","clone_into","code_mask","console_statements_are_not_yet_supported","could_not_lex","error_code","exit_code","finalize_statements_are_deprecated","fmt","fmt","from","from","from","implicit_values_not_allowed","inputs_multiple_variable_modes_specified","into","invalid_address_lit","invalid_associated_access","invalid_import_list","invalid_method_call","invalid_network","is_error","leo_imports_only","lexer_bidi_override","lexer_block_comment_does_not_close_before_eof","lexer_empty_block_comment","lexer_empty_input","lexer_expected_valid_escaped_char","lexer_hex_number_provided","lexer_string_not_closed","message_type","missing_program_scope","mixed_commas_and_semicolons","num_exit_codes","only_one_program_scope_is_allowed","source","space_in_annotation","spread_in_array_init","to_owned","to_string","try_from","try_into","tuple_index_must_be_whole_number","tuple_must_have_at_least_two_elements","type_id","unexpected","unexpected_eof","unexpected_ident","unexpected_statement","unexpected_str","unexpected_token","unexpected_whitespace","warning_code","Backtraced","Formatted","ParserWarning","borrow","borrow_mut","clone","clone_into","code_mask","const_parameter_or_input","deprecated","error_code","exit_code","fmt","fmt","from","from","from","into","is_error","message_type","num_exit_codes","source","to_owned","to_string","try_from","try_into","type_id","warning_code","type_checker_error","Backtraced","Formatted","TypeCheckerError","array_element_cannot_be_record","array_element_cannot_be_tuple","array_empty","array_too_large","assign_unit_expression_to_variable","borrow","borrow_mut","can_only_call_inline_function","cannot_assign_to_const_input","cannot_assign_to_const_var","cannot_call_external_inline_function","cannot_have_constant_output_mode","cannot_invoke_call_to_local_transition_function","clone","clone_into","code_mask","compare_address","composite_data_type_cannot_contain_tuple","const_declaration_can_only_have_one_binding","const_declaration_must_be_literal_or_tuple_of_literals","core_type_name_conflict","could_not_determine_type","cyclic_function_dependency","cyclic_struct_dependency","duplicate_record_variable","duplicate_struct_member","error_code","exit_code","expected_one_type_of","expression_statement_must_be_function_call","finalize_block_must_not_be_empty","finalize_cannot_output_record","finalize_cannot_return_value","finalize_cannot_take_record_as_input","finalize_cannot_take_tuple_as_input","finalize_in_finalize","finalize_input_mode_must_be_public","finalize_name_mismatch","finalize_output_mode_must_be_public","finalize_statement_cannot_contain_tuples","finalize_without_finalize_block","fmt","fmt","from","from","from","function_cannot_output_record","function_cannot_take_tuple_as_input","function_has_no_return","imported_program_cannot_import_program","incorrect_num_args_to_call","incorrect_num_args_to_finalize","incorrect_num_struct_members","incorrect_num_tuple_elements","incorrect_tuple_length","into","invalid_assignment_target","invalid_associated_constant","invalid_block_access","invalid_core_constant","invalid_core_function","invalid_core_function_call","invalid_int_value","invalid_mapping_type","invalid_operation_inside_finalize","invalid_operation_outside_finalize","invalid_self_access","invalid_struct_variable","invalid_tuple","invalid_type","is_error","lhs_must_be_identifier_or_tuple","lhs_tuple_element_must_be_an_identifier","loop_body_contains_finalize","loop_body_contains_return","loop_bound_must_be_a_literal","loop_bound_must_be_literal_or_const","loop_bound_type_mismatch","loop_range_decreasing","message_type","missing_finalize","missing_return","missing_struct_member","nested_tuple_expression","nested_tuple_type","num_exit_codes","only_transition_functions_can_have_finalize","operation_must_be_in_finalize_block","record_var_wrong_type","regular_function_inputs_cannot_have_modes","required_record_variable","source","strings_are_not_supported","struct_cannot_have_member_mode","struct_or_record_cannot_contain_record","to_owned","to_string","too_many_mappings","too_many_transitions","transition_function_inputs_cannot_be_const","try_from","try_into","tuple_out_of_range","type_id","type_should_be","undefined_type","unit_expression_only_in_return_statements","unknown_annotation","unknown_sym","unreachable_code_after_return","warning_code"],"q":[[0,"leo_errors"],[4,"leo_errors::common"],[8,"leo_errors::common::backtraced"],[38,"leo_errors::common::formatted"],[62,"leo_errors::common::traits"],[70,"leo_errors::emitter"],[156,"leo_errors::errors"],[218,"leo_errors::errors::ast"],[219,"leo_errors::errors::ast::ast_errors"],[260,"leo_errors::errors::cli"],[261,"leo_errors::errors::cli::cli_errors"],[308,"leo_errors::errors::compiler"],[309,"leo_errors::errors::compiler::compiler_errors"],[341,"leo_errors::errors::flattener"],[342,"leo_errors::errors::flattener::flattener_errors"],[372,"leo_errors::errors::input"],[373,"leo_errors::errors::input::input_errors"],[402,"leo_errors::errors::loop_unroller"],[403,"leo_errors::errors::loop_unroller::loop_unroller_errors"],[431,"leo_errors::errors::package"],[432,"leo_errors::errors::package::package_errors"],[495,"leo_errors::errors::parser"],[497,"leo_errors::errors::parser::parser_errors"],[558,"leo_errors::errors::parser::parser_warnings"],[586,"leo_errors::errors::type_checker"],[587,"leo_errors::errors::type_checker::type_checker_error"],[701,"alloc::string"],[702,"core::fmt"],[703,"core::fmt"],[704,"core::option"],[705,"backtrace::capture"],[706,"alloc::string"],[707,"core::any"],[708,"leo_span::span"],[709,"core::convert"],[710,"core::fmt"],[711,"alloc::boxed"],[712,"core::ops::function"],[713,"anyhow"],[714,"core::error"],[715,"std::fs"]],"d":["Contains the common functionalities for defining errors..","A macro that given an enum, exit code mask, error code …","Contains traits and types for channels through which …","Contains the errors and warnings for the Leo lang.","This module contains a backtraced error and its methods.","This module contains a formatted error and its methods.","This module contains the macros for making errors easily.","This module contains traits for making errors easily.","Backtraced compiler ouput type undefined value <code>x</code> –&gt; …","The indent for an error message.","The backtrace representing where the error occured in Leo.","","","","","The error exit code.","The error leading digits identifier.","","","","Is this Backtrace a warning or error?","Gets a unique error identifier.","Gets the backtraced error exit code.","","","Returns the argument unchanged.","","The error help message if it exists.","Calls <code>U::from(self)</code>.","The error message.","Creates a backtraced error from a backtrace.","","","","","The characters representing the type of error.","","Gets a unique warning identifier.","Formatted compiler error type undefined value <code>x</code> –&gt; …","The backtrace to track where the Leo error originated.","","","","","","","","Returns an error identifier.","Calls the backtraces error exit code.","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Creates a backtraced error from a span and a backtrace.","The formatted error span information.","","","","","","Returns an warning identifier.","MessageCode trait that all Errors should implement.","The LeoErrorCode which has a default code identifier of 037","Returns the messages’s exit code mask, as to avoid …","Returns the prefixed error identifier.","Returns the error’s exit code for the program.","Returns if the message is an error or warning.","Returns the message’s code type for the program.","Returns the prefixed warning identifier.","A buffer of <code>T</code>s.","An <code>Emitter</code> that collects into a list.","Types that are sinks for compiler errors.","A buffer of <code>LeoError</code>s.","A handler deals with errors and other compiler output.","Contains the actual data for <code>Handler</code>. Modelled this way to …","A trivial <code>Emitter</code> using the standard error.","A buffer of <code>LeoWarning</code>s.","","","","","","","","","","","","","","","","Emit the error <code>err</code>.","","Emit the error <code>err</code>.","Emit the error <code>err</code>.","","Emit the warning.","","Emit the error <code>err</code>.","Emit the error <code>err</code>.","","The sink through which errors will be emitted.","The number of errors thus far.","Number of errors emitted thus far.","Extend handler with <code>error</code> given <code>res = Err(error)</code>.","Extracts all the errors collected in this emitter.","Extracts all the errors collected in this emitter.","Emits the error <code>err</code>. This will immediately abort …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Did we have any errors thus far?","The inner handler. <code>RefCell</code> is used here to avoid <code>&amp;mut</code> all …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Extract the underlying list of Ts.","Tracks last emitted error.","","Gets the last emitted error’s exit code.","","Last entry to the buffer.","Gets the last emitted error’s exit code if it exists. …","Exit code of the last emitted error.","Construct a <code>Handler</code> using the given <code>emitter</code>.","Returns a new buffered emitter.","Construct a <code>Handler</code> that will append to <code>buf</code>.","Push <code>x</code> to the buffer.","","","","","","","","","","","","","","","","","","Number of warnings emitted thus far.","The number of warnings thus far.","Runs <code>logic</code> provided a handler that collects all errors …","Anyhow errors.","Represents an AST Error in a Leo Error.","Represents an CLI Error in a Leo Error.","Represents an Compiler Error in a Leo Error.","Contains the error value","Represents a Flatten Error in a Leo Error.","Represents an Input Error in a Leo Error.","Purely for just exiting with the correct status code and …","The LeoError type that contains all sub error types. This …","The LeoWarning type that contains all sub error types. …","Represents a Loop Unroller Error in a Leo Error.","Contains the success value","Represents an Package Error in a Leo Error.","Represents an Parser Error in a Leo Error.","Represents an Parser Error in a Leo Error.","A global result type for all Leo crates, that defaults the …","Represents a Type Checker Error in a Leo Error.","Contains the AST error definitions.","","","","","Contains the CLI error definitions.","Contains the Compiler error definitions.","Implement error code for each type of Error.","Implement warning code for each type of Warning.","Implement exit code for each type of Error.","Contains the Flattener error definitions.","","","","","Returns the argument unchanged.","","","","","","","","","","","Returns the argument unchanged.","","Contains the Input error definitions.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Contains the Package error definitions.","Contains the Parser error definitions.","","","","","","","","","Contains the Type Checker error definitions.","","","This module contains the AST error definitions.","AstError enum that represents all the errors for the …","","","","","","","","","","For when the AST fails to be represented as a JSON string.","For when the AST fails to be represented as a JSON value.","For when the symbol table fails to be represented as a …","For when the symbol table fails to be represented as a …","For when the AST fails to create the AST JSON file.","For when the symbol table fails to create the symbol table …","For when the a JSON files fails to be represented as an …","For when the a JSON string fails to be represented as an …","For when the a JSON string fails to be represented as an …","For when the AST fails to write the AST JSON file.","For when the symbol table fails to write the symbol table …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","For when a user shadows a function.","For when a user shadows a record.","For when a user shadows a struct.","For when a user shadows a variable.","","","","","","","","This module contains the CLI error definitions.","","CliError enum that represents all the errors for the …","","","","For when the CLI experiences an IO error.","","","","For when the CLI could not fetch the versions.","","","For when the CLI fails to enable ansi support.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","For when the CLI has an old release version.","For when the CLI fails to self update.","For when the CLI fails to self update.","","","","","","","","This module contains the Compiler error definitions.","","CompilerError enum that represents all the errors for the …","","","","","","","","","","For when the compiler can’t read a file from the …","","","","Returns the argument unchanged.","","For when a user tries to assign to a struct static member.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","This module contains the Flattener error definitions.","","CliError enum that represents all the errors for the …","","For when a constant operation would cause an overflow.","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","For when a loop uses a negative value.","","","","","","","","","Generates the type name of a value.","For when a constant operation would cause an overflow.","","This module contains the Input error definitions.","","","InputError enum that represents all the errors for the …","","","","","","","","","","","","Returns the argument unchanged.","For when the expression is not allowed in an input file.","Calls <code>U::from(self)</code>.","","","","","","","","","","For when section name is not an allowed one.","For when declared variable type mismatches actual type.","","This module contains the Input error definitions.","","","LoopUnrollerError enum that represents all the errors for …","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","This module contains the Package error definitions.","","","PackageError enum that represents all the errors for the …","","","","","","For when opening a directory failed.","","","","","For when creating a directory failed.","For when creating the inputs directory failed.","For when creating the source directory failed.","","For when getting a input file entry failed.","For when getting the input file type failed.","For when getting a Leo file entry failed.","For when getting the source file extension failed.","For when the package failed to initalize.","","","For when reading the checksum file failed.","For when reading the struct file failed.","For when file could not be read.","For when reading the input file failed.","For when reading the input directory failed.","For when reading the snapshot file failed.","","For when removing the checksum file failed.","For when removing the struct file failed.","For when removing a directory failed.","For when removing the snapshot file failed.","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","For when getting the input file has an invalid file type.","For when the Leo file has an invalid extension.","For when the package has an invalid name.","For when the checksum file has an IO error.","For when the struct file has an IO error.","For when the environment file has an IO error.","For when the gitignore file has an IO error.","For when the input file has an IO error.","For when the main file has an IO error.","","","","","","","","","","","","This module contains the Parser error definitions.","This module contains the Parser warning definitions.","","","ParserError enum that represents all the errors for the …","","","","","","","","","","When the lexer could not lex some text.","","","","","","","Returns the argument unchanged.","","When the user tries to pass an implicit value.","For when a user specified more than one mode on a …","Calls <code>U::from(self)</code>.","For when the parser encountered an invalid address literal.","","For when the parser encountered an empty import list.","Parsed an unknown method call on the type of an expression.","","","","For when the lexer encountered a bidi override character","When a block comment is not closed before end of file.","When a block comment is empty.","When more input was expected but not found.","When an integer is started with a leading zero.","When a hex number is provided.","When a string is not properly closed.","","","For when the parser encountered a mix of commas and …","","","","","For when the parser encountered an unexpected spread in an …","","","","","Enforce that tuple index must not have leading 0, or …","","","For when the parser encountered an unexpected list of …","For when the parser encountered an unexpected End of File.","For when the parser encountered an unexpected identifier.","For when the parser encountered an unexpected statement.","For when the parser encountered an unexpected string.","For when the parser encountered an unexpected token.","For when the parser encountered an unexpected whitespace.","","","","ParserWarning enum that represents all the warnings for …","","","","","","For when a user used const on a parameter or input instead …","For when a keyword is deprecated but could be used as a …","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","This module contains the Input error definitions.","","","InputError enum that represents all the errors for the …","","","","","","","","","For when the user tries to assign to a const input.","For when the user tries to assign to a const input.","","","","","","","","","","","For when a struct is created with the same name as a core …","For when the type checker cannot determine the type of an …","","","Attempted to define more that one record variable with the …","Attempted to define more that one struct member with the …","","","For when one of the following types was expected.","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","For when a function doesn’t have a return statement.","","For when the user tries calls a function with the …","","For when the user tries initialize a struct with the …","","","Calls <code>U::from(self)</code>.","For when the parser encountered an invalid assignment …","A call to an invalid associated constant is made e.g., …","For when an invalid field of block is called.","For when an invalid core constant is called.","For when an invalid core function is used.","An invalid access call is made e.g., `SHA256::hash()","For when an integer is not in a valid range.","","","","","Attempted to access an invalid struct variable.","","","","","","","","","","","","","","","For when the user is missing a struct member during …","","","","","","","","","","","","","","","","","","","","","","For when the user tries to assign to a const input.","Attempted to access an invalid struct.","","","For when the user tries to return a unknown variable.","",""],"i":[0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,50,50,50,50,50,50,50,0,0,0,0,0,0,0,0,22,23,19,20,18,22,23,19,20,18,18,18,19,20,18,34,22,23,19,18,34,22,23,19,18,23,19,23,19,18,18,19,20,20,22,23,19,20,18,19,19,22,23,19,20,18,20,34,22,23,18,20,19,22,19,18,19,20,18,20,22,23,19,20,18,22,23,19,20,18,22,23,19,20,18,23,19,19,21,21,21,21,51,21,21,21,0,0,21,51,21,21,25,0,21,0,21,25,21,25,0,0,21,25,21,0,21,21,25,25,21,21,21,21,21,21,21,21,21,21,21,25,25,0,21,25,0,0,0,21,25,21,25,21,25,21,25,0,21,25,0,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,0,44,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,39,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,0,40,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,40,40,0,36,36,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,38,38,0,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,0,41,41,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,0,42,42,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,46,46,0,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,0,37,37,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37],"f":[0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],0,0,[[],1],[1,3],[[1,1],4],0,[1,5],[1,6],[[1,7],8],[[1,7],8],[-1,-1,[]],[[1,-1],2,9],0,[-1,-2,[],[]],0,[[-1,[10,[5]],6,11,5,4,12],1,13],[-1,-2,[],[]],[-1,5,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],0,[-1,15,[]],[1,5],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[16,16],[[-1,-2],2,[],[]],[[],16],[16,3],[[16,16],4],[16,5],[16,6],[[16,7],8],[[16,7],8],[-1,-1,[]],[[16,-1],2,9],[-1,-2,[],[]],[[-1,[10,[5]],6,11,5,4,17,12],16,13],0,[-1,-2,[],[]],[-1,5,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[16,5],0,[[],11],[[],6],[-1,5,[]],[-1,6,[]],[[],4],[[],5],[-1,5,[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[18,18],[[-1,-2],2,[],[]],[[],19],[[],[[20,[-1]]],[]],[[],18],[[-1,21],2,[]],[[22,21],2],[[23,21],2],[[19,-1],2,[[24,[21]]]],[[18,21],2],[[-1,25],2,[]],[[22,25],2],[[23,25],2],[[19,25],2],[[18,25],2],0,[19,26],0,[[19,[14,[-1,21]]],[[14,[-1,2]]],[]],[18,27],[18,28],[[19,21],29],[[[20,[-1]],7],8,30],[[[20,[-1]],7],8,31],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[19,4],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[20,[-1]]],[[32,[-1]]],[]],[-1,[[10,[6]]],[]],[22,[[10,[6]]]],[23,[[10,[6]]]],[18,[[10,[6]]]],[[[20,[-1]]],[[10,[-1]]],[]],[19,[[14,[2,[33,[21]]]]]],0,[[[33,[34]]],19],[[],18],[[],[[2,[19,18]]]],[[[20,[-1]],-1],2,[]],[-1,-2,[],[]],[-1,5,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],[-1,15,[]],0,[19,26],[-1,[[14,[-2,27]]],35,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[21,5],[25,5],[21,6],0,[[21,7],8],[[21,7],8],[[25,7],8],[[25,7],8],[-1,-1,[]],[36,21],[37,21],[38,21],[39,21],[40,21],[41,21],[42,21],[43,21],[44,21],[45,21],[-1,-1,[]],[46,25],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[21,[[10,[47]]]],[25,[[10,[47]]]],[-1,5,[]],[-1,5,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],0,[-1,15,[]],[-1,15,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[43,43],[[-1,-2],2,[],[]],[[],6],[43,5],[43,6],[-1,43,47],[-1,43,47],[-1,43,47],[-1,43,47],[[-1,-2],43,31,47],[[-1,-2],43,31,47],[[-1,-2],43,31,47],[-1,43,47],[-1,43,47],[[-1,-2],43,31,47],[[-1,-2],43,31,47],[[43,7],8],[[43,7],8],[16,43],[1,43],[-1,-1,[]],[-1,-2,[],[]],[[],4],[[],5],[[],6],[[-1,17],43,30],[[-1,17],43,30],[[-1,17],43,30],[[-1,17],43,30],[43,[[10,[47]]]],[-1,-2,[],[]],[-1,5,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[43,5],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,44,47],[44,44],[[-1,-2],2,[],[]],[[],6],[-1,44,47],[44,5],[44,6],[[],44],[-1,44,30],[-1,44,30],[-1,44,30],[-1,44,30],[-1,44,30],[-1,44,30],[-1,44,30],[-1,44,30],[-1,44,30],[-1,44,30],[-1,44,30],[-1,44,30],[-1,44,30],[-1,44,30],[[44,7],8],[[44,7],8],[1,44],[-1,-1,[]],[16,44],[-1,-2,[],[]],[[],4],[[],5],[[],44],[[],6],[[-1,-2],44,30,30],[-1,44,47],[-1,44,47],[44,[[10,[47]]]],[-1,-2,[],[]],[-1,5,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[44,5],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[-1,17],39,47],[39,39],[[-1,-2],2,[],[]],[[],6],[39,5],[39,6],[[-1,-2],39,31,47],[[39,7],8],[[39,7],8],[1,39],[-1,-1,[]],[16,39],[[-1,17],39,30],[[-1,17],39,30],[-1,-2,[],[]],[[],4],[[],5],[[],6],[[-1,-2,17],39,30,30],[[-1,-2,17],39,30,30],[39,[[10,[47]]]],[-1,-2,[],[]],[-1,5,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[39,5],0,0,0,0,[[-1,-2,-3,-4,17],40,30,30,30,30],[-1,-2,[],[]],[-1,-2,[],[]],[40,40],[[-1,-2],2,[],[]],[[],6],[40,5],[40,6],[[40,7],8],[[40,7],8],[16,40],[-1,-1,[]],[1,40],[-1,-2,[],[]],[[],4],[[-1,17],40,30],[[],5],[[],6],[40,[[10,[47]]]],[-1,-2,[],[]],[-1,5,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[-1,3,[]],[[-1,-2,17],40,30,30],[40,5],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[36,36],[[-1,-2],2,[],[]],[[],6],[36,5],[36,6],[[36,7],8],[[36,7],8],[1,36],[16,36],[-1,-1,[]],[[-1,17],36,30],[-1,-2,[],[]],[[],4],[[],5],[[],6],[36,[[10,[47]]]],[-1,-2,[],[]],[-1,5,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[[[48,[-1]],-2,17],36,30,30],[[-1,-2,17],36,30,30],[36,5],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[38,38],[[-1,-2],2,[],[]],[[],6],[38,5],[38,6],[[38,7],8],[[38,7],8],[16,38],[1,38],[-1,-1,[]],[-1,-2,[],[]],[[],4],[17,38],[[],5],[[],6],[38,[[10,[47]]]],[-1,-2,[],[]],[-1,5,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[17,38],[38,5],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[41,41],[[-1,-2],2,[],[]],[[],6],[[-1,-2],41,30,30],[[],41],[41,5],[41,6],[-1,41,30],[[-1,-2],41,30,47],[-1,41,47],[-1,41,47],[[],41],[-1,41,47],[[-1,-2],41,31,47],[-1,41,47],[-1,41,31],[[-1,-2],41,30,31],[-1,41,30],[-1,41,30],[-1,41,31],[-1,41,31],[[-1,-2],41,30,47],[-1,41,31],[-1,41,47],[-1,41,31],[-1,41,30],[-1,41,31],[-1,41,31],[[-1,-2],41,30,47],[-1,41,31],[[-1,-2],41,30,47],[-1,41,30],[[41,7],8],[[41,7],8],[16,41],[-1,-1,[]],[1,41],[-1,-2,[],[]],[[-1,49],41,31],[[-1,-2],41,31,31],[-1,41,30],[-1,41,47],[-1,41,47],[-1,41,47],[-1,41,47],[-1,41,47],[-1,41,47],[[],4],[[],5],[[],6],[41,[[10,[47]]]],[[],41],[-1,-2,[],[]],[-1,5,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[41,5],0,0,0,0,0,[[-1,17],42,30],[17,42],[-1,-2,[],[]],[-1,-2,[],[]],[17,42],[42,42],[[-1,-2],2,[],[]],[[],6],[17,42],[-1,42,30],[42,5],[42,6],[17,42],[[42,7],8],[[42,7],8],[16,42],[-1,-1,[]],[1,42],[[-1,17],42,30],[17,42],[-1,-2,[],[]],[[-1,17],42,30],[[-1,17],42,30],[17,42],[[-1,-2,-3,17],42,30,30,30],[17,42],[[],4],[17,42],[[],42],[-1,42,30],[[],42],[[],42],[-1,42,30],[-1,42,30],[-1,42,30],[[],5],[17,42],[17,42],[[],6],[17,42],[42,[[10,[47]]]],[17,42],[17,42],[-1,-2,[],[]],[-1,5,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[[-1,17],42,30],[[-1,17],42,30],[-1,15,[]],[[-1,-2,17],42,30,30],[17,42],[[-1,[48,[-2]],17],42,30,30],[[-1,-2,17],42,30,30],[[-1,-2,17],42,30,30],[[-1,17],42,30],[[-1,-2,17],42,30,30],[42,5],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[46,46],[[-1,-2],2,[],[]],[[],6],[17,46],[[-1,-2,17],46,30,30],[46,5],[46,6],[[46,7],8],[[46,7],8],[16,46],[1,46],[-1,-1,[]],[-1,-2,[],[]],[[],4],[[],5],[[],6],[46,[[10,[47]]]],[-1,-2,[],[]],[-1,5,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,15,[]],[46,5],0,0,0,0,[17,37],[17,37],[17,37],[[-1,-2,17],37,30,30],[17,37],[-1,-2,[],[]],[-1,-2,[],[]],[17,37],[[-1,17],37,30],[[-1,17],37,30],[17,37],[17,37],[17,37],[37,37],[[-1,-2],2,[],[]],[[],6],[[-1,17],37,30],[[-1,17],37,30],[17,37],[17,37],[[-1,17],37,30],[[-1,17],37,30],[[[32,[-1]]],37,30],[[[32,[-1]]],37,30],[[-1,17],37,30],[[-1,17],37,30],[37,5],[37,6],[[-1,-2,17],37,30,30],[17,37],[17,37],[17,37],[17,37],[17,37],[17,37],[17,37],[17,37],[[-1,-2,17],37,30,30],[17,37],[17,37],[17,37],[[37,7],8],[[37,7],8],[-1,-1,[]],[1,37],[16,37],[17,37],[17,37],[[-1,17],37,30],[17,37],[[-1,-2,17],37,30,30],[[-1,-2,17],37,30,30],[[-1,-2,17],37,30,30],[[-1,-2,17],37,30,30],[[-1,-2,17],37,30,30],[-1,-2,[],[]],[17,37],[[-1,17],37,30],[17,37],[[-1,-2,17],37,30,30],[[-1,-2,17],37,30,30],[[-1,17],37,30],[[-1,-2,17],37,30,30],[[-1,-2,17],37,30,30],[[-1,17],37,30],[[-1,17],37,30],[17,37],[[-1,-2,17],37,30,30],[17,37],[[-1,17],37,30],[[],4],[17,37],[17,37],[17,37],[17,37],[17,37],[17,37],[17,37],[17,37],[[],5],[17,37],[17,37],[[-1,-2,17],37,30,30],[17,37],[17,37],[[],6],[17,37],[17,37],[[-1,-2,17],37,30,30],[17,37],[[-1,-2,17],37,30,30],[37,[[10,[47]]]],[17,37],[17,37],[[-1,-2,17],37,30,30],[-1,-2,[],[]],[-1,5,[]],[[-1,17],37,30],[[-1,17],37,30],[17,37],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[[-1,-2,17],37,30,30],[-1,15,[]],[[-1,-2,17],37,30,30],[[-1,17],37,30],[17,37],[[-1,17],37,30],[[-1,-2,17],37,30,30],[17,37],[37,5]],"c":[],"p":[[3,"Backtraced",8],[15,"tuple"],[15,"str"],[15,"bool"],[3,"String",701],[15,"i32"],[3,"Formatter",702],[6,"Result",702],[8,"Hasher",703],[4,"Option",704],[15,"i8"],[3,"Backtrace",705],[8,"ToString",701],[4,"Result",706],[3,"TypeId",707],[3,"Formatted",38],[3,"Span",708],[3,"BufferEmitter",70],[3,"Handler",70],[3,"Buffer",70],[4,"LeoError",156],[3,"StderrEmitter",70],[3,"HandlerInner",70],[8,"Into",709],[4,"LeoWarning",156],[15,"usize"],[6,"ErrBuffer",70],[6,"WarningBuffer",70],[15,"never"],[8,"Display",702],[8,"Debug",702],[3,"Vec",710],[3,"Box",711],[8,"Emitter",70],[8,"FnOnce",712],[4,"InputError",373],[4,"TypeCheckerError",587],[4,"LoopUnrollerError",403],[4,"CompilerError",309],[4,"FlattenError",342],[4,"PackageError",432],[4,"ParserError",497],[4,"AstError",219],[4,"CliError",261],[3,"Error",713],[4,"ParserWarning",558],[8,"Error",714],[15,"slice"],[3,"FileType",715],[8,"LeoMessageCode",62],[6,"Result",156]]},\
"leo_lang":{"doc":"Table of Contents","t":"AEDDDDIGEDNQNDNQDRNNDAKAAAMAMMAMMMMMMMMMMMMMMMMMAAFAMMMAMMMAMMMKMMAFAAMMMMENNMMMMDMDNNDNENNNNNLLLLLLLLLLMLLMLLLLLLLLLLLLLLLFLLLLLMMFLLLLLLLLLLLLMMMMMMMMCCDCICCQCQCCAKLLLLAALLLLLLLLMMMMMMMMMMMMMMMAALLLLLLLLLLLAMKALLLLLLALLLENNLLLLLLLLLLLLLLLLLLFLLLLLLFMMMMDLLLLLLLFLLLLLLLLLLLMLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLENNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLMLLLMLLLLLLMLLMLLLLLLLDLLLLLLLLLLLLLLLLLLMLLLLLLLDLLLLLLLMLLLLLLLLLMLLMLLLLLLLDLLLLLLLLLLLLLLLLLMLLMLLLLLLDMENNNDMMMMAAADLLLLLLLLLLLLLMLLLLLDHMLLLLLLLMMMMLLMLLLFLMLLLLLLLLLLLLSSSDLLLLLLLLLLLLLLLLDMMMMMMFMDMDMMMDMMD","n":["cli","Account","Build","BuildOptions","CLI","Clean","Command","CurrentNetwork","Example","Execute","Import","Input","Lottery","New","New","Output","Run","SNARKVM_COMMAND","TicTacToe","Token","Update","account","apply","build","clean","cli","command","commands","compiler_options","compiler_options","context","debug","enable_all_ast_snapshots","enable_ast_spans","enable_dce","enable_dce_ast_snapshot","enable_destructured_ast_snapshot","enable_flattened_ast_snapshot","enable_initial_ast_snapshot","enable_initial_input_ast_snapshot","enable_initial_symbol_table_snapshot","enable_inlined_ast_snapshot","enable_ssa_ast_snapshot","enable_symbol_table_spans","enable_type_checked_symbol_table_snapshot","enable_unrolled_ast_snapshot","enable_unrolled_symbol_table_snapshot","endpoint","example","execute","handle_error","helpers","inputs","inputs","list","logger","name","name","name","new","offline","options","path","prelude","quiet","quiet","run","run_with_args","update","updater","private_key","seed","write","write","Account","Import","New","private_key","seed","write","write","Build","options","Clean","Account","Build","CLI","Clean","Commands","Example","Execute","New","Run","Update","augment_args","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow_mut","borrow_mut","command","command","command","command_for_update","command_for_update","debug","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","group_id","handle_error","has_subcommand","init","init","into","into","path","quiet","run_with_args","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","vzip","vzip","command","command","command","command","command","command","command","command","Account","Build","BuildOptions","Clean","Command","Example","Execute","Input","New","Output","Run","Update","account","apply","augment_args","augment_args_for_update","borrow","borrow_mut","build","clean","clone","clone_into","command","command_for_update","default","deref","deref_mut","drop","enable_all_ast_snapshots","enable_ast_spans","enable_dce","enable_dce_ast_snapshot","enable_destructured_ast_snapshot","enable_flattened_ast_snapshot","enable_initial_ast_snapshot","enable_initial_input_ast_snapshot","enable_initial_symbol_table_snapshot","enable_inlined_ast_snapshot","enable_ssa_ast_snapshot","enable_symbol_table_spans","enable_type_checked_symbol_table_snapshot","enable_unrolled_ast_snapshot","enable_unrolled_symbol_table_snapshot","example","execute","execute","execute","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","init","into","log_span","log_span","new","offline","prelude","run","to_owned","try_execute","try_execute","try_from","try_into","type_id","update","update_from_arg_matches","update_from_arg_matches_mut","vzip","Account","Import","New","apply","augment_subcommands","augment_subcommands_for_update","borrow","borrow_mut","command","command_for_update","deref","deref_mut","drop","fmt","from","from_arg_matches","from_arg_matches_mut","has_subcommand","init","into","prelude","print_keys","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip","write_to_env_file","private_key","seed","write","write","Build","apply","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","compile_leo_file","deref","deref_mut","drop","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","init","into","log_span","options","prelude","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip","Clean","apply","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","deref","deref_mut","drop","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","init","into","log_span","prelude","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip","Example","Lottery","TicTacToe","Token","apply","augment_subcommands","augment_subcommands_for_update","borrow","borrow_mut","command","command_for_update","deref","deref_mut","drop","fmt","from","from_arg_matches","from_arg_matches_mut","has_subcommand","init","input_file_string","into","main_file_string","name","prelude","readme_file_string","run_file_string","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip","Execute","apply","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","compiler_options","deref","deref_mut","drop","endpoint","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","init","inputs","into","log_span","name","prelude","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip","New","apply","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","deref","deref_mut","drop","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","init","into","log_span","name","prelude","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip","Run","apply","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","compiler_options","deref","deref_mut","drop","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","init","inputs","into","log_span","name","prelude","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip","Update","apply","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","deref","deref_mut","drop","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","init","into","list","log_span","prelude","quiet","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip","Context","path","Example","Lottery","TicTacToe","Token","Execute","compiler_options","endpoint","inputs","name","context","logger","updater","Context","borrow","borrow_mut","clone","clone_into","deref","deref_mut","dir","drop","from","init","into","new","open_manifest","path","to_owned","try_from","try_into","type_id","vzip","Format","START","ansi","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","display_level","display_target","display_thread_id","display_thread_name","drop","fmt","format","format_event","from","init","init_logger","into","timer","to_owned","try_from","try_into","type_id","vzip","with_ansi","with_level","with_target","with_thread_ids","with_thread_names","with_timer","without_time","LEO_BIN_NAME","LEO_REPO_NAME","LEO_REPO_OWNER","Updater","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","print_cli","show_available_releases","try_from","try_into","type_id","update_available","update_to_latest_release","vzip","Format","ansi","display_level","display_target","display_thread_id","display_thread_name","format","init_logger","timer","New","name","Run","compiler_options","inputs","name","Update","list","quiet","Updater"],"q":[[0,"leo_lang"],[1,"leo_lang::cli"],[70,"leo_lang::cli::Account"],[74,"leo_lang::cli::account"],[77,"leo_lang::cli::account::Account"],[81,"leo_lang::cli::build"],[83,"leo_lang::cli::clean"],[84,"leo_lang::cli::cli"],[144,"leo_lang::cli::cli::Commands"],[152,"leo_lang::cli::commands"],[222,"leo_lang::cli::commands::account"],[251,"leo_lang::cli::commands::account::Account"],[255,"leo_lang::cli::commands::build"],[283,"leo_lang::cli::commands::clean"],[309,"leo_lang::cli::commands::example"],[342,"leo_lang::cli::commands::execute"],[372,"leo_lang::cli::commands::new"],[399,"leo_lang::cli::commands::run"],[428,"leo_lang::cli::commands::update"],[456,"leo_lang::cli::context"],[458,"leo_lang::cli::example"],[462,"leo_lang::cli::execute"],[467,"leo_lang::cli::helpers"],[470,"leo_lang::cli::helpers::context"],[490,"leo_lang::cli::helpers::logger"],[525,"leo_lang::cli::helpers::updater"],[545,"leo_lang::cli::logger"],[554,"leo_lang::cli::new"],[556,"leo_lang::cli::run"],[560,"leo_lang::cli::update"],[563,"leo_lang::cli::updater"],[564,"leo_errors::errors"],[565,"core::marker"],[566,"clap_builder::builder::command"],[567,"core::fmt"],[568,"core::fmt"],[569,"clap_builder"],[570,"core::result"],[571,"clap_builder::util::id"],[572,"core::option"],[573,"core::any"],[574,"tracing::span"],[575,"snarkvm_console_network::testnet3"],[576,"snarkvm_console_account::private_key"],[577,"std::path"],[578,"std::path"],[579,"leo_errors::emitter"],[580,"leo_span::symbol"],[581,"leo_ast::struct"],[582,"indexmap::map"],[583,"alloc::string"],[584,"snarkvm::file::manifest"],[585,"core::clone"],[586,"tracing_subscriber::fmt::format"],[587,"tracing_subscriber::fmt::time"],[588,"core::fmt"],[589,"tracing_subscriber::fmt::format"],[590,"tracing_subscriber::fmt::time"],[591,"tracing_subscriber::registry"],[592,"tracing_subscriber::fmt::format"]],"d":["","Commands to manage Aleo accounts.","Compile and build program command.","Compiler Options wrapper for Build command. Also used by …","CLI Arguments entry point - includes global parameters and …","Clean outputs folder command","Base trait for the Leo CLI, see methods and their …","","The example programs that can be generated.","Build, Prove and Run Leo program with inputs","Derive an Aleo account from a private key.","If the current command requires running another command …","","Create new Leo project","Generates a new Aleo account","Defines the output of this command, which may be used as …","Build, Prove and Run Leo program with inputs","","","","Update Leo to the latest version","","Runs the main operation of this command. This function is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lists all available versions of Leo","","","","","","","","","Runs the prelude and returns the Input of the current …","","Suppress outputs to terminal","","Run command with custom build arguments.","","","Private key plaintext","Seed the RNG with a numeric value.","Write the private key to the .env file.","Write the private key to the .env file.","Commands to manage Aleo accounts.","Derive an Aleo account from a private key.","Generates a new Aleo account","Private key plaintext","Seed the RNG with a numeric value.","Write the private key to the .env file.","Write the private key to the .env file.","Compile and build program command.","","Clean outputs folder command","","","CLI Arguments entry point - includes global parameters and …","","Leo compiler and package manager","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Run command with custom build arguments.","","","","","","","","","","","","","","","","","","","","","","","Compiler Options wrapper for Build command. Also used by …","","Base trait for the Leo CLI, see methods and their …","","","If the current command requires running another command …","","Defines the output of this command, which may be used as …","","","","Runs the main operation of this command. This function is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A wrapper around the <code>apply</code> method. This function sets up …","A wrapper around the <code>apply</code> method. This function sets up …","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Adds a span to the logger via <code>tracing::span</code>. Because of …","Adds a span to the logger via <code>tracing::span</code>. Because of …","","","Runs the prelude and returns the Input of the current …","","","Executes command but empty the result. Comes in handy …","Executes command but empty the result. Comes in handy …","","","","","","","","Commands to manage Aleo accounts.","Derive an Aleo account from a private key.","Generates a new Aleo account","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","Private key plaintext","Seed the RNG with a numeric value.","Write the private key to the .env file.","Write the private key to the .env file.","Compile and build program command.","","","","","","","","Compiles a Leo file in the <code>src/</code> directory.","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","Clean outputs folder command","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","The example programs that can be generated.","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Build, Prove and Run Leo program with inputs","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","Create new Leo project","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","Build, Prove and Run Leo program with inputs","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","Update Leo to the latest version","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Lists all available versions of Leo","","","Suppress outputs to terminal","","","","","","","Project context, manifest, current directory etc All the …","Path at which the command is called, None when default","The example programs that can be generated.","","","","Build, Prove and Run Leo program with inputs","","","","","","","","Project context, manifest, current directory etc All the …","","","","","","","Returns the path to the Leo package.","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Returns the package name as a String. Opens the manifest …","Path at which the command is called, None when default","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Initialize logger with custom format and verbosity.","Calls <code>U::from(self)</code>.","","","","","","","Enable ANSI terminal colors for formatted output.","Sets whether or not an event’s level is displayed.","Sets whether or not an event’s target is displayed.","Sets whether or not the thread ID of the current thread is …","Sets whether or not the name of the current thread is …","Use the given <code>timer</code> for log message timestamps.","Do not emit timestamps with log messages.","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Display the CLI message, if the Leo configuration allows.","Show all available releases for <code>leo</code>.","","","","Check if there is an available update for <code>leo</code> and return …","Update <code>leo</code> to the latest release.","","","","","","","","","Initialize logger with custom format and verbosity.","","Create new Leo project","","Build, Prove and Run Leo program with inputs","","","","Update Leo to the latest version","Lists all available versions of Leo","Suppress outputs to terminal",""],"i":[0,0,0,0,0,0,0,0,0,0,21,53,33,0,21,53,0,0,33,33,0,0,53,0,0,0,4,0,35,37,0,4,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,35,0,0,0,0,35,37,38,0,35,36,37,0,19,24,4,53,4,38,0,0,0,0,54,55,55,54,0,21,21,54,55,55,54,0,24,0,10,10,0,10,0,10,10,10,10,10,4,4,10,10,4,10,4,10,4,10,4,4,10,4,4,10,4,10,4,10,4,10,4,10,4,10,4,10,4,0,10,4,10,4,10,4,4,0,4,10,4,10,4,10,4,10,4,10,4,10,56,57,58,59,60,61,62,63,0,0,0,0,0,0,0,53,0,53,0,0,0,53,19,19,19,19,0,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,0,53,53,19,19,19,19,19,19,19,53,53,0,19,53,0,19,53,53,19,19,19,0,19,19,19,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,0,21,21,21,21,21,21,0,54,55,55,54,0,24,24,24,24,24,24,24,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,0,1,0,33,33,33,0,35,35,35,35,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,64,64,64,0,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,0,40,40,40,40,40,40,0,40,0,36,0,37,37,37,0,38,38,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[-1]]],-1,[]],0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,3],0,0,0,[4,[[2,[5]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[6,6],[6,6],[6,6],[6,6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],6],[[],6],0,[[],6],[[],6],0,[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,5],[7,5],[[4,8],9],[[10,8],9],[-1,-1,[]],[-1,-1,[]],[11,[[13,[4,12]]]],[11,[[13,[10,12]]]],[11,[[13,[4,12]]]],[11,[[13,[10,12]]]],[[],[[15,[14]]]],[[[2,[-1]]],-1,[]],[16,17],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[4,[[2,[5]]]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[[4,11],[[13,[5,12]]]],[[10,11],[[13,[5,12]]]],[[4,11],[[13,[5,12]]]],[[10,11],[[13,[5,12]]]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,3],[6,6],[6,6],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[19,19],[[-1,-2],5,[],[]],[[],6],[[],6],[[],19],[7,-1,[]],[7,-1,[]],[7,5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,1],2,3],[[-1,1],2,3],[[19,8],9],[-1,-1,[]],[11,[[13,[19,12]]]],[11,[[13,[19,12]]]],[[],[[15,[14]]]],[[],7],[-1,-2,[],[]],[-1,20,[]],[-1,20,[]],0,0,[[-1,1],2,3],0,[-1,-2,[],[]],[[-1,1],[[2,[5]]],3],[[-1,1],[[2,[5]]],3],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,18,[]],0,[[19,11],[[13,[5,12]]]],[[19,11],[[13,[5,12]]]],[-1,-2,[],[]],0,0,0,[[21,1],2],[6,6],[6,6],[-1,-2,[],[]],[-1,-2,[],[]],[[],6],[[],6],[7,-1,[]],[7,-1,[]],[7,5],[[21,8],9],[-1,-1,[]],[11,[[13,[21,12]]]],[11,[[13,[21,12]]]],[16,17],[[],7],[-1,-2,[],[]],[[21,1],2],[[[23,[22]]],[[2,[5]]]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,18,[]],[[21,11],[[13,[5,12]]]],[[21,11],[[13,[5,12]]]],[-1,-2,[],[]],[[[23,[22]],1],[[2,[5]]]],0,0,0,0,0,[[24,1],2],[6,6],[6,6],[-1,-2,[],[]],[-1,-2,[],[]],[[],6],[[],6],[[25,26,[27,[22]],26,26,28,19,17],[[2,[[31,[29,30]]]]]],[7,-1,[]],[7,-1,[]],[7,5],[[24,8],9],[-1,-1,[]],[11,[[13,[24,12]]]],[11,[[13,[24,12]]]],[[],[[15,[14]]]],[[],7],[-1,-2,[],[]],[24,20],0,[[24,1],2],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,18,[]],[[24,11],[[13,[5,12]]]],[[24,11],[[13,[5,12]]]],[-1,-2,[],[]],0,[[32,1],2],[6,6],[6,6],[-1,-2,[],[]],[-1,-2,[],[]],[[],6],[[],6],[7,-1,[]],[7,-1,[]],[7,5],[[32,8],9],[-1,-1,[]],[11,[[13,[32,12]]]],[11,[[13,[32,12]]]],[[],[[15,[14]]]],[[],7],[-1,-2,[],[]],[32,20],[[32,1],2],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,18,[]],[[32,11],[[13,[5,12]]]],[[32,11],[[13,[5,12]]]],[-1,-2,[],[]],0,0,0,0,[[33,1],2],[6,6],[6,6],[-1,-2,[],[]],[-1,-2,[],[]],[[],6],[[],6],[7,-1,[]],[7,-1,[]],[7,5],[[33,8],9],[-1,-1,[]],[11,[[13,[33,12]]]],[11,[[13,[33,12]]]],[16,17],[[],7],[33,34],[-1,-2,[],[]],[33,34],[33,34],[[33,1],2],[33,34],[33,34],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,18,[]],[[33,11],[[13,[5,12]]]],[[33,11],[[13,[5,12]]]],[-1,-2,[],[]],0,[[35,1],2],[6,6],[6,6],[-1,-2,[],[]],[-1,-2,[],[]],[[],6],[[],6],0,[7,-1,[]],[7,-1,[]],[7,5],0,[[35,8],9],[-1,-1,[]],[11,[[13,[35,12]]]],[11,[[13,[35,12]]]],[[],[[15,[14]]]],[[],7],0,[-1,-2,[],[]],[35,20],0,[[35,1],2],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,18,[]],[[35,11],[[13,[5,12]]]],[[35,11],[[13,[5,12]]]],[-1,-2,[],[]],0,[[36,1],2],[6,6],[6,6],[-1,-2,[],[]],[-1,-2,[],[]],[[],6],[[],6],[7,-1,[]],[7,-1,[]],[7,5],[[36,8],9],[-1,-1,[]],[11,[[13,[36,12]]]],[11,[[13,[36,12]]]],[[],[[15,[14]]]],[[],7],[-1,-2,[],[]],[36,20],0,[[36,1],2],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,18,[]],[[36,11],[[13,[5,12]]]],[[36,11],[[13,[5,12]]]],[-1,-2,[],[]],0,[[37,1],2],[6,6],[6,6],[-1,-2,[],[]],[-1,-2,[],[]],[[],6],[[],6],0,[7,-1,[]],[7,-1,[]],[7,5],[[37,8],9],[-1,-1,[]],[11,[[13,[37,12]]]],[11,[[13,[37,12]]]],[[],[[15,[14]]]],[[],7],0,[-1,-2,[],[]],[37,20],0,[[37,1],2],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,18,[]],[[37,11],[[13,[5,12]]]],[[37,11],[[13,[5,12]]]],[-1,-2,[],[]],0,[[38,1],2],[6,6],[6,6],[-1,-2,[],[]],[-1,-2,[],[]],[[],6],[[],6],[7,-1,[]],[7,-1,[]],[7,5],[[38,8],9],[-1,-1,[]],[11,[[13,[38,12]]]],[11,[[13,[38,12]]]],[[],[[15,[14]]]],[[],7],[-1,-2,[],[]],0,[38,20],[[38,1],2],0,[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,18,[]],[[38,11],[[13,[5,12]]]],[[38,11],[[13,[5,12]]]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],5,[],[]],[7,-1,[]],[7,-1,[]],[1,[[2,[25]]]],[7,5],[-1,-1,[]],[[],7],[-1,-2,[],[]],[[[15,[25]]],[[2,[1]]]],[1,[[2,[[39,[22]]]]]],0,[-1,-2,[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,18,[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[40,[-1,-2]]],[[40,[-1,-2]]],41,41],[[-1,-2],5,[],[]],[[],[[40,[42,43]]]],[7,-1,[]],[7,-1,[]],0,0,0,0,[7,5],[[[40,[-1,-2]],8],9,44,44],0,[[[40,[42,-1]],[45,[-2,-3]],46,47],9,48,[49,50],51],[-1,-1,[]],[[],7],[[16,7],[[2,[5]]]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,18,[]],[-1,-2,[],[]],[[[40,[-1,-2]],17],[[40,[-1,-2]]],[],[]],[[[40,[-1,-2]],17],[[40,[-1,-2]]],[],[]],[[[40,[-1,-2]],17],[[40,[-1,-2]]],[],[]],[[[40,[-1,-2]],17],[[40,[-1,-2]]],[],[]],[[[40,[-1,-2]],17],[[40,[-1,-2]]],[],[]],[[[40,[-1,-2]],-3],[[40,[-1,-3]]],[],[],[]],[[[40,[-1,-2]]],[[40,[-1,5]]],[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[7,-1,[]],[7,-1,[]],[7,5],[-1,-1,[]],[[],7],[-1,-2,[],[]],[[],5],[[],[[2,[34]]]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,18,[]],[[],[[2,[34]]]],[17,[[2,[52]]]],[-1,-2,[],[]],0,0,0,0,0,0,0,[[16,7],[[2,[5]]]],0,0,0,0,0,0,0,0,0,0,0],"c":[],"p":[[3,"Context",470],[6,"Result",564],[8,"Sized",565],[3,"CLI",84],[15,"tuple"],[3,"Command",566],[15,"usize"],[3,"Formatter",567],[6,"Result",567],[4,"Commands",84],[3,"ArgMatches",568],[6,"Error",569],[4,"Result",570],[3,"Id",571],[4,"Option",572],[15,"str"],[15,"bool"],[3,"TypeId",573],[3,"BuildOptions",152],[3,"Span",574],[4,"Account",222],[3,"Testnet3",575],[3,"PrivateKey",576],[3,"Build",255],[3,"PathBuf",577],[3,"Path",577],[3,"ProgramID",578],[3,"Handler",579],[3,"Symbol",580],[3,"Struct",581],[3,"IndexMap",582],[3,"Clean",283],[4,"Example",309],[3,"String",583],[3,"Execute",342],[3,"New",372],[3,"Run",399],[3,"Update",428],[3,"Manifest",584],[3,"Format",490],[8,"Clone",585],[3,"Full",586],[3,"SystemTime",587],[8,"Debug",567],[3,"FmtContext",588],[3,"Writer",586],[3,"Event",589],[8,"FormatTime",587],[8,"Subscriber",590],[8,"LookupSpan",591],[8,"FormatFields",586],[4,"Status",592],[8,"Command",152],[13,"Import",251],[13,"New",251],[13,"Account",144],[13,"New",144],[13,"Example",144],[13,"Build",144],[13,"Clean",144],[13,"Run",144],[13,"Execute",144],[13,"Update",144],[3,"Updater",525]]},\
"leo_package":{"doc":"leo-package","t":"HAAAAAFAAAHDLLLLLLLLLLLLLLLAHDLLLLLLLLLLLLLLLLAAHDLLLLLLLLLLFLLLLHDLLLLLLLLLLLLMLLLLLLLLLHAAAAHNNNEDNLLLLLLLLLLLLLLLLLLLLLMLLMLLLLLLLLLLLLHDLLLLLLLLLLLMLLLLLLLLLHDLLLLLLLLLLLMLLLLLLLLLHDLLLLLLLLLLLLLLDMLLLLLMLLLLLLLLMMLLLLLMLAAHDMLLMLLLLLLLLLLLLLLLLLLHDLLLLLLLLLLLLLLLLLLLAAHDLLLLLLLLLLLLLLLHDLLLLLLLLLLLLMLLLLLLL","n":["LEO_FILE_EXTENSION","build","imports","inputs","outputs","package","parse_file_paths","root","source","directory","BUILD_DIRECTORY_NAME","BuildDirectory","borrow","borrow_mut","create","deref","deref_mut","drop","from","init","into","open","remove","try_from","try_into","type_id","vzip","directory","IMPORTS_DIRECTORY_NAME","ImportsDirectory","borrow","borrow_mut","create","deref","deref_mut","drop","files","from","init","into","is_empty","remove","try_from","try_into","type_id","vzip","directory","input","INPUTS_DIRECTORY_NAME","InputsDirectory","borrow","borrow_mut","create","deref","deref_mut","drop","files","from","init","into","parse_file_paths","try_from","try_into","type_id","vzip","INPUT_FILE_EXTENSION","InputFile","borrow","borrow_mut","deref","deref_mut","deserialize","drop","exists_at","filename","from","init","into","new","package_name","read_from","setup_file_path","take_from_value","template","try_from","try_into","type_id","vzip","write_to","MAIN_ALEO_FILE_NAME","ast_snapshot","checksum","circuit","directory","AST_SNAPSHOT_FILE_EXTENSION","Canonicalization","ImportsResolved","Initial","Snapshot","SnapshotFile","TypeInference","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","exists_at","fmt","from","from","init","init","into","into","new","package_name","read_from","remove","snapshot","snapshot_file_path","take_from_value","take_from_value","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","CHECKSUM_FILE_EXTENSION","ChecksumFile","borrow","borrow_mut","deref","deref_mut","deserialize","drop","exists_at","from","init","into","new","package_name","read_from","remove","setup_file_path","take_from_value","try_from","try_into","type_id","vzip","write_to","CIRCUIT_FILE_EXTENSION","CircuitFile","borrow","borrow_mut","deref","deref_mut","deserialize","drop","exists_at","from","init","into","new","package_name","read_from","remove","setup_file_path","take_from_value","try_from","try_into","type_id","vzip","write_to","OUTPUTS_DIRECTORY_NAME","OutputsDirectory","borrow","borrow_mut","create","deref","deref_mut","drop","from","init","into","remove","try_from","try_into","type_id","vzip","Package","_phantom","borrow","borrow_mut","can_initialize","deref","deref_mut","description","deserialize","drop","from","init","initialize","into","is_initialized","is_package_name_valid","license","name","new","take_from_value","try_from","try_into","type_id","version","vzip","env","gitignore","ENV_FILENAME","Env","_phantom","borrow","borrow_mut","data","default","deref","deref_mut","deserialize","drop","exists_at","from","from","init","into","new","take_from_value","template","try_from","try_into","type_id","vzip","write_to","GITIGNORE_FILENAME","Gitignore","borrow","borrow_mut","default","deref","deref_mut","deserialize","drop","exists_at","from","init","into","new","take_from_value","template","try_from","try_into","type_id","vzip","write_to","directory","main","SOURCE_DIRECTORY_NAME","SourceDirectory","borrow","borrow_mut","check_files","create","deref","deref_mut","drop","files","from","init","into","try_from","try_into","type_id","vzip","MAIN_FILENAME","MainFile","borrow","borrow_mut","deref","deref_mut","deserialize","drop","exists_at","filename","from","init","into","new","package_name","take_from_value","template","try_from","try_into","type_id","vzip","write_to"],"q":[[0,"leo_package"],[9,"leo_package::build"],[10,"leo_package::build::directory"],[27,"leo_package::imports"],[28,"leo_package::imports::directory"],[46,"leo_package::inputs"],[48,"leo_package::inputs::directory"],[65,"leo_package::inputs::input"],[89,"leo_package::outputs"],[94,"leo_package::outputs::ast_snapshot"],[138,"leo_package::outputs::checksum"],[161,"leo_package::outputs::circuit"],[184,"leo_package::outputs::directory"],[200,"leo_package::package"],[225,"leo_package::root"],[227,"leo_package::root::env"],[251,"leo_package::root::gitignore"],[272,"leo_package::source"],[274,"leo_package::source::directory"],[291,"leo_package::source::main"],[313,"std::fs"],[314,"std::path"],[315,"alloc::vec"],[316,"leo_errors::errors"],[317,"std::path"],[318,"core::result"],[319,"core::any"],[320,"serde::de"],[321,"alloc::borrow"],[322,"serde_json::value"],[323,"core::fmt"],[324,"core::fmt"],[325,"core::default"]],"d":["","","","","","","","","","","","","","","Creates a directory at the provided path with the default …","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Returns the path to the build directory if it exists.","Removes the directory at the provided path.","","","","","","","","","","Creates a directory at the provided path with the default …","","","","Returns a list of files in the imports directory.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Returns true if the imports directory does not exist or …","Removes the directory at the provided path.","","","","","","The <code>program.in</code> file.","","","","","Creates a directory at the provided path with the default …","","","","Returns a list of files in the input directory.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","Reads the program input variables from the given file path …","","","","","","","","Writes the standard input format to a file.","","The serialized struct output file.","The build checksum file.","The serialized struct output file.","","","","","","Enum to handle all 3 types of snapshots.","Generic Snapshot file wrapper. Each package can have up to …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Reads the serialized struct from the given file path if it …","Removes the serialized struct at the given path if it …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","Reads the checksum from the given file path if it exists.","Removes the checksum at the given path if it exists. …","","","","","","","Writes the given checksum to a file.","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","Reads the serialized struct from the given file path if it …","Removes the serialized struct at the given path if it …","","","","","","","Writes the given serialized struct to a file.","","","","","Creates a directory at the provided path with the default …","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Removes the directory at the provided path.","","","","","","","","","Returns <code>true</code> if a package is can be initialized at a given …","","","","","","Returns the argument unchanged.","","Creates a Leo package at the given path","Calls <code>U::from(self)</code>.","Returns <code>true</code> if a package is initialized at the given path","Returns <code>true</code> if the package name is valid.","","","","","","","","","","The <code>.env</code> file.","The <code>.gitignore</code> file.","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","The <code>main.leo</code> file.","","","","","Check that the files in the source directory are valid.","Creates a directory at the provided path with the default …","","","","Returns a list of files in the source directory.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,0,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,0,0,0,32,32,32,32,32,32,32,32,32,32,0,32,32,32,32,0,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,0,0,0,0,17,17,17,0,0,17,17,18,17,18,17,18,17,18,17,18,17,18,18,17,17,18,17,18,17,18,18,18,18,18,18,18,17,18,17,17,18,17,18,17,18,17,18,0,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,0,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,0,33,33,33,33,33,33,33,33,33,33,33,33,33,33,0,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,0,0,0,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,0,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,0,0,0,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,0,0,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29],"f":[0,0,0,0,0,0,[[1,[3,[2]]],[[5,[4]]]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[6,[[5,[2]]]],[7,-1,[]],[7,-1,[]],[7,4],[-1,-1,[]],[[],7],[-1,-2,[],[]],[6,[[5,[2]]]],[6,[[5,[8]]]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[6,[[5,[2]]]],[7,-1,[]],[7,-1,[]],[7,4],[6,[[5,[[3,[2]]]]]],[-1,-1,[]],[[],7],[-1,-2,[],[]],[6,[[5,[11]]]],[6,[[5,[8]]]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[6,[[5,[4]]]],[7,-1,[]],[7,-1,[]],[7,4],[6,[[5,[[3,[2]]]]]],[-1,-1,[]],[[],7],[-1,-2,[],[]],[[1,[3,[2]]],[[5,[4]]]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[7,-1,[]],[7,-1,[]],[-1,[[9,[12]]],13],[7,4],[[12,6],11],[12,8],[-1,-1,[]],[[],7],[-1,-2,[],[]],[14,12],0,[[12,6],[[5,[[4,[8,[15,[6]]]]]]]],[[12,6],[[15,[6]]]],[[16,14],[[9,[-1]]],[]],[12,8],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,-2,[],[]],[[12,6],[[5,[4]]]],0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[9,[17]]],13],[-1,[[9,[18]]],13],[7,4],[7,4],[[18,6],11],[[17,19],20],[-1,-1,[]],[-1,-1,[]],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[[14,17],18],0,[[18,6],[[5,[8]]]],[[18,6],[[5,[11]]]],0,[[18,6],[[15,[6]]]],[[16,14],[[9,[-1]]],[]],[[16,14],[[9,[-1]]],[]],[-1,8,[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[7,-1,[]],[7,-1,[]],[-1,[[9,[21]]],13],[7,4],[[21,6],11],[-1,-1,[]],[[],7],[-1,-2,[],[]],[14,21],0,[[21,6],[[5,[8]]]],[[21,6],[[5,[11]]]],[[21,6],[[15,[6]]]],[[16,14],[[9,[-1]]],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,-2,[],[]],[[21,6,8],[[5,[4]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[7,-1,[]],[7,-1,[]],[-1,[[9,[22]]],13],[7,4],[[22,6],11],[-1,-1,[]],[[],7],[-1,-2,[],[]],[14,22],0,[[22,6],[[5,[8]]]],[[22,6],[[5,[11]]]],[[22,6],[[15,[6]]]],[[16,14],[[9,[-1]]],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,-2,[],[]],[[22,6,8],[[5,[4]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[6,[[5,[2]]]],[7,-1,[]],[7,-1,[]],[7,4],[-1,-1,[]],[[],7],[-1,-2,[],[]],[6,[[5,[8]]]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[14,6],11],[7,-1,[]],[7,-1,[]],0,[-1,[[9,[[23,[-2]]]]],13,24],[7,4],[-1,-1,[]],[[],7],[[14,6],[[5,[4]]]],[-1,-2,[],[]],[[14,6],11],[14,11],0,0,[14,[[5,[[23,[-1]]]]],24],[[16,14],[[9,[-1]]],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],0,[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[[],[[25,[-1]]],[26,24]],[7,-1,[]],[7,-1,[]],[-1,[[9,[[25,[-2]]]]],13,24],[7,4],[6,11],[-1,-1,[]],[8,[[25,[-1]]],24],[[],7],[-1,-2,[],[]],[[],[[5,[[25,[-1]]]]],24],[[16,14],[[9,[-1]]],[]],[[],[[5,[8]]]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,-2,[],[]],[[[25,[-1]],6],[[5,[4]]],24],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],27],[7,-1,[]],[7,-1,[]],[-1,[[9,[27]]],13],[7,4],[6,11],[-1,-1,[]],[[],7],[-1,-2,[],[]],[[],27],[[16,14],[[9,[-1]]],[]],[27,8],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,-2,[],[]],[[27,6],[[5,[4]]]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[28,[2]]],[[5,[4]]]],[6,[[5,[4]]]],[7,-1,[]],[7,-1,[]],[7,4],[6,[[5,[[3,[2]]]]]],[-1,-1,[]],[[],7],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[7,-1,[]],[7,-1,[]],[-1,[[9,[29]]],13],[7,4],[6,11],[[],8],[-1,-1,[]],[[],7],[-1,-2,[],[]],[14,29],0,[[16,14],[[9,[-1]]],[]],[29,8],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,-2,[],[]],[[29,6],[[5,[4]]]]],"c":[],"p":[[3,"ReadDir",313],[3,"PathBuf",314],[3,"Vec",315],[15,"tuple"],[6,"Result",316],[3,"Path",314],[15,"usize"],[3,"String",317],[4,"Result",318],[3,"TypeId",319],[15,"bool"],[3,"InputFile",65],[8,"Deserializer",320],[15,"str"],[4,"Cow",321],[4,"Value",322],[4,"Snapshot",94],[3,"SnapshotFile",94],[3,"Formatter",323],[6,"Result",323],[3,"ChecksumFile",138],[3,"CircuitFile",161],[3,"Package",200],[8,"Network",324],[3,"Env",227],[8,"Default",325],[3,"Gitignore",251],[15,"slice"],[3,"MainFile",291],[3,"BuildDirectory",10],[3,"ImportsDirectory",28],[3,"InputsDirectory",48],[3,"OutputsDirectory",184],[3,"SourceDirectory",274]]},\
"leo_parser":{"doc":"The parser to convert Leo code text into an [<code>AST</code>] type.","t":"RFFAAAAAAFFAARDMLLLLLLLLMLLLLLLLLLLLLLMLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMLLLLLLRFRRCAAFFDLLLLLLLLLFFLLLLLFLMLLLMLLLLNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNNNNNNNNNNNNNNNNNNNNNNNNNRNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["KEYWORD_TOKENS","parse_ast","parse_program_inputs","parser","tokenizer","context","expression","file","input","parse","parse_input","statement","type_","DUMMY_EOF","ParserContext","allow_identifier_underscores","bin_expr","borrow","borrow_mut","bump","check","check_int","deref","deref_mut","disallow_struct_construction","drop","eat","eat_any","eat_bin_op","eat_group_partial","eat_identifier","eat_whole_number","emit_err","emit_warning","expect","expect_any","expect_identifier","from","handler","has_next","init","into","look_ahead","mk_ident_prev","new","node_builder","parse_additive_expression","parse_annotation","parse_array_expression","parse_assert_statement","parse_assign_statement","parse_associated_access_expression","parse_bin_expr","parse_bitwise_and_expression","parse_bitwise_exclusive_or_expression","parse_bitwise_inclusive_or_expression","parse_block","parse_boolean_and_expression","parse_boolean_or_expression","parse_bracket_comma_list","parse_cast_expression","parse_conditional_expression","parse_conditional_statement","parse_console_statement","parse_const_declaration_statement","parse_definition_statement","parse_equality_expression","parse_exponential_expression","parse_expr_tuple","parse_expression","parse_function","parse_function_output","parse_import","parse_input","parse_input_definition","parse_input_file","parse_list","parse_loop_statement","parse_mapping","parse_member_variable_declaration","parse_method_call_expression","parse_mode","parse_multiplicative_expression","parse_ordering_expression","parse_output","parse_paren_comma_list","parse_postfix_expression","parse_primary_expression","parse_primitive_type","parse_program","parse_program_scope","parse_return_statement","parse_section","parse_shift_expression","parse_statement","parse_struct","parse_struct_init_expression","parse_struct_member","parse_struct_members","parse_tuple_expression","parse_type","parse_typed_ident","parse_unary_expression","peek_group_coordinate","peek_is_external","peek_is_left_par","prev_token","token","token_to_int_type","tokens","try_from","try_into","type_id","unexpected","unexpected_item","vzip","INT_TYPES","assert_no_whitespace","ASSIGN_TOKENS","TYPE_TOKENS","KEYWORD_TOKENS","lexer","token","tokenize","tokenize_iter","SpannedToken","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","dummy","eat_identifier","ensure_no_bidi_override","fmt","fmt","from","init","into","is_bidi_override","serialize","span","take_from_value","to_owned","to_string","token","try_from","try_into","type_id","vzip","Add","AddAssign","Address","AddressLit","And","AndAssign","Arrow","As","Assert","AssertEq","AssertNeq","Assign","At","BigArrow","BitAnd","BitAndAssign","BitOr","BitOrAssign","BitXor","BitXorAssign","Block","Bool","Brace","Bracket","Colon","Comma","CommentBlock","CommentLine","Console","Const","Constant","Delimiter","Div","DivAssign","Dot","DotDot","DoubleColon","Else","Eof","Eq","False","Field","Finalize","For","Function","Group","Gt","GtEq","I128","I16","I32","I64","I8","Identifier","If","Import","In","Inline","Integer","KEYWORD_TOKENS","LeftCurly","LeftParen","LeftSquare","Leo","Let","Lt","LtEq","Mapping","Mul","MulAssign","Not","NotEq","Or","OrAssign","Parenthesis","Pow","PowAssign","Private","Program","Public","Question","Record","Rem","RemAssign","Return","RightCurly","RightParen","RightSquare","Scalar","SelfLower","Semicolon","Shl","ShlAssign","Shr","ShrAssign","Signature","StaticString","String","Struct","Sub","SubAssign","Then","Token","Transition","True","U128","U16","U32","U64","U8","Underscore","WhiteSpace","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","eat","eat_integer","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","init","init","into","into","is_keyword","keyword_to_symbol","open_close_pair","serialize","take_from_value","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":[[0,"leo_parser"],[5,"leo_parser::parser"],[13,"leo_parser::parser::context"],[116,"leo_parser::parser::expression"],[118,"leo_parser::parser::statement"],[119,"leo_parser::parser::type_"],[120,"leo_parser::tokenizer"],[125,"leo_parser::tokenizer::lexer"],[153,"leo_parser::tokenizer::token"],[311,"leo_errors::emitter"],[312,"leo_ast::common::node_builder"],[313,"leo_span::span"],[314,"leo_ast"],[315,"leo_errors::errors"],[316,"leo_ast::input::input_ast"],[317,"leo_ast::program"],[318,"leo_ast::input::input_ast"],[319,"leo_ast::expressions::binary"],[320,"core::option"],[321,"leo_ast::groups::group_literal"],[322,"leo_ast::common::identifier"],[323,"leo_ast::common::positive_number"],[324,"leo_span::span"],[325,"leo_errors::errors::parser::parser_warnings"],[326,"core::ops::function"],[327,"leo_span::symbol"],[328,"alloc::vec"],[329,"leo_ast::functions::annotation"],[330,"leo_ast::statement"],[331,"core::ops::function"],[332,"leo_ast::statement::conditional"],[333,"leo_ast::statement::console::console_statement"],[334,"leo_ast::statement::const_"],[335,"leo_ast::statement::definition"],[336,"leo_ast::functions"],[337,"leo_ast::functions::output"],[338,"leo_ast::functions::input"],[339,"leo_ast::input::definition"],[340,"leo_ast::statement::iteration"],[341,"leo_ast::mapping"],[342,"leo_ast::struct::member"],[343,"leo_ast::functions::mode"],[344,"leo_ast::functions::output"],[345,"leo_ast::program::program_scope"],[346,"leo_ast::statement::return_"],[347,"leo_ast::input::section"],[348,"leo_ast::struct"],[349,"leo_ast::expressions::struct_init"],[350,"leo_ast::groups::group_coordinate"],[351,"leo_ast::types::integer_type"],[352,"core::result"],[353,"core::any"],[354,"core::fmt"],[355,"core::iter::traits::iterator"],[356,"serde::de"],[357,"core::iter::adapters::peekable"],[358,"alloc::string"],[359,"core::fmt"],[360,"serde_json::value"]],"d":["Represents all valid Leo keyword tokens. This differs from …","Creates a new AST from a given file path and source code …","Parses program inputs from the input file path","The parser to convert Leo code text into an <code>Program</code> AST …","The tokenizer to convert Leo code text into tokens.","","","","","Creates a new program from a given file path and source …","Parses an input file at the given file <code>path</code> and <code>source</code> …","","","Dummy span used to appease borrow checker.","Stores a program in tokenized format plus additional …","true if parsing an identifier inside an input file.","Constructs a binary expression <code>left op right</code>.","","","Advances the parser cursor by one token.","Checks whether the current token is <code>tok</code>.","Checks whether the current token is a <code>Token::Int(_)</code>.","","","true if parsing an expression for if and loop statements …","","Returns <code>true</code> if the next token is equal to the given token.","Eats any of the given <code>tokens</code>, returning <code>true</code> if anything …","Eats one of binary operators matching any in <code>tokens</code>.","Removes the next two tokens if they are a pair of …","Eats the next token if its an identifier and returns it.","Removes the next token if it is a [<code>Token::Integer(_)</code>] and …","Emit the error <code>err</code>.","Emit the warning <code>warning</code>.","Eats the expected <code>token</code>, or errors.","Eats one of the expected <code>tokens</code>, or errors.","Expects an <code>Identifier</code>, or errors.","Returns the argument unchanged.","Handler used to side-channel emit errors from the parser.","Returns true if the next token exists.","","Calls <code>U::from(self)</code>.","Look-ahead <code>dist</code> tokens of <code>self.token</code> and get access to …","At the previous token, return and make an identifier with …","Returns a new <code>ParserContext</code> type given a vector of tokens.","Counter used to generate unique node ids.","Returns an <code>Expression</code> AST node if the next tokens …","Returns an <code>Annotation</code> AST node if the next tokens …","Returns an <code>Expression</code> AST node if the next tokens …","Returns a <code>AssertStatement</code> AST node if the next tokens …","Returns a <code>AssignStatement</code> AST node if the next tokens …","Returns an <code>Expression</code> AST node if the next tokens …","Parses a left-associative binary expression …","Returns an <code>Expression</code> AST node if the next tokens …","Returns an <code>Expression</code> AST node if the next tokens …","Returns an <code>Expression</code> AST node if the next tokens …","Returns a <code>Block</code> AST node if the next tokens represent a …","Returns an <code>Expression</code> AST node if the next tokens …","Returns an <code>Expression</code> AST node if the next tokens represent","Parse a list separated by <code>,</code> and delimited by brackets.","Returns an <code>Expression</code> AST node if the next tokens …","Returns an <code>Expression</code> AST node if the next tokens represent","Returns a <code>ConditionalStatement</code> AST node if the next tokens …","Returns a <code>ConsoleStatement</code> AST node if the next tokens …","Returns a <code>ConstDeclaration</code> AST node if the next tokens …","Returns a <code>DefinitionStatement</code> AST node if the next tokens …","Returns an <code>Expression</code> AST node if the next tokens …","Returns an <code>Expression</code> AST node if the next tokens …","Parses a tuple of <code>Expression</code> AST nodes.","Returns an <code>Expression</code> AST node if the next token is an …","Returns an [<code>(Identifier, Function)</code>] AST node if the next …","Returns a <code>FunctionOutput</code> AST node if the next tokens …","Parses an import statement <code>import foo.leo;</code>.","Returns a <code>Input</code> AST node if the next tokens represent a …","Parses a single parameter definition: …","Returns a [<code>ParsedInputFile</code>] struct filled with the data …","Parses a list of <code>T</code>s using <code>inner</code> The opening and closing …","Returns an <code>IterationStatement</code> AST node if the next tokens …","Parses a mapping declaration, e.g. …","Returns a <code>Member</code> AST node if the next tokens represent a …","Returns an <code>Expression</code> AST node if the next tokens …","Returns a [<code>ParamMode</code>] AST node if the next tokens …","Returns an <code>Expression</code> AST node if the next tokens …","Returns an <code>Expression</code> AST node if the next tokens …","Returns a <code>Output</code> AST node if the next tokens represent a …","Parse a list separated by <code>,</code> and delimited by parens.","Returns an <code>Expression</code> AST node if the next tokens …","Returns an <code>Expression</code> AST node if the next token is a …","Returns a [<code>(Type, Span)</code>] tuple of AST nodes if the next …","Returns a <code>Program</code> AST if all tokens can be consumed and …","Parsers a program scope <code>program foo.aleo { ... }</code>.","Returns a <code>ReturnStatement</code> AST node if the next tokens …","Parses particular section in the Input or State file. …","Returns an <code>Expression</code> AST node if the next tokens …","Returns a <code>Statement</code> AST node if the next tokens represent …","Parses a struct or record definition, e.g., …","Returns an <code>Expression</code> AST node if the next tokens …","","Returns a <code>Vec&lt;Member&gt;</code> AST node if the next tokens …","Returns an <code>Expression</code> AST node if the next tokens …","Returns a [<code>(Type, Span)</code>] tuple of AST nodes if the next …","Parses <code>IDENT: TYPE</code>.","Returns an <code>Expression</code> AST node if the next tokens …","Returns a reference to the next token if it is a …","","Returns true if the current token is <code>(</code>.","The previous token, i.e., if <code>p.tokens = [&#39;3&#39;, *, &#39;4&#39;]</code>, …","The current token, i.e., if <code>p.tokens = [&#39;3&#39;, *, &#39;4&#39;]</code>, then …","Returns a <code>IntegerType</code> AST node if the given token is a …","All un-bumped tokens.","","","","Returns an unexpected error at the current token.","","","","","","","","","","Creates a new vector of spanned tokens from a given file …","Yields spanned tokens from the given source code text.","","","","","","","","","","Returns a dummy token at a dummy span.","Eat an identifier, that is, a string matching ‘[a-zA-Z][…","Ensure that <code>string</code> contains no Unicode Bidirectional …","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Checks if a char is a Unicode Bidirectional Override code …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>{ ... }</code>","<code>[ ... ]</code>","","","","","","","","Describes delimiters of a token sequence.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Represents all valid Leo keyword tokens. This differs from …","","","","","","","","","","","","","","","<code>( ... )</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","Represents all valid Leo syntax tokens.","","","","","","","","","","","","","","","","","","","","","","","","","Returns a tuple: [(token length, token)] if the next token …","Returns a tuple: [(integer length, integer token)] if an …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the <code>self</code> token equals a Leo keyword.","Converts <code>self</code> to the corresponding <code>Symbol</code> if it <code>is_keyword</code>.","Returns the open/close tokens that the delimiter …","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,0,0,0,0,0,0,0,0,27,27,27,27,27,27,27,27,27,0,0,27,27,27,27,27,0,27,27,27,27,27,27,27,27,27,27,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,41,41,14,14,14,14,14,14,14,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,41,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,14,14,14,14,14,14,14,14,14,14,41,14,41,14,41,14,41,14,41,14,41,14,14,41,14,14,14,14,14,14,14,14,14,14,41,14,41,14,41,14,14,41,14,14,14,41,14,14,41,14,41,14,41,14,41],"f":[0,[[1,2,3,4],[[6,[5]]]],[[1,2,3,4],[[6,[7]]]],0,0,0,0,0,0,[[1,2,3,4],[[6,[8]]]],[[1,2,3,4],[[6,[9]]]],0,0,0,0,0,[[2,10,10,11],10],[-1,-2,[],[]],[-1,-2,[],[]],[12,13],[[12,14],15],[12,15],[16,-1,[]],[16,-1,[]],0,[16,13],[[12,14],15],[[12,[17,[14]]],15],[[12,[17,[14]]],[[18,[11]]]],[12,[[18,[[6,[19]]]]]],[12,[[18,[20]]]],[12,[[6,[[13,[21,22]]]]]],[[12,23],13],[[12,24],13],[[12,14],[[6,[22]]]],[[12,[17,[14]]],[[6,[22]]]],[12,[[6,[20]]]],[-1,-1,[]],0,[12,15],[[],16],[-1,-2,[],[]],[[12,16,-1],-2,25,[]],[[12,26],20],[[1,2,[28,[27]]],12],0,[12,[[6,[10]]]],[12,[[6,[29]]]],[12,[[6,[10]]]],[12,[[6,[30]]]],[12,[[6,[30]]]],[[12,10],[[6,[10]]]],[[12,[17,[14]],-1],[[6,[10]]],31],[12,[[6,[10]]]],[12,[[6,[10]]]],[12,[[6,[10]]]],[12,[[6,[32]]]],[12,[[6,[10]]]],[12,[[6,[10]]]],[[12,-1],[[6,[[13,[[28,[-2]],15,22]]]]],31,[]],[12,[[6,[10]]]],[12,[[6,[10]]]],[12,[[6,[33]]]],[12,[[6,[34]]]],[12,[[6,[35]]]],[12,[[6,[36]]]],[12,[[6,[10]]]],[12,[[6,[10]]]],[12,[[6,[[13,[[28,[10]],15,22]]]]]],[12,[[6,[10]]]],[12,[[6,[[13,[26,37]]]]]],[12,[[6,[38]]]],[12,[[6,[[13,[26,[13,[8,22]]]]]]]],[12,[[6,[39]]]],[12,[[6,[40]]]],[12,[[6,[9]]]],[[12,41,[18,[14]],-1],[[6,[[13,[[28,[-2]],15,22]]]]],31,[]],[12,[[6,[42]]]],[12,[[6,[[13,[26,43]]]]]],[12,[[6,[44]]]],[[12,10,20],[[6,[10]]]],[12,[[6,[45]]]],[12,[[6,[10]]]],[12,[[6,[10]]]],[12,[[6,[46]]]],[[12,-1],[[6,[[13,[[28,[-2]],15,22]]]]],31,[]],[12,[[6,[10]]]],[12,[[6,[10]]]],[12,[[6,[[13,[47,22]]]]]],[12,[[6,[8]]]],[12,[[6,[48]]]],[12,[[6,[49]]]],[12,[[6,[50]]]],[12,[[6,[10]]]],[12,[[6,[30]]]],[12,[[6,[[13,[26,51]]]]]],[[12,20],[[6,[10]]]],[12,[[6,[52]]]],[12,[[6,[[13,[[28,[44]],22]]]]]],[12,[[6,[10]]]],[12,[[6,[[13,[47,22]]]]]],[12,[[6,[[13,[20,47,22]]]]]],[12,[[6,[10]]]],[[12,16],[[18,[53]]]],[12,15],[12,15],0,0,[14,[[18,[54]]]],0,[-1,[[55,[-2]]],[],[]],[-1,[[55,[-2]]],[],[]],[-1,56,[]],[[12,-1],[[6,[-2]]],57,[]],[[27,[17,[14]]],23],[-1,-2,[],[]],0,[[22,22,3,3],[[6,[13]]]],0,0,0,0,0,[[3,4],[[6,[[28,[27]]]]]],[[3,4],[[0,[58]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[27,27],[[-1,-2],13,[],[]],[16,-1,[]],[16,-1,[]],[-1,[[55,[27]]],59],[16,13],[[],27],[[[60,[-1]]],[[18,[61]]],58],[3,[[6,[13]]]],[[27,62],63],[[27,62],63],[-1,-1,[]],[[],16],[-1,-2,[],[]],[64,15],[[27,-1],55,65],0,[[66,3],[[55,[-1]]],[]],[-1,-2,[],[]],[-1,61,[]],0,[-1,[[55,[-2]]],[],[]],[-1,[[55,[-2]]],[],[]],[-1,56,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[14,14],[41,41],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[16,-1,[]],[-1,[[55,[14]]],59],[16,13],[16,13],[3,[[6,[[13,[16,14]]]]]],[[[60,[-1]]],[[6,[[13,[16,14]]]]],58],[[14,14],15],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[14,62],63],[[14,62],63],[-1,-1,[]],[-1,-1,[]],[[],16],[[],16],[-1,-2,[],[]],[-1,-2,[],[]],[14,15],[14,[[18,[26]]]],[41,[[13,[14,14]]]],[[14,-1],55,65],[[66,3],[[55,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,61,[]],[-1,[[55,[-2]]],[],[]],[-1,[[55,[-2]]],[],[]],[-1,[[55,[-2]]],[],[]],[-1,[[55,[-2]]],[],[]],[-1,56,[]],[-1,56,[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[3,"Handler",311],[3,"NodeBuilder",312],[15,"str"],[3,"BytePos",313],[3,"Ast",314],[6,"Result",315],[3,"InputData",316],[3,"Program",317],[3,"InputAst",316],[4,"Expression",318],[4,"BinaryOperation",319],[3,"ParserContext",13],[15,"tuple"],[4,"Token",153],[15,"bool"],[15,"usize"],[15,"slice"],[4,"Option",320],[3,"GroupTuple",321],[3,"Identifier",322],[3,"NonNegativeNumber",323],[3,"Span",313],[4,"ParserError",324],[4,"ParserWarning",325],[8,"FnOnce",326],[3,"Symbol",327],[3,"SpannedToken",125],[3,"Vec",328],[3,"Annotation",329],[4,"Statement",330],[8,"FnMut",326],[3,"Block",331],[3,"ConditionalStatement",332],[3,"ConsoleStatement",333],[3,"ConstDeclaration",334],[3,"DefinitionStatement",335],[3,"Function",336],[3,"FunctionOutput",337],[4,"Input",338],[3,"Definition",339],[4,"Delimiter",153],[3,"IterationStatement",340],[3,"Mapping",341],[3,"Member",342],[4,"Mode",343],[4,"Output",337],[4,"Type",344],[3,"ProgramScope",345],[3,"ReturnStatement",346],[3,"Section",347],[3,"Struct",348],[3,"StructVariableInitializer",349],[4,"GroupCoordinate",350],[4,"IntegerType",351],[4,"Result",352],[3,"TypeId",353],[8,"Display",354],[8,"Iterator",355],[8,"Deserializer",356],[3,"Peekable",357],[3,"String",358],[3,"Formatter",354],[6,"Result",354],[15,"char"],[8,"Serializer",359],[4,"Value",360]]},\
"leo_passes":{"doc":"leo-passes","t":"AAAAAAAAAAAAAAAADMLLMMLLLLLMMMLLMLMMMMMLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAAAAAADDLLLLLLLLMLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLDLLLLLLMLLLLLLLLLLLLLLMLMMLLLLLLLGNDEGIGLLLLLLLLLLLLLMMMMLLLLLLLLLMMMMLLLLLLLLLDLLLLLLLLLLLLLLLMLLLLLMLMLLLLLLDLLLLLLLLLLMLLLLDLLLLLLLLLLLLLLAMLLLLLLLLLLLLLMLLMMLMLLLLLLLLLLLAMLDDMLLLLLLLLLLLLLLLLMLLLLMLLMMLLMMLLLLLLLLLLLLMLLNNNDELLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLMLLLLDLLLLLLLLLLLLMLLLLLLLAAAADLLLLLLLLLMLMLLLLLLLLLLLLLLLLMLAAAADMLLLLLLLLLLMLLLLLLLLLLLMLMLAAAADMLLLMLLLLLLLLLLLMLLLLLLLLLLLMLMLLLLLLMLLAAAAADMLLLLLLLLLMLLLLLLLLLMLLLLDMLLMLLLLLLLLMLLLLLLLLLMLLLMLAAAAAENNIDLLLLLMMLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLMLLLLLLLLLMLLMLMLLLLLLLLMMLLLMLLLQQIKAAAADMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLMLMLLLMLLADLLLLLLLMLLLMLLLLLLLLAAAAFRRRRRRRRRDRLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLMLLMMMLLMMMLMMLLLMFMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["code_generation","common","dead_code_elimination","destructuring","flattening","function_inlining","loop_unrolling","pass","static_single_assignment","symbol_table_creation","type_checking","generator","visit_expressions","visit_program","visit_statements","visit_type","CodeGenerator","_call_graph","borrow","borrow_mut","composite_mapping","current_function","deref","deref_mut","do_pass","drop","from","futures","global_mapping","in_finalize","init","into","is_transition_function","new","next_register","program","program_id","struct_graph","symbol_table","try_from","try_into","type_id","type_table","variable_mapping","visit_access","visit_array","visit_array_access","visit_assert","visit_assign","visit_associated_constant","visit_associated_function","visit_binary","visit_block","visit_call","visit_cast","visit_conditional","visit_console","visit_definition","visit_err","visit_expression","visit_expression_statement","visit_function","visit_identifier","visit_import","visit_iteration","visit_mapping","visit_member_access","visit_program","visit_record","visit_return","visit_statement","visit_struct","visit_struct_init","visit_struct_or_record","visit_ternary","visit_tuple","visit_type","visit_type_with_visibility","visit_unary","visit_unit","visit_value","vzip","assigner","constant_propagation_table","graph","rename_table","replacer","symbol_table","type_table","Assigner","AssignerInner","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","counter","default","default","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","init","init","inner","into","into","simple_assign_statement","simple_assign_statement","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unique_symbol","unique_symbol","vzip","vzip","ConstantPropagationTable","borrow","borrow_mut","clone","clone_into","constant_in_local_scope","constant_in_parent_scope","constants","default","deref","deref_mut","deserialize","drop","fmt","from","init","insert_block","insert_constant","insert_fn_scope","into","lookup_constant","lookup_scope_by_index","parent","scope_index","scope_index","scopes","serialize","take_from_value","to_owned","try_from","try_into","type_id","vzip","CallGraph","CycleDetected","DiGraph","DiGraphError","ImportGraph","Node","StructGraph","add_edge","borrow","borrow","borrow_mut","borrow_mut","contains_cycle_from","contains_node","deref","deref","deref_mut","deref_mut","drop","drop","edges","edges","edges","edges","fmt","fmt","from","from","init","init","into","into","new","nodes","nodes","nodes","nodes","post_order","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","RenameTable","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","ids","init","into","local_names","lookup","lookup_id","names","new","parent","to_owned","try_from","try_into","type_id","update","vzip","Replacer","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","new","reconstruct_identifier","replace","try_from","try_into","type_id","vzip","SymbolTable","borrow","borrow_mut","check_shadowing","clone","clone_into","default","deref","deref_mut","deserialize","drop","fmt","from","from_json_file","from_json_string","function_symbol","functions","init","insert_block","insert_fn","insert_struct","insert_variable","into","lookup_fn_scope","lookup_fn_symbol","lookup_scope_by_index","lookup_struct","lookup_variable","lookup_variable_mut","new_function_symbol","parent","remove_variable_from_current_scope","scope_index","scope_index","scopes","serialize","structs","take_from_value","to_json_file","to_json_file_without_keys","to_json_string","to_json_value","to_owned","try_from","try_into","type_id","variable_in_local_scope","variable_in_parent_scope","variable_symbol","variables","vzip","FinalizeData","FunctionSymbol","_span","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","finalize","fmt","fmt","from","from","id","init","init","input","input","into","into","output_type","output_type","serialize","serialize","take_from_value","take_from_value","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","variant","vzip","vzip","Const","Input","Mut","VariableSymbol","VariableType","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","declaration","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","init","init","into","into","serialize","serialize","span","take_from_value","take_from_value","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_","type_id","type_id","vzip","vzip","TypeTable","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","fmt","from","get","init","inner","insert","into","to_owned","try_from","try_into","type_id","vzip","dead_code_eliminator","eliminate_expression","eliminate_program","eliminate_statement","DeadCodeEliminator","borrow","borrow_mut","deref","deref_mut","do_pass","drop","from","init","into","is_necessary","new","node_builder","reconstruct_assert","reconstruct_assign","reconstruct_associated_function","reconstruct_block","reconstruct_conditional","reconstruct_console","reconstruct_definition","reconstruct_expression_statement","reconstruct_function","reconstruct_identifier","reconstruct_iteration","reconstruct_return","reconstruct_struct_init","try_from","try_into","type_id","used_variables","vzip","destructure_expression","destructure_program","destructure_statement","destructurer","Destructurer","assigner","borrow","borrow_mut","deref","deref_mut","do_pass","drop","from","init","into","new","node_builder","reconstruct_assign","reconstruct_block","reconstruct_conditional","reconstruct_console","reconstruct_definition","reconstruct_iteration","reconstruct_return","reconstruct_tuple_access","simple_assign_statement","try_from","try_into","tuples","type_id","type_table","vzip","flatten_expression","flatten_program","flatten_statement","flattener","Flattener","assigner","borrow","borrow_mut","clear_early_returns","condition_stack","construct_guard","deref","deref_mut","do_pass","drop","fold_guards","fold_returns","from","init","into","new","node_builder","reconstruct_assert","reconstruct_assign","reconstruct_block","reconstruct_conditional","reconstruct_console","reconstruct_definition","reconstruct_function","reconstruct_iteration","reconstruct_return","reconstruct_struct_init","reconstruct_ternary","returns","simple_assign_statement","symbol_table","ternary_array","ternary_struct","ternary_tuple","try_from","try_into","type_id","type_table","unique_simple_assign_statement","vzip","assignment_renamer","function_inliner","inline_expression","inline_program","inline_statement","AssignmentRenamer","assigner","borrow","borrow_mut","clear","deref","deref_mut","drop","from","init","into","is_lhs","load","new","reconstruct_assign","reconstruct_conditional","reconstruct_console","reconstruct_definition","reconstruct_identifier","reconstruct_iteration","reconstruct_struct_init","rename_table","try_from","try_into","type_id","vzip","FunctionInliner","assignment_renamer","borrow","borrow_mut","call_graph","deref","deref_mut","do_pass","drop","from","init","into","new","node_builder","reconstruct_assign","reconstruct_block","reconstruct_call","reconstruct_conditional","reconstruct_console","reconstruct_definition","reconstruct_expression_statement","reconstruct_iteration","reconstruct_program_scope","reconstructed_functions","try_from","try_into","type_id","type_table","vzip","range_iterator","unroll_expression","unroll_program","unroll_statement","unroller","Clusivity","Exclusive","Inclusive","LoopBound","RangeIterator","borrow","borrow","borrow_mut","borrow_mut","cjk_compat_variants","clusivity","current","deref","deref","deref_mut","deref_mut","drop","drop","end","from","from","init","init","into","into","into_iter","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","new","next","nfc","nfd","nfkc","nfkd","progress_with","stream_safe","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Unroller","borrow","borrow_mut","constant_propagation_table","current_scope_index","deref","deref_mut","do_pass","drop","emit_err","enter_scope","exit_scope","from","handler","init","into","is_unrolling","new","node_builder","reconstruct_array_access","reconstruct_block","reconstruct_const","reconstruct_definition","reconstruct_function","reconstruct_identifier","reconstruct_iteration","reconstruct_program_scope","scope_index","symbol_table","try_from","try_into","type_id","type_table","unroll_iteration_statement","unroll_single_iteration","vzip","Input","Output","Pass","do_pass","rename_expression","rename_program","rename_statement","static_single_assigner","StaticSingleAssigner","assigner","borrow","borrow_mut","consume_access","consume_array","consume_assert","consume_assign","consume_binary","consume_block","consume_call","consume_cast","consume_conditional","consume_console","consume_const","consume_definition","consume_expression_statement","consume_function","consume_identifier","consume_iteration","consume_literal","consume_program","consume_program_scope","consume_return","consume_struct","consume_struct_init","consume_ternary","consume_tuple","consume_unary","consume_unit","deref","deref_mut","do_pass","drop","from","init","into","is_lhs","new","node_builder","pop","push","rename_table","simple_assign_statement","symbol_table","try_from","try_into","type_id","type_table","unique_simple_assign_statement","vzip","creator","SymbolTableCreator","borrow","borrow_mut","deref","deref_mut","do_pass","drop","from","handler","init","into","new","symbol_table","try_from","try_into","type_id","visit_function","visit_import","visit_mapping","visit_struct","vzip","check_expressions","check_program","check_statements","checker","return_incorrect_type","ADDRESS_TYPE","BOOLEAN_TYPE","FIELD_TYPE","GROUP_TYPE","INT_TYPES","MAGNITUDE_TYPES","SCALAR_TYPE","SIGNATURE_TYPE","SIGNED_INT_TYPES","TypeChecker","UNSIGNED_INT_TYPES","assert_address_type","assert_and_return_type","assert_array_type","assert_bool_int_type","assert_bool_type","assert_castable_type","assert_field_group_int_type","assert_field_group_scalar_int_type","assert_field_group_signed_int_type","assert_field_group_type","assert_field_int_type","assert_field_scalar_int_type","assert_field_type","assert_group_type","assert_int_type","assert_magnitude_type","assert_mapping_type","assert_member_is_not_record","assert_scalar_type","assert_signature_type","assert_signed_int_type","assert_type","assert_type_is_valid","assert_unsigned_int_type","borrow","borrow_mut","call_graph","check_core_function_call","check_eq_types","check_expected_struct","check_type","create_child_scope","deref","deref_mut","do_pass","drop","emit_err","enter_scope","exit_scope","from","function","get_core_constant","get_core_function_call","handler","has_finalize","has_return","init","into","is_finalize","is_imported","is_return","new","struct_graph","symbol_table","try_from","try_into","type_id","type_table","types_to_string","variant","visit_access","visit_array","visit_assert","visit_assign","visit_binary","visit_block","visit_call","visit_cast","visit_conditional","visit_console","visit_const","visit_definition","visit_err","visit_expression","visit_expression_statement","visit_function","visit_identifier","visit_iteration","visit_literal","visit_mapping","visit_program","visit_program_scope","visit_return","visit_statement","visit_struct","visit_struct_init","visit_ternary","visit_tuple","visit_unary","visit_unit","vzip"],"q":[[0,"leo_passes"],[11,"leo_passes::code_generation"],[16,"leo_passes::code_generation::generator"],[82,"leo_passes::common"],[89,"leo_passes::common::assigner"],[131,"leo_passes::common::constant_propagation_table"],[164,"leo_passes::common::graph"],[210,"leo_passes::common::rename_table"],[241,"leo_passes::common::replacer"],[257,"leo_passes::common::symbol_table"],[308,"leo_passes::common::symbol_table::function_symbol"],[356,"leo_passes::common::symbol_table::variable_symbol"],[416,"leo_passes::common::type_table"],[437,"leo_passes::dead_code_elimination"],[441,"leo_passes::dead_code_elimination::dead_code_eliminator"],[472,"leo_passes::destructuring"],[476,"leo_passes::destructuring::destructurer"],[504,"leo_passes::flattening"],[508,"leo_passes::flattening::flattener"],[549,"leo_passes::function_inlining"],[554,"leo_passes::function_inlining::assignment_renamer"],[580,"leo_passes::function_inlining::function_inliner"],[609,"leo_passes::loop_unrolling"],[614,"leo_passes::loop_unrolling::range_iterator"],[682,"leo_passes::loop_unrolling::unroller"],[718,"leo_passes::pass"],[722,"leo_passes::static_single_assignment"],[726,"leo_passes::static_single_assignment::static_single_assigner"],[777,"leo_passes::symbol_table_creation"],[778,"leo_passes::symbol_table_creation::creator"],[799,"leo_passes::type_checking"],[803,"leo_passes::type_checking::check_expressions"],[804,"leo_passes::type_checking::checker"],[906,"leo_ast::program"],[907,"core::result"],[908,"core::any"],[909,"leo_ast::expressions::access"],[910,"alloc::string"],[911,"leo_ast::expressions::array"],[912,"leo_ast::access::array_access"],[913,"leo_ast::statement::assert"],[914,"leo_ast::statement::assign"],[915,"leo_ast::access::associated_constant_access"],[916,"leo_ast::access::associated_function_access"],[917,"leo_ast::expressions::binary"],[918,"leo_ast::statement::block"],[919,"leo_ast::expressions::call"],[920,"leo_ast::expressions::cast"],[921,"leo_ast::statement::conditional"],[922,"leo_ast::statement::console::console_statement"],[923,"leo_ast::statement::definition"],[924,"leo_ast::expressions::err"],[925,"leo_ast::expressions"],[926,"leo_ast::statement::expression"],[927,"leo_ast::functions"],[928,"leo_ast::common::identifier"],[929,"leo_span::symbol"],[930,"leo_ast::statement::iteration"],[931,"leo_ast::mapping"],[932,"leo_ast::access::member_access"],[933,"leo_ast::struct"],[934,"leo_ast::statement::return_"],[935,"leo_ast::statement"],[936,"leo_ast::expressions::struct_init"],[937,"leo_ast::expressions::ternary"],[938,"leo_ast::expressions::tuple"],[939,"leo_ast::types::type_"],[940,"leo_ast::functions::mode"],[941,"leo_ast::expressions::unary"],[942,"leo_ast::expressions::unit"],[943,"leo_ast::expressions::literal"],[944,"core::fmt"],[945,"core::fmt"],[946,"core::fmt"],[947,"leo_errors::errors"],[948,"core::option"],[949,"core::cell"],[950,"serde::ser"],[951,"serde_json::value"],[952,"indexmap::set"],[953,"core::fmt"],[954,"alloc::boxed"],[955,"core::ops::function"],[956,"leo_span::span"],[957,"std::path"],[958,"leo_ast::common::node_builder"],[959,"leo_ast::access::tuple_access"],[960,"alloc::vec"],[961,"leo_ast::types::array"],[962,"leo_ast::types::tuple"],[963,"leo_ast::program::program_scope"],[964,"unicode_normalization::replace"],[965,"unicode_normalization::recompose"],[966,"unicode_normalization::decompose"],[967,"indicatif::progress_bar"],[968,"indicatif::iter"],[969,"unicode_normalization::stream_safe"],[970,"leo_errors::errors::loop_unroller::loop_unroller_errors"],[971,"leo_errors::emitter"],[972,"leo_ast::statement::const_"],[973,"leo_ast::types::mapping"],[974,"leo_ast::functions::core_function"],[975,"leo_errors::errors::type_checker::type_checker_error"],[976,"leo_ast::types::core_constant"]],"d":["","","The Dead Code Elimination pass traverses the AST and …","The destructuring pass traverses the AST and destructures …","The flattening pass traverses the AST after the SSA pass …","The Function Inlining pass traverses the AST and inlines …","","","The Static Single Assignment pass traverses the AST and …","","","","","","","","","The call graph for the program.","","","Mapping of composite names to a tuple containing metadata …","Reference to the current function.","","","","","Returns the argument unchanged.","","Mapping of global identifiers to their associated names.","Are we traversing a finalize block?","","Calls <code>U::from(self)</code>.","Are we traversing a transition function?","Initializes a new <code>CodeGenerator</code>.","A counter to track the next available register.","","","The struct dependency graph for the program.","The symbol table for the program.","","","","A mapping between expressions and their types.","Mapping of variables to registers.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A struct used to create assignment statements.","Contains the actual data for <code>Assigner</code>. Modeled this way to …","","","","","","","","","A strictly increasing counter, used to ensure that new …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","The inner counter. <code>RefCell</code> is used here to avoid <code>&amp;mut</code> all …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Constructs the assignment statement <code>place = expr;</code>. This …","Constructs the assignment statement <code>place = expr;</code>. This …","","","","","","","","","Return a new unique <code>Symbol</code> from a <code>&amp;str</code>.","Return a new unique <code>Symbol</code> from a <code>&amp;str</code>.","","","","","","","","Returns true if the constant exists in the local scope","Returns true if the constant exists in any parent scope","The known constants in the current scope This field is …","","","","","","","Returns the argument unchanged.","","Creates a new scope for the block and stores it in the …","Inserts a constant into the constant propagation table.","Inserts a function into the symbol table.","Calls <code>U::from(self)</code>.","Attempts to lookup a constant in the constant propagation …","Returns the scope associated with <code>index</code>, if it exists in …","The parent scope if it exists. For example, the parent …","Returns the current scope index. Increments the scope …","The index of the current scope.","The sub-scopes of this scope.","","","","","","","","A call graph.","An error that is emitted when a cycle is detected in the …","A directed graph.","Errors in directed graph operations.","An import dependency graph.","A node in a graph.","A struct dependency graph.","Adds an edge to the graph.","","","","","","Returns <code>true</code> if the graph contains the given node.","","","","","","","The directed edges in the graph. Each entry in the map is …","The directed edges in the graph. Each entry in the map is …","The directed edges in the graph. Each entry in the map is …","The directed edges in the graph. Each entry in the map is …","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Initializes a new <code>DiGraph</code> from a vector of source nodes.","The set of nodes in the graph.","The set of nodes in the graph.","The set of nodes in the graph.","The set of nodes in the graph.","Returns the post-order ordering of the graph. Detects if …","","","","","","","","","<code>RenameTable</code> tracks the names assigned by static single …","","","","","","","","","","","","","","","Returns the argument unchanged.","The mapping from symbols to node IDs. These are used to …","","Calls <code>U::from(self)</code>.","Returns the symbols that were renamed in the current scope.","Looks up the new name for <code>symbol</code>, recursively checking the …","Looks up the node ID for <code>symbol</code>, recursively checking the …","The mapping from names in the original AST to new names in …","Create a new <code>RenameTable</code> with the given parent.","The <code>RenameTable</code> of the parent scope.","","","","","Updates <code>self.mapping</code> with the desired entry. Creates a new …","","A <code>Replacer</code> applies <code>replacer</code> to all <code>Identifier</code>s in an AST. …","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","Recursively checks if the symbol table contains an entry …","","","","","","","","","Returns the argument unchanged.","Deserializes the JSON string into a symbol table from a …","Deserializes the JSON string into a symbol table.","","Functions represents the name of each function mapped to …","","Creates a new scope for the block and stores it in the …","Inserts a function into the symbol table.","Inserts a struct into the symbol table.","Inserts a variable into the symbol table.","Calls <code>U::from(self)</code>.","Returns the scope associated with the function symbol, if …","Attempts to lookup a function in the symbol table.","Returns the scope associated with <code>index</code>, if it exists in …","Attempts to lookup a struct in the symbol table.","Attempts to lookup a variable in the symbol table.","Returns a mutable reference to the <code>VariableSymbol</code> if it …","","The parent scope if it exists. For example, the parent …","Removes a variable from the symbol table.","Returns the current scope index. Increments the scope …","The index of the current scope.","The sub-scopes of this scope.","","Maps struct names to struct definitions. This field is …","","","Serializes the symbol table into a JSON value and removes …","Serializes the symbol table into a JSON string.","Converts the symbol table into a JSON value","","","","","Returns true if the variable exists in the local scope","Returns true if the variable exists in any parent scope","","The variables defined in a scope. This field is populated …","","Metadata associated with the finalize block.","An entry for a function in the symbol table.","The <code>Span</code> associated with the function.","","","","","","","","","","","","","","","","","Metadata associated with the finalize block.","","","Returns the argument unchanged.","Returns the argument unchanged.","The index associated with the scope in the parent symbol …","","","The inputs to the finalize block.","The inputs to the function.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The output type of the finalize block.","The output type of the function.","","","","","","","","","","","","","Is this function a transition, inlined, or a regular …","","","","","","An entry for a variable in the symbol table.","An enumeration of the different types of variable type.","","","","","","","","","The type of declaration for the variable.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","The <code>Span</code> associated with the variable.","","","","","","","","","","","The <code>Type</code> of the variable.","","","","","A mapping between node IDs and their types.","","","","","","","","","","Returns the argument unchanged.","Gets an entry from the table.","","The inner table. <code>RefCell</code> is used here to avoid <code>&amp;mut</code> all …","Inserts an entry into the table.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Whether or not the variables are necessary.","Initializes a new <code>DeadCodeEliminator</code>.","A counter to generate unique node IDs.","","Reconstruct an assignment statement by eliminating any …","Reconstructs the associated function access expression.","Reconstructs the statements inside a basic block, …","Flattening removes conditional statements from the program.","Parsing guarantees that console statements are not present …","Static single assignment replaces definition statements …","Reconstructs expression statements by eliminating any dead …","","Marks identifiers as used. This is necessary to determine …","Loop unrolling unrolls and removes iteration statements …","","Reconstruct the components of the struct init expression. …","","","","The set of used variables in the current function body.","","","","","","","A struct used to construct (unique) assignment statements.","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","A counter used to generate unique node IDs.","Flattens an assign statement, if necessary. Marks …","","","","","","Reconstructs","Replaces a tuple access expression with the appropriate …","A wrapper around <code>assigner.simple_assign_statement</code> that …","","","A mapping between variables and flattened tuple …","","A mapping between node IDs and their types.","","","","","","","A struct used to construct (unique) assignment statements.","","","Clears the state associated with <code>ReturnStatements</code>, …","A stack of condition <code>Expression</code>s visited up to the current …","Constructs a guard from the current state of the condition …","","","","","Fold guards and expressions into a single expression. Note …","Folds a list of return statements into a single return …","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","A counter used to generate unique node IDs.","Rewrites an assert statement into a flattened form. Assert …","Flattens an assign statement, if necessary. Marks …","Flattens the statements inside a basic block. The …","Flatten a conditional statement into a list of statements.","","","Flattens a function’s body and finalize block, if it …","","Transforms a return statement into an empty block …","Reconstructs a struct init expression, flattening any …","Reconstructs ternary expressions over arrays, structs, and …","A list containing tuples of guards and expressions …","A wrapper around <code>assigner.simple_assign_statement</code> that …","The symbol table associated with the program.","","","","","","","A mapping between node IDs and their types.","A wrapper around <code>assigner.unique_simple_assign_statement</code> …","","","","","","","An <code>AssignmentRenamer</code> renames the left-hand side of all …","","","","Clear the internal rename table.","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Load the internal rename table with a set of entries.","Initialize a new <code>AssignmentRenamer</code>.","Rename the left-hand side of the assignment statement.","Flattening removes conditional statements from the program.","Parsing guarantees that console statements are not present …","Static single assignment replaces definition statements …","Rename the identifier if it is the left-hand side of an …","Loop unrolling unrolls and removes iteration statements …","Rename the variable initializers in the struct expression.","","","","","","","A wrapper around an Assigner used to create unique …","","","The call graph for the program.","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Initializes a new <code>FunctionInliner</code>.","A counter used to create unique NodeIDs.","Reconstruct an assignment statement by inlining any …","Reconstructs the statements inside a basic block, …","","Flattening removes conditional statements from the program.","Parsing guarantees that console statements are not present …","Static single assignment replaces definition statements …","Reconstructs expression statements by inlining any …","Loop unrolling unrolls and removes iteration statements …","","A map of reconstructed functions in the current program …","","","","A mapping between node IDs and their types.","","","","","","","Whether or not a bound is inclusive or exclusive.","","","A trait for whose implementors are concrete values for …","An iterator over a range of values.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A table of constant variables.","Returns the index of the current scope. Note that if we …","","","","","Emits a Loop Unrolling Error","Enters a child scope.","Exits the current block scope.","Returns the argument unchanged.","An error handler used for any errors found during …","","Calls <code>U::from(self)</code>.","Are we in the midst of unrolling a loop?","","A counter used to generate unique node IDs.","","","","","","","","","The index of the current scope.","The symbol table for the function being processed.","","","","A mapping from node IDs to their types.","Unrolls an IterationStatement.","A helper function to unroll a single iteration an …","","","","A compiler pass consuming <code>Self::Input</code> and returning …","Runs the compiler pass.","","","","","","A struct used to construct (unique) assignment statements.","","","Consumes an access expression, accumulating any statements …","Consumes an array expression, accumulating any statements …","Consumes the expressions in an <code>AssertStatement</code>, returning …","Consume all <code>AssignStatement</code>s, renaming as necessary.","Consumes a binary expression, accumulating any statements …","Consumes a <code>Block</code>, flattening its constituent …","Consumes a call expression without visiting the function …","Consumes a cast expression, accumulating any statements …","Consumes a <code>ConditionalStatement</code>, producing phi functions …","Parsing guarantees that console statements are not present …","","Consumes the <code>DefinitionStatement</code> into an <code>AssignStatement</code>, …","Consumes the expressions associated with …","Reconstructs the <code>Function</code>s in the <code>Program</code>, while …","Produces a new <code>Identifier</code> with a unique name.","","Consumes and returns the literal without making any …","","","Reconstructs the expression associated with the return …","Reconstructs records in the program, ordering its fields …","Consumes a struct initialization expression with renamed …","Consumes a ternary expression, accumulating any statements …","Consumes a tuple expression, accumulating any statements …","Consumes a unary expression, accumulating any statements …","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","A flag to determine whether or not the traversal is on the …","Initializes a new <code>StaticSingleAssigner</code> with an empty …","A counter used to generate unique node IDs.","If the RenameTable has a parent, then <code>self.rename_table</code> is …","Pushes a new scope, setting the current scope as the new …","The <code>RenameTable</code> for the current basic block in the AST","","The <code>SymbolTable</code> of the program.","","","","A mapping from node IDs to their types.","Constructs a simple assign statement for <code>expr</code> with a …","","","A compiler pass during which the <code>SymbolTable</code> is created. …","","","","","Runs the compiler pass.","","Returns the argument unchanged.","The error handler.","","Calls <code>U::from(self)</code>.","","The <code>SymbolTable</code> constructed by this compiler pass.","","","","","","","","","","","","","","","","","","","","","","","","","Emits an error to the error handler if the given type is …","Use this method when you know the actual type. Emits an …","Emits an error if the type is not an array.","Emits an error to the handler if the given type is not a …","Emits an error to the handler if the given type is not a …","Emits an error to the handler if the given type is not a …","Emits an error to the handler if the given type is not a …","Emits an error to the handler if the given type is not a …","Emits an error to the handler if the given type is not a …","Emits an error to the handler if the given type is not a …","Emits an error to the handler if the given type is not a …","Emits an error to the handler if the given type is not a …","Emits an error to the handler if the given type is not a …","Emits an error to the handler if the given type is not a …","Emits an error to the handler if the given type is not an …","Emits an error to the handler if the given type is not a …","Emits an error if the type is not a mapping.","Emits an error if the struct member is a record type.","Emits an error to the handler if the given type is not a …","Emits an error to the handler if the given type is not a …","Emits an error to the handler if the given type is not a …","Emits an error to the error handler if the <code>actual</code> type is …","Emits an error if the type or its constituent types is not …","Emits an error to the handler if the given type is not an …","","","The call graph for the program.","Type checks the inputs to a core function call and returns …","Emits an error if the two given types are not equal.","Returns the <code>struct</code> type and emits an error if the <code>expected</code> …","Emits an error to the handler if the given type is invalid.","Creates a new child scope.","","","","","Emits a type checker error.","Enters a child scope.","Exits the current scope.","Returns the argument unchanged.","The name of the function that we are currently traversing.","Type checks the inputs to an associated constant and …","Emits an error if the <code>struct</code> is not a core library struct. …","The error handler.","Whether or not the function that we are currently …","Whether or not the function that we are currently …","","Calls <code>U::from(self)</code>.","Whether or not we are currently traversing a finalize …","Whether or not we are currently traversing an imported …","Whether or not we are currently traversing a return …","Returns a new type checker given a symbol table and error …","A dependency graph of the structs in program.","The symbol table for the program.","","","","A mapping from node IDs to their types.","","The variant of the function that we are currently …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0,46,47,46,47,46,47,46,47,47,46,47,46,47,46,47,46,47,46,47,46,47,46,47,46,46,47,46,47,46,47,46,47,46,47,46,47,46,47,46,47,0,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,0,64,0,0,0,0,0,61,64,61,64,61,61,61,64,61,64,61,64,61,5,6,109,61,64,61,64,61,64,61,64,61,61,5,6,109,61,61,64,61,64,61,64,61,64,61,0,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,0,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,0,0,74,76,74,76,74,76,74,76,74,76,74,76,74,76,74,76,74,74,76,74,76,74,74,76,74,76,74,76,74,76,74,76,74,76,74,76,74,76,74,76,74,76,74,74,76,74,77,77,77,0,0,77,73,77,73,77,73,77,73,73,77,73,77,73,77,73,77,73,77,73,77,77,77,77,73,73,73,73,77,77,73,73,77,73,77,73,77,73,77,73,73,77,73,77,73,77,73,77,73,77,73,73,77,73,77,73,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,0,0,0,0,0,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,0,0,0,0,0,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,0,0,0,0,0,0,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,0,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,0,0,0,0,0,0,90,90,0,0,90,91,90,91,91,91,91,90,91,90,91,90,91,91,90,91,90,91,90,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,90,91,90,91,90,91,90,91,0,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,110,110,0,110,0,0,0,0,0,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,0,0,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,0,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,[1,-1,[]],[1,-1,[]],[[]],[1,2],[-1,-1,[]],0,0,0,[[],1],[-1,-2,[],[]],0,[[3,4,5,6,7],8],0,0,0,0,0,[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],0,0,[[8,11],[[2,[12,12]]]],[[8,13],[[2,[12,12]]]],[[8,14],[[2,[12,12]]]],[[8,15],12],[[8,16],12],[[8,17],[[2,[12,12]]]],[[8,18],[[2,[12,12]]]],[[8,19],[[2,[12,12]]]],[[8,20],12],[[8,21],[[2,[12,12]]]],[[8,22],[[2,[12,12]]]],[[8,23],12],[[8,24],12],[[8,25],12],[[8,26],[[2,[12,12]]]],[[8,27],[[2,[12,12]]]],[[8,28],12],[[8,29],12],[[8,30],[[2,[12,12]]]],[[8,31,7],12],[[8,32],12],[[8,33],12],[[8,34],[[2,[12,12]]]],[[8,7],12],[[8,35],12],[[8,36],12],[[8,37],12],[[8,35],12],[[8,38],[[2,[12,12]]]],[[8,35],12],[[8,39],[[2,[12,12]]]],[[8,40],[[2,[12,12]]]],[41,12],[[8,41,42],12],[[8,43],[[2,[12,12]]]],[[8,44],[[2,[12,12]]]],[[8,45],[[2,[12,12]]]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[46,46],[47,47],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[[],46],[[],47],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,2],[1,2],[[46,48],49],[[47,48],49],[-1,-1,[]],[-1,-1,[]],[[],1],[[],1],0,[-1,-2,[],[]],[-1,-2,[],[]],[[46,30,27,50],37],[[47,30,27,50],37],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],[[46,-1,-2],31,51,51],[[47,-1,-2],31,51,51],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[52,52],[[-1,-2],2,[],[]],[[52,31],53],[[52,31],53],0,[[],52],[1,-1,[]],[1,-1,[]],[-1,[[9,[52]]],54],[1,2],[[52,48],49],[-1,-1,[]],[[],1],[52,1],[[52,31,27],[[55,[2]]]],[52,[[55,[2]]]],[-1,-2,[],[]],[[52,31],[[56,[27]]]],[[52,1],[[56,[[57,[52]]]]]],0,[52,1],0,0,[[52,-1],9,58],[[59,60],[[9,[-1]]],[]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[[[61,[-1]],-1,-1],2,62],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[61,[-1]],-1,[63,[-1]],[63,[-1]]],[[56,[-1]]],62],[[[61,[-1]],-1],53,62],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,2],[1,2],0,0,0,0,[[[64,[-1]],48],49,[65,62]],[[[61,[-1]],48],49,[65,62]],[-1,-1,[]],[-1,-1,[]],[[],1],[[],1],[-1,-2,[],[]],[-1,-2,[],[]],[[[63,[-1]]],[[61,[-1]]],62],0,0,0,0,[[[61,[-1]]],[[9,[[63,[-1]],[64,[-1]]]]],62],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[66,66],[[-1,-2],2,[],[]],[[],66],[1,-1,[]],[1,-1,[]],[1,2],[[66,66],53],[[-1,-2],53,[],[]],[[-1,-2],53,[],[]],[[-1,-2],53,[],[]],[[-1,-2],53,[],[]],[[66,48],49],[-1,-1,[]],0,[[],1],[-1,-2,[],[]],[66,[[0,[67]]]],[[66,31],[[56,[31]]]],[[66,31],[[56,[50]]]],0,[[[56,[[68,[66]]]]],66],0,[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[[66,31,31,50],2],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[1,-1,[]],[1,-1,[]],[1,2],[-1,-1,[]],[[],1],[-1,-2,[],[]],[-1,[[69,[-1]]],70],[[[69,[-1]],30],[[2,[27]]],70],0,[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[3,31,71],[[55,[2]]]],[3,3],[[-1,-2],2,[],[]],[[],3],[1,-1,[]],[1,-1,[]],[-1,[[9,[3]]],54],[1,2],[[3,48],49],[-1,-1,[]],[72,[[55,[3]]]],[60,[[55,[3]]]],0,0,[[],1],[3,1],[[3,31,29],[[55,[2]]]],[[3,31,35],[[55,[2]]]],[[3,31,73],[[55,[2]]]],[-1,-2,[],[]],[[3,31],[[56,[[57,[3]]]]]],[[3,31],[[56,[74]]]],[[3,1],[[56,[[57,[3]]]]]],[[3,31],[[56,[35]]]],[[3,31],[[56,[73]]]],[[3,31],[[56,[73]]]],[[1,29],74],0,[[3,31],2],[3,1],0,0,[[3,-1],9,58],0,[[59,60],[[9,[-1]]],[]],[[3,72,60],[[55,[2]]]],[[3,72,60,[75,[60]]],[[55,[2]]]],[3,[[55,[12]]]],[3,[[55,[59]]]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[[3,31],53],[[3,31],53],0,0,[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[76,76],[74,74],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[-1,[[9,[76]]],54],[-1,[[9,[74]]],54],[1,2],[1,2],0,[[76,48],49],[[74,48],49],[-1,-1,[]],[-1,-1,[]],0,[[],1],[[],1],0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[76,-1],9,58],[[74,-1],9,58],[[59,60],[[9,[-1]]],[]],[[59,60],[[9,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[77,77],[73,73],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[-1,[[9,[77]]],54],[-1,[[9,[73]]],54],[1,2],[1,2],[[77,77],53],[[73,73],53],[[-1,-2],53,[],[]],[[-1,-2],53,[],[]],[[-1,-2],53,[],[]],[[-1,-2],53,[],[]],[[-1,-2],53,[],[]],[[-1,-2],53,[],[]],[[-1,-2],53,[],[]],[[-1,-2],53,[],[]],[[77,48],49],[[77,48],49],[[73,48],49],[[73,48],49],[-1,-1,[]],[-1,-1,[]],[[],1],[[],1],[-1,-2,[],[]],[-1,-2,[],[]],[[77,-1],9,58],[[73,-1],9,58],0,[[59,60],[[9,[-1]]],[]],[[59,60],[[9,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,12,[]],[-1,12,[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],0,[-1,10,[]],[-1,10,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[4,4],[[-1,-2],2,[],[]],[[],4],[1,-1,[]],[1,-1,[]],[1,2],[[4,48],49],[-1,-1,[]],[[4,50],[[56,[41]]]],[[],1],0,[[4,50,41],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,-1,[]],[1,-1,[]],[[]],[1,2],[-1,-1,[]],[[],1],[-1,-2,[],[]],0,[78,79],0,[[79,15],[[2,[37]]]],[[79,16],[[2,[37]]]],[[79,18],[[2,[27]]]],[[79,20],[[2,[20]]]],[[79,23],[[2,[37]]]],[[79,24],[[2,[37]]]],[[79,25],[[2,[37]]]],[[79,28],[[2,[37]]]],[[79,29],29],[[79,30],[[2,[27]]]],[[79,32],[[2,[37]]]],[[79,36],[[2,[37]]]],[[79,38],[[2,[27]]]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],0,[-1,-2,[],[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,-1,[]],[1,-1,[]],[[]],[1,2],[-1,-1,[]],[[],1],[-1,-2,[],[]],[[4,78,46],80],0,[[80,16],[[2,[37]]]],[[80,20],[[2,[20]]]],[[80,23],[[2,[37]]]],[[80,24],[[2,[37]]]],[[80,25],[[2,[37]]]],[[80,32],[[2,[37]]]],[[80,36],[[2,[37]]]],[[80,81],[[2,[27]]]],[[80,30,27],37],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],0,[-1,10,[]],0,[-1,-2,[],[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[82,[[83,[[2,[[56,[27]],36]]]]]],0,[82,[[56,[27]]]],[1,-1,[]],[1,-1,[]],[[]],[1,2],[[82,60,[83,[[2,[[56,[27]],27]]]]],[[2,[27,[83,[37]]]]]],[[82,20,[83,[[2,[[56,[27]],36]]]]],2],[-1,-1,[]],[[],1],[-1,-2,[],[]],[[3,4,78,46],82],0,[[82,15],[[2,[37]]]],[[82,16],[[2,[37]]]],[[82,20],[[2,[20]]]],[[82,23],[[2,[37]]]],[[82,24],[[2,[37]]]],[[82,25],[[2,[37]]]],[[82,29],29],[[82,32],[[2,[37]]]],[[82,36],[[2,[37]]]],[[82,38],[[2,[27]]]],[[82,39],[[2,[27]]]],0,[[82,30,27],37],0,[[82,84,27,30,30],[[2,[27,[83,[37]]]]]],[[82,35,27,30,30],[[2,[27,[83,[37]]]]]],[[82,85,27,30,30],[[2,[27,[83,[37]]]]]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],0,[[82,27],[[2,[30,37]]]],[-1,-2,[],[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[86,2],[1,-1,[]],[1,-1,[]],[1,2],[-1,-1,[]],[[],1],[-1,-2,[],[]],0,[[86,-1],2,67],[46,86],[[86,16],[[2,[37]]]],[[86,23],[[2,[37]]]],[[86,24],[[2,[37]]]],[[86,25],[[2,[37]]]],[[86,30],[[2,[27]]]],[[86,32],[[2,[37]]]],[[86,38],[[2,[27]]]],0,[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[1,-1,[]],[1,-1,[]],[[]],[1,2],[-1,-1,[]],[[],1],[-1,-2,[],[]],[[78,6,46,4],87],0,[[87,16],[[2,[37]]]],[[87,20],[[2,[20]]]],[[87,21],[[2,[27]]]],[[87,23],[[2,[37]]]],[[87,24],[[2,[37]]]],[[87,25],[[2,[37]]]],[[87,28],[[2,[37]]]],[[87,32],[[2,[37]]]],[[87,88],88],0,[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],0,[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[89,[-2]]],[],[]],0,0,[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,-1,[]],[1,2],[1,2],0,[-1,-1,[]],[-1,-1,[]],[[],1],[[],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[2,[-2,-3,-4]]],[],[],[],[]],[-1,[[2,[-2,-3,-4,-5,-6,-7]]],[],[],[],[],[],[],[]],[-1,[[2,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[],[],[],[],[],[],[],[],[],[]],[-1,[[2,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[2,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2,-3,-4]]],[],[],[],[]],[-1,[[2,[-2,-3]]],[],[],[]],[-1,[[2,[-2,-3,-4,-5,-6]]],[],[],[],[],[],[]],[-1,[[2,[-2,-3,-4,-5,-6,-7,-8,-9]]],[],[],[],[],[],[],[],[],[]],[-1,[[2,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[2,[-2,-3,-4,-5]]],[],[],[],[],[]],[-1,2,[]],[-1,[[2,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[2,[-2,-3,-4,-5,-6,-7]]],[],[],[],[],[],[],[]],[-1,[[2,[-2,-3,-4,-5,-6,-7,-8]]],[],[],[],[],[],[],[],[]],[-1,[[2,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[],[],[],[],[],[],[],[],[],[]],[-1,[[2,[-2]]],[],[]],[-1,[[2,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[2,[-2,-3]]],[],[],[]],[-1,[[2,[-2,-3,-4,-5,-6,-7,-8]]],[],[],[],[],[],[],[],[]],[-1,[[2,[-2,-3,-4,-5,-6]]],[],[],[],[],[],[]],[-1,[[2,[-2,-3,-4,-5,-6,-7,-8,-9]]],[],[],[],[],[],[],[],[],[]],[-1,2,[]],[-1,[[2,[-2,-3,-4,-5]]],[],[],[],[],[]],[-1,[[2,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[],[],[],[],[],[],[],[],[],[],[],[]],[[-1,-1,90],[[91,[-1]]],92],[[[91,[-1]]],56,92],[-1,[[93,[-2]]],[],[]],[-1,[[94,[-2]]],[],[]],[-1,[[93,[-2]]],[],[]],[-1,[[94,[-2]]],[],[]],[[-1,95],[[96,[-2]]],[],[]],[-1,[[97,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,[98,1],[1,-1,[]],[1,-1,[]],[[]],[1,2],[[98,99],2],[[98,1],1],[[98,1],2],[-1,-1,[]],0,[[],1],[-1,-2,[],[]],0,[[3,4,100,78],98],0,[[98,14],[[2,[27]]]],[[98,20],[[2,[20]]]],[[98,101],[[2,[37]]]],[[98,25],[[2,[37]]]],[[98,29],29],[[98,30],[[2,[27]]]],[[98,32],[[2,[37]]]],[[98,88],88],0,0,[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],0,[[98,32],37],[[98,32,-1],37,92],[-1,-2,[],[]],0,0,0,[[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[102,11]],[[102,13]],[[102,15]],[[102,16]],[[102,19]],[[102,20]],[[102,21]],[[102,22]],[[102,23]],[[102,24]],[[102,101]],[[102,25]],[[102,28]],[[102,29]],[[102,30]],[[102,32]],[[102,45]],[[102,7]],[[102,88]],[[102,36]],[[102,35]],[[102,38]],[[102,39]],[[102,40]],[[102,43]],[[102,44]],[1,-1,[]],[1,-1,[]],[[]],[1,2],[-1,-1,[]],[[],1],[-1,-2,[],[]],0,[[78,3,4,46],102],0,[102,66],[102,2],0,[[102,30,27],37],0,[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],0,[[102,27],[[2,[30,37]]]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,-1,[]],[1,-1,[]],[[]],[1,2],[-1,-1,[]],0,[[],1],[-1,-2,[],[]],[100,103],0,[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[[103,29],2],[[103,7],2],[[103,33],2],[[103,35],2],[-1,-2,[],[]],0,0,0,0,[[[56,[41]],[56,[41]],[56,[41]]],[[56,[41]]]],0,0,0,0,0,0,0,0,0,0,0,[[104,[56,[41]],71],2],[[104,41,[56,[41]],71],41],[[104,[56,[41]],71],2],[[104,[56,[41]],71],2],[[104,[56,[41]],71],2],[[104,[56,[41]],71],2],[[104,[56,[41]],71],2],[[104,[56,[41]],71],2],[[104,[56,[41]],71],2],[[104,[56,[41]],71],2],[[104,[56,[41]],71],2],[[104,[56,[41]],71],2],[[104,[56,[41]],71],2],[[104,[56,[41]],71],2],[[104,[56,[41]],71],2],[[104,[56,[41]],71],2],[[104,[56,[41]],71],[[56,[105]]]],[[104,71,31,41],2],[[104,[56,[41]],71],2],[[104,[56,[41]],71],2],[[104,[56,[41]],71],2],[[104,[56,[41]],41,71],2],[[104,41,71],53],[[104,[56,[41]],71],2],[-1,-2,[],[]],[-1,-2,[],[]],0,[[104,106,[75,[[2,[[56,[41]],71]]]],71],[[56,[41]]]],[[104,[56,[41]],[56,[41]],71],2],[[104,30,[56,[41]],71],41],[[104,-1,12,[56,[41]],71],2,70],[104,1],[1,-1,[]],[1,-1,[]],[[]],[1,2],[[104,107],2],[[104,1],2],[[104,1],2],[-1,-1,[]],0,[[104,41,30],[[56,[108]]]],[[104,41,30],[[56,[106]]]],0,0,0,[[],1],[-1,-2,[],[]],0,0,0,[[3,4,100],104],0,0,[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],0,[[[75,[41]]],12],0,[[104,11]],[[104,13]],[[104,15],2],[[104,16],2],[[104,19]],[[104,20],2],[[104,21]],[[104,22]],[[104,23],2],[[104,24],2],[[104,101],2],[[104,25],2],[[104,26]],[[104,27]],[[104,28],2],[[104,29],2],[[104,30]],[[104,32],2],[[104,45]],[[104,33],2],[[104,7],2],[[104,88],2],[[104,36],2],[[104,37],2],[[104,35],2],[[104,38]],[[104,39]],[[104,40]],[[104,43]],[[104,44]],[-1,-2,[],[]]],"c":[],"p":[[15,"usize"],[15,"tuple"],[3,"SymbolTable",257],[3,"TypeTable",416],[6,"StructGraph",164],[6,"CallGraph",164],[3,"Program",906],[3,"CodeGenerator",16],[4,"Result",907],[3,"TypeId",908],[4,"AccessExpression",909],[3,"String",910],[3,"ArrayExpression",911],[3,"ArrayAccess",912],[3,"AssertStatement",913],[3,"AssignStatement",914],[3,"AssociatedConstant",915],[3,"AssociatedFunction",916],[3,"BinaryExpression",917],[3,"Block",918],[3,"CallExpression",919],[3,"CastExpression",920],[3,"ConditionalStatement",921],[3,"ConsoleStatement",922],[3,"DefinitionStatement",923],[3,"ErrExpression",924],[4,"Expression",925],[3,"ExpressionStatement",926],[3,"Function",927],[3,"Identifier",928],[3,"Symbol",929],[3,"IterationStatement",930],[3,"Mapping",931],[3,"MemberAccess",932],[3,"Struct",933],[3,"ReturnStatement",934],[4,"Statement",935],[3,"StructExpression",936],[3,"TernaryExpression",937],[3,"TupleExpression",938],[4,"Type",939],[4,"Mode",940],[3,"UnaryExpression",941],[3,"UnitExpression",942],[4,"Literal",943],[3,"Assigner",89],[3,"AssignerInner",89],[3,"Formatter",944],[6,"Result",944],[6,"NodeID",945],[8,"Display",944],[3,"ConstantPropagationTable",131],[15,"bool"],[8,"Deserializer",946],[6,"Result",947],[4,"Option",948],[3,"RefCell",949],[8,"Serializer",950],[4,"Value",951],[15,"str"],[3,"DiGraph",164],[8,"Node",164],[3,"IndexSet",952],[4,"DiGraphError",164],[8,"Debug",944],[3,"RenameTable",210],[8,"Iterator",953],[3,"Box",954],[3,"Replacer",241],[8,"Fn",955],[3,"Span",956],[3,"PathBuf",957],[3,"VariableSymbol",356],[3,"FunctionSymbol",308],[15,"slice"],[3,"FinalizeData",308],[4,"VariableType",356],[3,"NodeBuilder",958],[3,"DeadCodeEliminator",441],[3,"Destructurer",476],[3,"TupleAccess",959],[3,"Flattener",508],[3,"Vec",960],[3,"ArrayType",961],[3,"TupleType",962],[3,"AssignmentRenamer",554],[3,"FunctionInliner",580],[3,"ProgramScope",963],[3,"Replacements",964],[4,"Clusivity",614],[3,"RangeIterator",614],[8,"LoopBound",614],[3,"Recompositions",965],[3,"Decompositions",966],[3,"ProgressBar",967],[3,"ProgressBarIter",968],[3,"StreamSafe",969],[3,"Unroller",682],[4,"LoopUnrollerError",970],[3,"Handler",971],[3,"ConstDeclaration",972],[3,"StaticSingleAssigner",726],[3,"SymbolTableCreator",778],[3,"TypeChecker",804],[3,"MappingType",973],[4,"CoreFunction",974],[4,"TypeCheckerError",975],[4,"CoreConstant",976],[6,"ImportGraph",164],[8,"Pass",718]]},\
"leo_span":{"doc":"","t":"CCAAACANEDDNDDDDFLLLLLLLLLLLLLLLMLLLLMMMLLLLLMLLLLLLLLLLLLLLLMLLLLLLLFMLMMMLLLMMLLFFMFMMMLLMMLLLLLLLLLLLLLLLLLLLLLLLLLMDDIDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLLLMOLLLLMLLLLLLLLLLLKLLKLLLLLLLLLLLDLLFLLLLFLLLLDEDNRHDNDLLLLLLLLLLLLLLLLOFLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLMMOAMOLLLLLLLLLLLLLLLLLFRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR","n":["Span","Symbol","source_map","span","span_json","sym","symbol","Custom","FileName","LineCol","MultiByteChar","Real","SourceFile","SourceMap","SourceMapInner","SpanLocation","analyze_source_file","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytepos_to_file_charpos","bytes","clone","clone","clone_into","clone_into","col","col_start","col_stop","contents_of_span","contents_of_span","default","default","dummy","end_pos","eq","equivalent","equivalent","find_line_col","find_source_file","find_source_file_index","fmt","fmt","from","from","from","from","from","from","from","inner","into","into","into","into","into","into","into","is_not_test_framework","line","line_contents_of_span","line_start","line_stop","lines","load_file","lookup_file_pos","lookup_line","multibyte_chars","name","new","new_source","normalize_newlines","normalize_src","pos","remove_bom","source_file","source_file","source_files","span_to_location","span_to_string","src","start_pos","to_owned","to_owned","to_string","try_allocate_address_space","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","used_address_space","BytePos","CharPos","Pos","Span","add","add","add","add","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","default","default","deserialize","deserialize","dummy","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from_u32","from_u32","from_u32","from_usize","from_usize","from_usize","hash","hash","hi","impl_pos","into","into","into","is_dummy","lo","new","partial_cmp","partial_cmp","serialize","serialize","sub","sub","to_owned","to_owned","to_owned","to_string","to_u32","to_u32","to_u32","to_usize","to_usize","to_usize","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","SpanMapVisitor","borrow","borrow_mut","deserialize","expecting","fmt","from","into","serialize","try_from","try_into","type_id","visit_map","InnerInterner","InternedStr","Interner","Owned","PRE_DEFINED","SESSION_GLOBALS","SessionGlobals","Static","Symbol","as_str","as_u32","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","consts","create_session_if_not_set_then","default","deref","deserialize","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","from","from","from","get","hash","hash","inner","intern","intern","into","into","into","into","into","new","partial_cmp","prefill","prefilled","serde_from_symbol","serde_to_symbol","serialize","set","source_map","strings","sym","symbol_interner","symbols","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","with_session_globals","As","BHP1024","BHP256","BHP512","BHP768","ChaCha","Const","Else","False","For","GEN","If","In","Keccak256","Keccak384","Keccak512","Let","Mapping","Mod","Mut","Pedersen128","Pedersen64","Poseidon2","Poseidon4","Poseidon8","Return","SHA3_256","SHA3_384","SHA3_512","SelfLower","SelfUpper","Star","Struct","True","Type","_nonce","abs","abs_wrapped","add","add_wrapped","address","aleo","and","assert","assert_eq","assert_neq","block","bool","caller","commit_to_address","commit_to_field","commit_to_group","console","constant","contains","decrement","div","div_wrapped","double","eq","field","finalize","function","get","get_or_use","group","gt","gte","hash_to_address","hash_to_field","hash_to_group","hash_to_i128","hash_to_i16","hash_to_i32","hash_to_i64","hash_to_i8","hash_to_scalar","hash_to_u128","hash_to_u16","hash_to_u32","hash_to_u64","hash_to_u8","height","i128","i16","i32","i64","i8","import","increment","inline","input","inv","leo","lt","lte","main","mapping","mul","mul_wrapped","nand","neg","neq","nor","not","or","owner","pow","pow_wrapped","private","program","public","rand_address","rand_bool","rand_field","rand_group","rand_i128","rand_i16","rand_i32","rand_i64","rand_i8","rand_scalar","rand_u128","rand_u16","rand_u32","rand_u64","rand_u8","record","rem","rem_wrapped","remove","scalar","set","shl","shl_wrapped","shr","shr_wrapped","signature","signer","square","square_root","string","sub","sub_wrapped","then","to_x_coordinate","to_y_coordinate","transition","u128","u16","u32","u64","u8","verify","xor"],"q":[[0,"leo_span"],[7,"leo_span::source_map"],[119,"leo_span::span"],[203,"leo_span::span_json"],[216,"leo_span::symbol"],[301,"leo_span::symbol::sym"],[456,"alloc::vec"],[457,"alloc::string"],[458,"core::option"],[459,"alloc::rc"],[460,"core::fmt"],[461,"core::fmt"],[462,"std::io::error"],[463,"core::result"],[464,"core::any"],[465,"core::cmp"],[466,"serde::de"],[467,"core::hash"],[468,"serde::ser"],[469,"core::fmt"],[470,"core::num::nonzero"]],"d":["","","","Defines the <code>Span</code> type used to track where code comes from.","Provides custom serialize/deserialize implementations for …","","","Any sort of description for a source.","A file name.","File / Line / Column information on a <code>BytePos</code>.","Identifies an offset of a multi-byte character in a …","A real file.","A single source in the <code>SourceMap</code>.","The source map containing all recorded sources, methods to …","Actual data of the source map. We use this setup for …","Detailed information on a <code>Span</code>.","Finds all newlines, multi-byte characters, and non-narrow …","","","","","","","","","","","","","","","Converts an absolute <code>BytePos</code> to a <code>CharPos</code> relative to the …","The number of bytes, <code>&gt;= 2</code>.","","","","","The (0-based) column offset into the line.","","","Returns contents of a <code>span</code> assumed to be within the given …","Returns the source contents that is spanned by <code>span</code>.","","","Returns a dummy location.","The end position of this source in the <code>SourceMap</code>.","","","","Finds line column info about a given <code>pos</code>.","Find the source file containing <code>pos</code>.","Find the index for the source file containing <code>pos</code>.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The actual source map data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Is the env var <code>LEO_TESTFRAMEWORK</code> not enabled?","The 1-based line number.","Returns the source contents of the lines that <code>span</code> is …","","","Locations of line beginnings in the source code.","Loads the given <code>path</code> and returns a <code>SourceFile</code> for it.","Looks up the file’s (1-based) line number and (0-based …","Finds the line containing the given position. The return …","Locations of multi-byte characters in the source code.","The name of the file that the source came from.","Creates a new <code>SourceMap</code> given the file <code>name</code>, source …","Registers <code>source</code> under the given file <code>name</code>, returning a …","Replaces <code>\\\\r\\\\n</code> with <code>\\\\n</code> in-place in <code>src</code>.","Normalizes the source code and records the normalizations.","The absolute offset of the character in the <code>SourceMap</code>.","Removes UTF-8 BOM, if any.","","Information on the original source.","All the source files recorded thus far.","Retrives the location (source file, line, col) on the …","Returns a displayable representation of the <code>span</code> as a …","The complete source code.","The start position of this source in the <code>SourceMap</code>.","","","","Attempt reserving address space for <code>size</code> number of bytes.","","","","","","","","","","","","","","","","","","","","","","The address space below this value is currently used by …","A byte offset.","A character offset.","Offsets (i.e. positions), in some units (e.g. bytes or …","The span type which tracks where formatted errors …","Add two spans (by reference) together.","Add two spans together. The resulting span is the smallest …","","","","","","","","","","","","","","","","","","","","","Generates a dummy span with all defaults. Should only be …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","The end (high) position of the span, exclusive. The length …","Generate one-component tuple structs that implement the <code>Pos</code>…","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Is the span a dummy?","The start (low) position of the span, inclusive.","Generate a new span from the <code>start</code>ing and <code>end</code>ing positions.","","","","","","","","","","","","","","","","","","","","","","","","","","This visitor is used by the deserializer to unwrap mappings","","","Custom deserialization to enable removing spans from enums.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","The AST contains a few tuple-like enum variants that …","","","","","The inner interner. This construction is used to get …","An interned string, either prefilled “at compile time” …","A symbol-to-string interner.","String is constructed and stored during runtime.","","","All the globals for a compiler sessions.","String is stored “at compile time”, i.e. prefilled.","An interned string.","Convert to effectively a <code>&amp;&#39;static str</code> given the …","Converts this symbol to the raw index.","","","","","","","","","","","","","","","A helper for <code>symbols</code> defined below. The macro’s job is …","Creates the session globals and then runs the closure <code>f</code>.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the corresponding string for the given symbol.","","","","Interns <code>string</code>, returning a <code>Symbol</code> corresponding to it.","Maps a string to its interned representation.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the corresponding <code>Symbol</code> for the given <code>index</code>.","","Returns an interner prefilled with <code>init</code>.","Returns an interner prefilled with commonly used strings …","","","","Registration of strings and symbol index allocation is …","The source map used in the compiler.","A helper for <code>symbols</code> defined below. The macro’s job is …","","The interner for <code>Symbol</code>s used in the compiler.","Creates predefined symbols used throughout the Leo …","","","","","","","","","","","","","","","","","","Gives access to read or modify the session globals in <code>f</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,0,0,6,14,16,11,13,8,4,6,14,16,11,13,8,4,6,4,8,4,8,4,16,14,14,6,11,11,13,14,6,4,4,4,11,11,11,8,4,6,14,16,11,13,8,4,11,6,14,16,11,13,8,4,0,16,11,14,14,6,11,6,6,6,6,6,11,0,0,4,0,14,16,13,11,11,6,6,8,4,8,13,6,14,16,11,13,8,4,6,14,16,11,13,8,4,6,14,16,11,13,8,4,13,0,0,0,0,9,9,2,7,9,2,7,9,2,7,9,2,7,9,2,7,2,7,9,2,9,2,9,9,2,7,9,9,2,2,7,7,9,9,2,7,9,2,7,40,2,7,40,2,7,9,2,9,0,9,2,7,9,9,9,2,7,9,2,2,7,9,2,7,9,40,2,7,40,2,7,9,2,7,9,2,7,9,2,7,0,30,30,0,30,30,30,30,0,30,30,30,30,0,0,0,36,0,0,0,36,0,33,33,34,41,37,33,36,36,34,41,37,33,36,33,33,33,0,0,34,36,33,33,36,33,33,36,36,33,33,34,41,37,33,36,37,33,36,37,37,33,34,41,37,33,36,33,33,37,37,33,33,33,41,34,0,0,34,0,33,33,34,41,37,33,36,34,41,37,33,36,34,41,37,33,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],[[5,[[3,[2]],[3,[4]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[6,2],7],0,[8,8],[4,4],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],0,0,0,[[6,9],10],[[11,9],[[12,[10]]]],[[],11],[[],13],[[],14],0,[[4,4],15],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[11,2],[[12,[16]]]],[[11,2],[[12,[[17,[6]]]]]],[[11,2],[[12,[18]]]],[[8,19],20],[[4,19],20],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],15],0,[[11,9],[[12,[10]]]],0,0,0,[[11,21],[[22,[[17,[6]]]]]],[[6,2],[[5,[18,7]]]],[[6,2],[[12,[18]]]],0,0,[[8,10,2],6],[[11,1,8],[[17,[6]]]],[10,5],[10,5],0,[10,5],0,0,0,[[11,9],[[12,[14]]]],[[11,9],10],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,10,[]],[[13,23],[[12,[2]]]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],0,0,0,0,0,[[9,9],9],[[9,9],9],[[2,2],2],[[7,7],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[9,9],[2,2],[7,7],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[2,2],26],[[7,7],26],[[],9],[[],2],[-1,[[24,[9]]],27],[-1,[[24,[2]]],27],[[],9],[[9,9],15],[[2,2],15],[[7,7],15],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[9,19],20],[[9,19],20],[[2,19],20],[[7,19],20],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[23,-1,[]],[23,2],[23,7],[18,-1,[]],[18,2],[18,7],[[9,-1],5,28],[[2,-1],5,28],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[9,15],0,[[2,2],9],[[2,2],[[12,[26]]]],[[7,7],[[12,[26]]]],[[9,-1],24,29],[[2,-1],24,29],[[2,2],2],[[7,7],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,10,[]],[-1,23,[]],[2,23],[7,23],[-1,18,[]],[2,18],[7,18],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[24,[9]]],27],[[30,19],20],[[-1,19],[[24,[5,31]]],[]],[-1,-1,[]],[-1,-2,[],[]],[[9,-1],24,29],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[[30,-1],24,32],0,0,0,0,0,0,0,0,0,[[33,34,-1],-2,35,[]],[33,23],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[36,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[33,33],[[-1,-2],5,[],[]],[[33,33],26],0,[-1,-2,35,[]],[[],34],[36],[-1,[[24,[33]]],27],[[33,33],15],[[36,36],15],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[33,19],20],[[33,19],20],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[37,33,-1],-2,35,[]],[[33,-1],5,28],[[36,-1],5,28],0,[[37,1],33],[1,33],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[23,33],[[33,33],[[12,[26]]]],[[[38,[1]]],37],[[],37],[[39,-1],24,29],[-1,[[24,[39]]],27],[[33,-1],24,29],0,0,0,0,0,0,[-1,-2,[],[]],[-1,10,[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,-2,35,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"c":[],"p":[[15,"str"],[3,"BytePos",119],[3,"Vec",456],[3,"MultiByteChar",7],[15,"tuple"],[3,"SourceFile",7],[3,"CharPos",119],[4,"FileName",7],[3,"Span",119],[3,"String",457],[3,"SourceMap",7],[4,"Option",458],[3,"SourceMapInner",7],[3,"SpanLocation",7],[15,"bool"],[3,"LineCol",7],[3,"Rc",459],[15,"usize"],[3,"Formatter",460],[6,"Result",460],[3,"Path",461],[6,"Result",462],[15,"u32"],[4,"Result",463],[3,"TypeId",464],[4,"Ordering",465],[8,"Deserializer",466],[8,"Hasher",467],[8,"Serializer",468],[3,"SpanMapVisitor",203],[3,"Error",460],[8,"MapAccess",466],[3,"Symbol",216],[3,"SessionGlobals",216],[8,"FnOnce",469],[4,"InternedStr",216],[3,"Interner",216],[15,"slice"],[3,"NonZeroU32",470],[8,"Pos",119],[3,"InnerInterner",216]]},\
"leo_test_framework":{"doc":"The test framework to run integration tests with Leo code …","t":"AAAAANNNNNEDNNLLLLFMLLLLLLMLLLLLLLMMMMMMMMMMMMMMMMFFFDLLLLLMLLMMLLLLLNNIEIDDNLLLLLLLLMMLLLMMLLLLFLLLFLLMLKMMLKKFFFMLLLLLLLLLLNNNDELLLLLLLLLLLLLMMFLLLLLLMLLLLLLLLLL","n":["error","fetch","output","runner","test","FailedAndShouldntHave","MismatchedTestExpectationLength","MissingTestConfig","Panicked","PassedAndShouldntHave","TestError","TestFailure","UnexpectedError","UnexpectedOutput","borrow","borrow","borrow_mut","borrow_mut","emit_errors","errors","fmt","fmt","from","from","into","into","path","to_string","try_from","try_from","try_into","try_into","type_id","type_id","error","error","expected","expected","index","index","index","index","index","output","output","test","test","test","test","test","find_tests","split_tests_one_line","split_tests_two_line","TestExpectation","borrow","borrow_mut","clone","clone_into","deserialize","expectation","from","into","namespace","outputs","serialize","to_owned","try_from","try_into","type_id","ContinuousLines","Line","Namespace","ParseType","Runner","Test","TestCases","Whole","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","config","content","eq","equivalent","equivalent","expectation_category","fail_categories","fmt","from","from","from","get_benches","into","into","into","is_env_var_set","load_expectations","load_tests","name","new","parse_type","path","path_prefix","process_tests","resolve_namespace","run_test","run_tests","set_hook","take_hook","tests","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Fail","Pass","Skip","TestConfig","TestExpectationMode","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deserialize","deserialize","eq","equivalent","equivalent","expectation","extra","extract_test_config","fmt","fmt","from","from","into","into","namespace","serialize","serialize","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"leo_test_framework"],[5,"leo_test_framework::error"],[34,"leo_test_framework::error::TestError"],[50,"leo_test_framework::fetch"],[53,"leo_test_framework::output"],[69,"leo_test_framework::runner"],[125,"leo_test_framework::test"],[163,"serde_yaml::value"],[164,"alloc::string"],[165,"core::result"],[166,"core::option"],[167,"core::fmt"],[168,"core::fmt"],[169,"std::path"],[170,"core::iter::traits::iterator"],[171,"alloc::vec"],[172,"serde::de"],[173,"serde::ser"],[174,"std::path"],[175,"core::ops::function"],[176,"std::sync::mutex"],[177,"alloc::sync"],[178,"core::any"]],"d":["","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","returns (name, content) for all benchmark samples","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","The test should fail.","The test should pass.","The test should be skipped.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[0,0,0,0,0,8,8,8,8,8,0,0,8,8,33,8,33,8,0,33,8,8,33,8,33,8,33,8,33,8,33,8,33,8,34,35,36,37,34,36,38,35,37,36,37,34,36,38,35,37,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,19,19,0,0,0,0,0,19,28,21,19,28,21,19,19,19,28,28,19,19,19,21,21,19,28,21,19,0,28,21,19,0,21,21,28,21,26,28,21,21,29,26,0,0,0,21,19,28,21,19,28,21,19,28,21,19,5,5,5,0,0,5,23,5,23,5,23,5,23,5,23,5,5,5,23,23,0,5,23,5,23,5,23,23,5,23,5,23,5,23,5,23,5,23],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[1,[4,[[4,[2,3]],3]],5,[6,[2]],7],[[6,[8]]]],0,[[8,9],10],[[8,9],10],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,3,[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[12,[[0,[13]]]],[1,[[14,[1]]]],[1,[[14,[3]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[15,15],[[-1,-2],16,[],[]],[-1,[[4,[15]]],17],0,[-1,-1,[]],[-1,-2,[],[]],0,0,[[15,-1],4,18],[-1,-2,[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,11,[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[19,19],[[-1,-2],16,[],[]],0,0,[[19,19],20],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],0,0,[[19,9],10],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],[[14,[[16,[3,3]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,20],[[21,12],[[16,[22,[6,[15]]]]]],[[21,-1],[[14,[23]]],24],0,[[1,-1],[[16,[21,[14,[23]]]]],24],[-1,19,[]],0,0,[[21,[14,[23]],-1],[[14,[-2]]],25,[]],[[-1,1],[[6,[[27,[26]]]]],[]],[[-1,28],[[4,[2,3]]],[]],[[-1,1],16,29],[[],[[31,[[30,[[6,[3]]]]]]]],[[[4,[[4,[2,3]],[27,[32]]]],[31,[[30,[[6,[3]]]]]]],[[4,[[4,[2,3]],3]]]],0,[-1,-2,[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,5],[23,23],[[-1,-2],16,[],[]],[[-1,-2],16,[],[]],[-1,[[4,[5]]],17],[-1,[[4,[23]]],17],[[5,5],20],[[-1,-2],20,[],[]],[[-1,-2],20,[],[]],0,0,[1,[[6,[23]]]],[[5,9],10],[[23,9],10],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[5,-1],4,18],[[23,-1],4,18],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,11,[]],[-1,11,[]]],"c":[],"p":[[15,"str"],[4,"Value",163],[3,"String",164],[4,"Result",165],[4,"TestExpectationMode",125],[4,"Option",166],[15,"usize"],[4,"TestError",5],[3,"Formatter",167],[6,"Result",167],[3,"TypeId",168],[3,"Path",169],[8,"Iterator",170],[3,"Vec",171],[3,"TestExpectation",53],[15,"tuple"],[8,"Deserializer",172],[8,"Serializer",173],[4,"ParseType",69],[15,"bool"],[3,"TestCases",69],[3,"PathBuf",169],[3,"TestConfig",125],[8,"Fn",174],[8,"FnMut",174],[8,"Namespace",69],[3,"Box",175],[3,"Test",69],[8,"Runner",69],[3,"Mutex",176],[3,"Arc",177],[8,"Any",168],[3,"TestFailure",5],[13,"Panicked",34],[13,"FailedAndShouldntHave",34],[13,"UnexpectedOutput",34],[13,"UnexpectedError",34],[13,"PassedAndShouldntHave",34]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
